#+title: Default Config

* NCMPCPP
:PROPERTIES:
:header-args: :tangle ~/.config/ncmpcpp/config
:END:

#+begin_src conf
  mpd_host = localhost
  mpd_port = 6600
  mpd_music_dir = "~/Music/Music Files"

  progressbar_look = "─░─"
  display_volume_level = no
  user_interface = alternative
  ignore_leading_the = yes
  media_library_hide_album_dates = yes
  media_library_primary_tag = album_artist
#+end_src

* MPD
:PROPERTIES:
:header-args: :tangle ~/.mpd/mpd.conf :comments no
:END:

MPD hates to create its own files.

#+begin_src shell :tangle no
  touch ~/.mpd/{database,pid,state,sticker.sql,log}
#+end_src

You /can/ enable mpd as a non-user unit, but it will cause no end of trouble and will not work. Do not do this.

#+begin_src shell :tangle no
  systemctl enable --user mpd
#+end_src

#+begin_src conf
  music_directory    "~/Music/Music Files"
  playlist_directory "~/Music/Playlists"
  db_file            "~/.mpd/database"
  pid_file           "~/.mpd/pid"
  state_file         "~/.mpd/state"
  sticker_file       "~/.mpd/sticker.sql"
  log_file           "~/.mpd/log"
  port               "6600"
  #auto_update        "yes"
#+end_src

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.mpd/mpd.conf" "no")
  audio_output {
  type       "osx"
  name       "CoreAudio"
  mixer_type "software"
  }
#+end_src

#+begin_src conf :tangle (if (eq system-type 'gnu/linux) "~/.mpd/mpd.conf" "no")
  audio_output {
  type "pulse"
  name "pulse audio"
  }
#+end_src
* Beets
:PROPERTIES:
:header-args: :tangle ~/.config/beets/config.yaml
:END:

#+begin_src yaml
  directory: "~/Music/Music Files"
  library: ~/.config/beets/musiclibrary.blb
  original_date: yes
  languages: en
  import:
    move: yes
  plugins: fetchart ftintitle mpdupdate smartplaylist embedart
  embedart:
    auto: yes
  mpdupdate:
    host: localhost
    port: 6600
  smartplaylist:
    playlist_dir: ~/Music/Playlists
    playlists:
      - name: all.m3u
        query: ''                  # Matches all music in your library
  playlist:
    auto: no
    relative_to: ~/Music
    playlist_dir: ~/Music/Playlists
  replace:
    '[\\/]': _
    '^\.': _
    '[\x00-\x1f]': _
    '[<>:"\?\*\|]': _
    '\s+$': ''
    '^\s+': ''
    '^-': _
  paths:
      default: $albumartist/$album%aunique{}/$track $title
      singleton: Non-Album/$artist/$title
      comp: Compilations/$album%aunique{}/$track $title
#+end_src

* Hushlogin

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.hushlogin" "no")
  # Silence
#+end_src

* Tmux
#+begin_src conf :tangle ~/.tmux.conf
  set-window-option -g mode-keys emacs
  unbind-key C-b
  set-option -g prefix C-']'
  bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
#+end_src

* Youtube DL
#+begin_src conf :tangle ~/.config/youtube-dl/config
  -o ~/Downloads/%(title)s-%(id)s.%(ext)s
#+end_src

* SSH
The =~/.ssh= config is a strange thing. The user-editable =~/.ssh/config=
file, (as tangled by this org file) is only semi-private, while the
other files in the directory are something to avoid putting on the
internet at all.

I hope I never have to do this again, because I plan never to lose my
generated keys. But if its needed, it's pretty easy. The current key
I'm using was generated via =ssh-keygen -t rsa -b 2048=.

That's also pretty easy, especially if the current machine only has
one key. The command is =ssh-copy-id user@host=.

First, [[https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent][generate]] a new SSH key. The =ssh-keygen= command will ask for a
location to save it in, I tend to use the default of =~/.ssh/id_rsa=.

#+BEGIN_SRC sh
  ssh-keygen -t rsa -b 4096 -C "geoff@mac.into.sh"
#+END_SRC

Then copy the key to the [[https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/][clipboard]].

#+BEGIN_SRC sh
  pbcopy < ~/.ssh/id_rsa.pub
#+END_SRC

Paste the key into the =GitHub > Settings > SSH and GPG keys= section.

As per [[https://github.com/jirsbek/SSH-keys-in-macOS-Sierra-keychain][jirsbek]] and [[https://developer.apple.com/library/content/technotes/tn2449/_index.html#//apple_ref/doc/uid/DTS40017589][Apple]], the behaviour of SSH in macOS Sierra has
changed. It's pretty easy to make things work correctly, so I've done
that.

#+begin_src conf  :mkdirp yes :tangle ~/.ssh/config
  Host *
       AddKeysToAgent yes
       UseKeychain yes
       IdentityFile ~/.ssh/id_rsa
       ControlPath ~/.ssh/master-%h:%p
       ControlMaster auto
       ControlPersist 10m
       AddKeysToAgent yes
       IdentitiesOnly yes
       UseKeychain yes
       IdentityFile ~/.ssh/id_rsa
  Host router
       Hostname 192.168.1.1
       User root
#+end_src
* MPV
*Defaults*


 #+begin_src conf :tangle ~/.config/mpv/mpv.conf
   screenshot-directory=~/Downloads/
   screenshot-format=png
   screenshot-template="%F-%whh%wMm%wSs%wT"

   save-position-on-quit
   hwdec
 #+end_src

*Audio level normalization*

 #+begin_src conf :tangle ~/.config/mpv/mpv.conf
   #af="lavfi=[dynaudnorm=f=75:g=25:n=0:p=0.58]"
   af=loudnorm=I=-30
 #+end_src

*Keybindings*

 #+begin_src conf :tangle ~/.config/mpv/input.conf
   z           no-osd async screenshot video
   WHEEL_UP    ignore
   WHEEL_DOWN  ignore
   WHEEL_RIGHT ignore
   WHEEL_LEFT  ignore
 #+end_src

* Git
#+begin_src gitignore :tangle ~/.config/git/ignore
  .DS_Store
  ,*~
  \#*\#
  .\#*
  ,*.elc
  ,*.pyc
#+end_src

#+begin_src conf :tangle ~/.config/git/config
  [core]
          excludesfile = ~/.config/git/ignore
          quotepath = false
          editor = emacsclient
          ignorecase = false

  [user]
          name = Geoff MacIntosh
          email = geoff@mac.into.sh

  [color]
          diff = auto
          status = auto
          branch = auto
          interactive = auto
          ui = auto

  [diff]
          renameLimit = 5000

  [pull]
          rebase = false

  [init]
          defaultBranch = main

  [fetch]
          prune = true
          pruneTags = true

  [diff "org"]
        xfuncname = "^\\*+.*"

  [diff "lisp"]
        xfuncname = "^\\([^ ]+ [^ ]+"
#+end_src

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.config/git/config" "no")
  [credential]
            helper = osxkeychain
#+end_src

#+begin_src conf :tangle ~/.config/git/attributes
  ,,*.org   diff=org
  ,,*.lisp  diff=lisp
  ,,*.el    diff=lisp
  ,,*.hy    diff=lisp
  ,,*.scm   diff=lisp
#+end_src

* Fish
** Main Config

#+begin_src fish :tangle ~/.config/fish/config.fish
  set -gx XDG_DATA_HOME   $HOME/.local/share
  set -gx XDG_CONFIG_HOME $HOME/.config
  set -gx XDG_CACHE_HOME  $HOME/.cache

  set -gx EDITOR "emacsclient -tty -a \"\""
  set -gx VISUAL "emacsclient -c -a \"\""

  test -e "/usr/local/sbin" && fish_add_path "/usr/local/sbin"
  test -e "/usr/local/bin" && fish_add_path "/usr/local/bin"
  test -e "/Library/TeX/texbin" && fish_add_path "/Library/TeX/texbin"
  test -e "/usr/local/opt/ruby/libexec/gembin" && fish_add_path "/usr/local/opt/ruby/libexec/gembin"
  test -e "/usr/local/opt/ruby/bin" && fish_add_path "/usr/local/opt/ruby/bin"
  test -e "/opt/local/bin" && fish_add_path "/opt/local/bin"
  test -e "/opt/local/sbin" && fish_add_path "/opt/local/sbin"

  function __fish_describe_command; end # Fixes issues with Catalina

  function fish_command_not_found
      __fish_default_command_not_found_handler $argv[1]
  end

  # set __fish_git_prompt_show_informative_status "yes"
  # set __fish_git_prompt_char_dirtystate "+"

  function fish_greeting; end
  function fish_title; end

  abbr -a -- - prevd
  abbr -a -- = nextd

  abbr -a yt  youtube-dl
  abbr -a yta youtube-dl -x --audio-format best
  abbr -a mg  mg -n

  if not functions -q fisher
      set -q XDG_CONFIG_HOME; or set XDG_CONFIG_HOME ~/.config
      curl https://git.io/fisher --create-dirs -sLo $XDG_CONFIG_HOME/fish/functions/fisher.fish
      fish -c fisher
  end

  if type brew > /dev/null 2>&1
      set -gx HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK 1
  end
#+end_src

#+begin_src fish :tangle ~/.config/fish/fishfile
   jethrokuan/z
   jorgebucaran/fish-bax
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/fish_prompt.fish
  function prompt_ssh -d "Check to see if in an SSH session."
      if test -n "$SSH_CLIENT"
          printf '%s@%s ' (whoami) (hostname -s)
      end
  end

  function prompt_cwd -d "Display the current working directory."
      # set_color $fish_color_cwd
      printf '%s' (prompt_pwd)
      set_color normal
  end

  function prompt_git -d "Display git status in the prompt"
      printf '%s' (__fish_git_prompt)
  end

  function fish_prompt -d "The prompt for fish"
      #prompt_ssh
      prompt_cwd
      prompt_git
      printf ' ❯ '
  end
#+end_src

** Manp

#+begin_src fish :tangle ~/.config/fish/functions/fish_user_key_bindings.fish
  bind \ef forward-bigword
#+end_src

#+begin_src fish :tangle ~/.config/fish/functions/manp.fish
  function manp  -d "Open man pages as PDF documents"
      if type open > /dev/null 2>&1
          man -t $argv | open -f -a Preview
      else
          man $argv
      end
  end
#+end_src

** FLAC/ALAC

#+begin_src fish :tangle ~/.config/fish/functions/flac-alac.fish
  function flac-alac -d "Convert flac to alac"
      if type ffmpeg > /dev/null 2>&1
           for f in *.flac; ffmpeg -i $f -acodec alac -vsync 2 -c:v copy $f.m4a; end;
      else
          echo "Install FFMPEG with ALAC support."
      end
  end
#+end_src

** Brace expansion
convert company-logo.{svg,png} # Convert a SVG vector graphics file into a PNG raster graphics file. This uses brace expansion to generate the names to pass to ImageMagick's convert command.
** Stabilize
*** Requirements
You'll need ffmpeg built =-with-libvidstab= in homebrew, as in

#+begin_src shell
  brew install varenc/ffmpeg/ffmpeg --with-libvidstab
#+end_src

*** Steps
Analyse the video with default or more intense settings. This is step one and doesn't actually make a video.

#+begin_src shell
  ffmpeg -i input.mov -vf vidstabdetect -f null -
#+end_src

*** References
- [[https://github.com/georgmartius/vid.stab][vid.stab]]
** Split a FLAC file
I didn't actually know that FLAC files could be produced as a single file for an entire album, as that seems insane. In order to turn them into useful files you need ~shntool~ and ~flac~ in Nix. Then run this in the correct directory:

#+begin_src shell
  shnsplit -f *.cue -t "%n-%t" -o flac *.flac
#+end_src

This seems to work as of 9 May 2020 with Fish v3.1.2. Obviously you then want to turn the flac files into more playable files or something.

*References*
- [[https://unix.stackexchange.com/questions/10251/how-do-i-split-a-flac-with-a-cue][command line - How do I split a flac with a cue? - Unix & Linux Stack Exchange]] [2020-05-09 Sat]

** Dict
#+begin_src fish :tangle ~/.config/fish/functions/dict.fish
  function dict -d "Overload the dict function to keep a log"
      command dict "$argv" | less
      printf "%s %s\n" (date) "$argv" >> ~/org/meta/dictlog
  end

#+end_src
* Kitty
:PROPERTIES:
:header-args: :tangle ~/.config/kitty/kitty.conf
:END:

#+begin_src conf
  cursor_blink_interval 0
  shell fish
  close_on_child_death yes
  editor emacs
  font_size 13.0
  font_family SF Mono
  tab_bar_style separator
  tab_separator "  "
  # tab_activity_symbol "*"
  foreground #000000
  background #FFFFFF
#+end_src

* Mbsync

#+begin_src conf :tangle ~/.mbsyncrc :comments none
    IMAPAccount fastmail
    Host imap.fastmail.com
    Port 993
    User gmacintosh@fastmail.fm
    PassCmd "pass mbsync.fastmail.com"
    SSLType IMAPS

    IMAPStore fastmail-remote
    Account fastmail

    MaildirStore fastmail-local
    Path ~/Mail/
    Inbox ~/Mail/INBOX
    SubFolders Verbatim

    Channel fastmail
    Far :fastmail-remote:
    Near :fastmail-local:
    Patterns *
    Expunge Both
    CopyArrivalDate yes
    Sync All
    Create Both
    Remove Both
    SyncState *
#+end_src

Before everything works, you'll still need to set up mbsync and mu, so run the following commands:

#+begin_src shell :tangle no
  mbsync --all
  mu init --maildir=~/Mail --my-address=geoff@mac.into.sh
  mu index
#+end_src

I think mu will actually index correctly on its own the first time you launch mu4e, but I'm not sure.

* GPG

#+begin_src conf :tangle ~/.gnupg/gpg.conf :comments no
  no-greeting
  no-secmem-warning
  keyserver pool.sks-keyservers.net
  #default-key CB7647349621074630BED0DADDCB697E089A4F88
  #default-recipient-self
  #encrypt-to CB7647349621074630BED0DADDCB697E089A4F88
  bzip2-compress-level 9
  compress-level 9
#+end_src

#+begin_src conf :tangle ~/.gnupg/gpg-agent.conf :comments no
  # allow-emacs-pinentry
  # allow-loopback-entry
  max-cache-ttl 86400
  default-cache-ttl 86400
#+end_src

#+begin_src conf :tangle (if (eq system-type 'darwin) "~/.gnupg/gpg-agent.conf" "no") :comments no
  pinentry-program /usr/local/bin/pinentry-mac
#+end_src

* macOS Default Keybindings
#+begin_src text :tangle (if (eq system-type 'darwin) "~/Library/KeyBindings/DefaultKeyBinding.dict" "no") :comments no
  {
  "^l"        = "centerSelectionInVisibleArea:";
  "^/"        = "undo:";
  "^_"        = "undo:";
  "^ "        = "setMark:";
  "^\@"       = "setMark:";
  "^w"        = "deleteToMark:";

  "~f"        = "moveWordForward:";
  "~b"        = "moveWordBackward:";
  "~<"        = "moveToBeginningOfDocument:";
  "~>"        = "moveToEndOfDocument:";
  "~v"        = "pageUp:";
  "~/"        = "complete:";
  "~c"        = ( "capitalizeWord:",
                  "moveForward:",
                  "moveForward:");
  "~u"        = ( "uppercaseWord:",
                  "moveForward:",
                  "moveForward:");
  "~l"        = ( "lowercaseWord:",
                  "moveForward:",
                  "moveForward:");
  "~d"        = "deleteWordForward:";
  "^~h"       = "deleteWordBackward:";
  "~\U007F"   = "deleteWordBackward:";
  "~t"        = "transposeWords:";
  "~\@"       = ( "setMark:",
                  "moveWordForward:",
                  "swapWithMark");
  "~h"        = ( "setMark:",
                  "moveToEndOfParagraph:",
                  "swapWithMark");

  "^x" = {
       "u"     = "undo:";
       "k"     = "performClose:";
       "^f"    = "openDocument:";
       "^x"    = "swapWithMark:";
       "^m"    = "selectToMark:";
       "^s"    = "saveDocument:";
       "^w"    = "saveDocumentAs:";
       };
  }
#+end_src
