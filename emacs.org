# -*- after-save-hook: (org-babel-tangle); -*-
#+title: Emacs

* Theme
#+begin_src emacs-lisp :tangle ~/.config/emacs/actuator-theme.el :results replace
  (deftheme actuator)

  (add-hook 'minibuffer-setup-hook 'actuator--minibuffer-setup)

  (defun actuator--minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((org-document-title :height 1.0))))

  (let ((blue  "#29BEEA")
        (white "#FFFFFF")
        (dark  "#000000")
        (cyan  "#00FFFF")
        (red   "#FF1616")
        (grey  "#484e55")
        (lgrey "#bdc4cc")

        (highlight-dim "#B1F8FF")
        (code-background "#FFFFFF")

        (xgrey "#F5F6F8")
        (xbord "#EDF0F4"))

    (custom-theme-set-faces
     'user
     `(fixed-pitch ((t (:family "SF Mono" :weight light))))
     `(variable-pitch ((t (:family "Helvetica" :weight light))))
     `(default ((t (:background ,white :foreground ,dark :weight light))))
     `(cursor ((t (:background ,blue))))
     `(fringe ((t (:background ,white))))
     `(region ((t (:background ,highlight-dim))))
     `(highlight ((t (:background nil))))
     `(hl-line ((t (:background ,grey :foreground ,white))))
     `(header-line ((t (:background ,grey :foreground ,white))))

     `(font-lock-builtin-face ((t (:weight bold))))
     `(font-lock-constant-face ((t (:weight bold))))
     `(font-lock-function-name-face ((t (:weight bold))))
     `(font-lock-keyword-face ((t (:weight bold))))
     `(font-lock-variable-name-face ((t (:weight bold))))
     `(font-lock-type-face ((t (:weight bold))))
     `(font-lock-string-face ((t (:weight thin))))

     `(mu4e-header-highlight-face ((t (:inherit hl-line))))
     `(mu4e-compose-separator-face ((t (:inherit org-drawer))))
     `(message-header-name ((t (:weight light
                                        :foreground ,lgrey))))
     `(message-header-subject ((t :weight normal
                                         :foreground ,dark)))
     `(message-header-to ((t :weight normal
                                         :foreground ,dark)))
     `(message-header-other ((t (:weight normal
                                         :foreground ,dark))))

     `(font-lock-warning-face ((t (:foreground ,red))))
     `(font-lock-comment-face ((t (:weight thin))))
     `(font-lock-comment-delimiter-face ((t (:weight thin))))

     `(org-drawer ((t (:foreground ,lgrey))))
     `(org-special-keyword ((t (:inherit org-drawer
                                         :foreground ,dark))))
     `(org-ellipsis ((t (:foreground ,lgrey))))
     `(org-block ((t (:background ,code-background :extend t))))
     `(org-block-begin-line ((t :inherit org-block)))
     `(link ((t :foreground ,dark
                :underline t)))
     `(org-document-title ((t :foreground ,dark
                               :height 220)))
     `(org-level-1 ((t :weight bold)))
     `(org-done ((t :foreground ,lgrey
                    :weight bold)))
     `(org-headline-done ((t :foreground ,grey)))
     `(org-todo ((t :foreground ,red
                    :weight bold)))
     `(org-special-keyword ((t :foreground ,grey)))

     `(org-date ((t :foreground ,dark
                    :underline t)))

     `(pulse-highlight-start-face ((t :background ,red)))

     ;; `(dired-filename ((t :foreground red)))
     ;; `(dired-header ((t :foreground red)))
     ;; `(dired-hide-details-information ((t :foreground red)))
     ;; `(dired-hide-details-detail ((t :foreground red)))
     ;; `(dired-ignored ((t :foreground red)))
     ;; `(dired-broken-symlink ((t :foreground red)))
     ;; `(dired-directory ((t :foreground red)))
     ;; `(dired-symlink ((t :foreground red)))

     ;; `(elfeed-search-date-face ((t :foreground red)))
     ;; `(elfeed-search-title-face ((t :foreground red)))
     ;; `(elfeed-search-unread-title-face ((t :foreground red)))
     ;; `(elfeed-search-last-update-face ((t :foreground red)))
     ;; `(elfeed-search-feed-face ((t :foreground red)))
     ;; `(elfeed-search-tag-face ((t :foreground red)))

     `(elfeed-search-unread-count-face ((t :foreground ,white)))

     `(ivy-current-match ((t (:background ,grey :foreground ,white :extend t))))
     `(minibuffer-prompt ((t (:inherit default))))
     `(isearch ((t (:background ,lgrey))))
     ;; `(show-paren-match ((t (:background ,lgrey))))
     ;; `(show-paren-match-expression ((t (:background ,lgrey))))
     ;; `(show-paren-mismatch ((t (:background ,lgrey))))
     ;; `(magit-section-heading ((t (:background ,lgrey))))
     ;; `(magit-section-highlight ((t (:background ,lgrey))))

     `(mode-line ((t (:box (:line-width 7
                                        :color ,grey)
                           ;;:underline nil
                           ;;:overline ,xbord
                           :foreground ,white
                           :background ,grey
                           ;;:inherit variable-pitch
                           :height 110))))
     `(mode-line-inactive ((t (:inherit mode-line
                               :foreground ,lgrey
                               :background ,xgrey
                               :box (:line-width 7 :color, xgrey)))))

     `(mode-line-highlight ((t (:box (:line-width 7
                                      :color ,grey)
                                :background ,grey
                                :foreground ,white))))
     `(eshell-prompt ((t :foreground ,dark
                         :weight bold)))


     ))

  (provide-theme 'actuator)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; End:

  ;;; actuator-theme.el ends here
#+end_src

#+results:
: actuator-theme
* Early Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/early-init.el
:END:

#+begin_src emacs-lisp :comments no
  ;;; early-init.el --- Set up some pre-package.el defaults -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:
#+end_src

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
  (setq frame-inhibit-implied-resize t)
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile (defvar package-quickstart))
  ;;(setq package-quickstart-file (expand-file-name "var/package-quickstart.el" user-emacs-directory))
  (when (file-exists-p package-quickstart-file)
    (setq package-quickstart t))
#+end_src

#+begin_src emacs-lisp :comments no
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :mkdirp yes
:END:
** Lexical Binding
#+begin_src emacs-lisp :comments no
  ;;; init.el --- Emacs init -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;;; Code:
#+end_src

** Native compile
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (eval-when-compile (defvar native-comp-async-report-warnings-errors))
    (setq native-comp-async-report-warnings-errors nil))
#+end_src

** Very early
#+begin_src emacs-lisp
  (package-activate-all)

  (eval-when-compile (defvar org-directory))
  (setq org-directory (expand-file-name "~/org/"))
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-original-gc-cons-threshold gc-cons-threshold
    "Original value for `gc-cons-threshold'.")
  (defvar actuator-original-gc-cons-percentage gc-cons-percentage
    "Original value for `gc-cons-percentage'.")
  (defvar actuator-engorged-gc-cons-threshold (* 5 1000 1000 1000)
    "Enlarged `gc-cons-threshold'.")
  (defvar actuator-engorged-gc-cons-percentage 0.6
    "Enlarged `gc-cons-percentage'.")

  (defun actuator-restore-gc ()
    "Restore `gc-cons-threshold' and `gc-cons-percentage' value.

  This should be used shortly after enlarging the garbage
  collection values and ideally before doing any typing. It might
  cause Emacs to pause for a noticable amount of time, but I
  haven't noticed that so far."

    (setq gc-cons-threshold  actuator-original-gc-cons-threshold)
    (setq gc-cons-percentage actuator-original-gc-cons-percentage)
    (garbage-collect))

  (defun actuator-engorge-gc ()
    "Set `gc-cons-threshold' and `gc-cons-percentage' to huge numbers.

  This should be used in situations where garbage collection
  happens a lot, such as during Emacs' init or when using the
  minibuffer completion on really big lists."

    (setq gc-cons-threshold actuator-engorged-gc-cons-threshold)
    (setq gc-cons-percentage actuator-engorged-gc-cons-percentage))

  (actuator-engorge-gc)
  (add-hook 'after-init-hook #'actuator-restore-gc)
#+end_src

** GPG ID

#+begin_src emacs-lisp
  (defvar actuator-gpg-id "CB7647349621074630BED0DADDCB697E089A4F88"
    "My GPG ID.")
#+end_src

** Csetq
https://lists.gnu.org/archive/html/help-gnu-emacs/2015-12/msg00097.html

#+begin_src emacs-lisp
  (defmacro csetq (variable value)
    "Macro to set the VALUE of VARIABLE, possibly a custom user option."
    `(funcall (or (get ',variable 'custom-set)
                  (and (plist-member (symbol-plist ',variable)
                                     'standard-value)
                       'set-default)
                  'set)
              ',variable ,value))
#+end_src

** Package Init

#+begin_src emacs-lisp
  (require 'package)

  (csetq package-archives
         '(("melpa"  . "https://melpa.org/packages/")
           ("gnu"    . "https://elpa.gnu.org/packages/")
           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (csetq package-archive-priorities '(("melpa"  . 10)
                                      ("gnu"    . 30)
                                      ("nongnu" . 20)))
  (setq package-selected-packages nil)
#+end_src

#+results:

#+begin_src emacs-lisp
  (defvar actuator-var-directory (expand-file-name (convert-standard-filename "var/") user-emacs-directory))
  (make-directory actuator-var-directory t)
#+end_src

** Exec path from shell
#+begin_src emacs-lisp
  (when (file-attributes "/usr/local/bin" t)
    (add-to-list 'exec-path "/usr/local/bin"))

  (when (file-attributes "/usr/local/sbin" t)
    (add-to-list 'exec-path "/usr/local/sbin"))

  (when (file-attributes "/usr/local/bin" t)
    (add-to-list 'exec-path "/usr/local/bin"))

  (when (file-attributes "/Library/TeX/texbin" t)
    (add-to-list 'exec-path "/Library/TeX/texbin"))

  (when (file-attributes "/opt/local/bin" t)
    (add-to-list 'exec-path "/opt/local/bin"))

  (when (file-attributes "/opt/local/sbin" t)
    (add-to-list 'exec-path "/opt/local/sbin"))
#+end_src

* Stable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :comments link :noweb yes
:END:
** Custom-set Variables

#+begin_src emacs-lisp
  (csetq custom-file (expand-file-name "custom-settings.el" actuator-var-directory))
  (defun actuator-load-custom-file ()
    "The most basic of functions to load the custom file."

    (load custom-file 'noerror))
  (add-hook 'after-init-hook #'actuator-load-custom-file)
#+end_src

** Read only
#+begin_src emacs-lisp
  (csetq view-read-only t)
#+end_src

** Ctrl-Z
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Just one space
#+begin_src emacs-lisp
  (defun actuator-just-one-space ()
    "Insert just one space, killing all other whitespace."

    (interactive)
    (just-one-space -1))

  (global-set-key (kbd "M-/") #'actuator-just-one-space)
#+end_src

** Unfill paragraph
#+begin_src emacs-lisp
  (defun actuator-unfill-paragraph ()
    "Does the opposite of filling a paragraph.

  This technically causes it to wrap only at a really huge number.
  It should be safe in most instances, but Emacs does have some
  issues with really long lines, so if you run this on a really,
  really huge paragraph, you might be sorry."

    (interactive)
    (let ((fill-column most-positive-fixnum))
      (fill-paragraph)))

  (global-set-key (kbd "C-M-q") #'actuator-unfill-paragraph)
#+end_src

** Savehist
#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'savehist-mode)
  (csetq history-length 10000)
  (csetq history-delete-duplicates t)
  (csetq message-log-max 10000)
  (csetq savehist-save-minibuffer-history t)
  (csetq savehist-additional-variables
         '(buffer-name-history
           command-history
           compile-history
           extended-command-history
           file-name-history
           file-name-history
           global-mark-ring
           Info-history-list
           kill-ring
           kmacro-ring
           last-kbd-macro
           minibuffer-history
           org-link--history
           org-read-date-history
           org-refile-history
           org-table-formula-history
           org-tags-history
           regexp-search-ring
           register-alist
           savehist-minibuffer-history-variables
           shell-command-history
           mark-ring))
  (csetq savehist-file (expand-file-name "savehist.el" actuator-var-directory))
#+end_src

#+results:
: /home/g/.config/emacs/var/savehist.el

1. Quick fixes:

   ;; the issue could be that save-interprogram-paste-before-kill means a large clipboard which becomes part of savehist:

https://github.com/syl20bnr/spacemacs/issues/9409

#+begin_src emacs-lisp
  (put 'minibuffer-history 'history-length 100)
  (put 'kill-ring 'history-length 25)
  (setq save-interprogram-paste-before-kill nil)
#+end_src

https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist

2. Unpropertize kill ring on quit
#+begin_src emacs-lisp
  (defun actuator-unpropertize-kill-ring ()
    "Remove properties from items in the kill ring.

  Text stored in the kill ring is kept propertized---that is, faces
  that apply to it should be correctly applied on yank. That can
  vastly increase the size of the kill ring, causing it to go from
  no big deal to a rather substantial issue if you try to persist
  the kill ring. This removes properties, which makes the kill ring
  lossy in a fashion, but means that saving huge numbers of kill
  ring items to disk should no longer cause weird issues."

    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook #'actuator-unpropertize-kill-ring)
  (add-hook 'after-save-hook #'actuator-unpropertize-kill-ring)
#+end_src

3. Savehist on kill only

#+begin_src emacs-lisp
  (eval-when-compile ;;(defvar savehist-autosave-interval)
                     (declare-function savehist-save "savehist"))
  (csetq savehist-autosave-interval nil)
  (unless noninteractive
    (add-hook 'kill-emacs-hook #'savehist-save))
  (add-hook 'after-save-hook #'savehist-save)
#+end_src
** Autorevert
#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'global-auto-revert-mode 1)
  (csetq auto-revert-verbose t)
  (csetq auto-revert-avoid-polling t)
  (csetq buffer-auto-revert-by-notification t)
  ;;(csetq auto-revert-interval 15)
  (csetq revert-without-query nil)
  (csetq auto-revert-check-vc-info nil)
#+end_src

** Server

#+begin_src emacs-lisp
  (defun actuator-start-server-if-not-running ()
    "If Emacs' server is not running, start it.

  This allows Emacs client to function. This does not check to see
  if the current Emacs instance is running the server, only that at
  least one server is running. I don't care about running multiple
  servers, so that's fine."

    (require 'server)
    (eval-when-compile (declare-function server-running-p "server"))
    (unless (server-running-p) (server-start)))
  (run-with-idle-timer 2 nil #'actuator-start-server-if-not-running)
#+end_src

** Undo
- [[https://b3n.sdf-eu.org/undo-in-emacs.html][Undo in Emacs]]

  #+begin_src emacs-lisp
    (global-set-key (kbd "s-z") #'undo-only)
    (global-set-key (kbd "s-Z") #'undo-redo)
  #+end_src

** Cancel GC in Minibuffer
#+begin_src emacs-lisp
  (when (and (fboundp 'actuator-engorge-gc)
             (fboundp 'actuator-restore-gc))
    (add-hook 'minibuffer-setup-hook #'actuator-engorge-gc)
    (add-hook 'minibuffer-exit-hook  #'actuator-restore-gc))

#+end_src

** Minibuffer Resize
#+begin_src emacs-lisp
  (defun actuator-minibuffer-normalize-face-height ()
    "Reset faces in the minibuffer to be the default height."

    (set (make-local-variable 'face-remapping-alist)
         '((org-document-title :height 1.0))))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-normalize-face-height)
#+end_src
** Hippie Expand

#+begin_src emacs-lisp
  (csetq dabbrev-case-distinction t)
  (csetq dabbrev-case-fold-search t)
  (csetq dabbrev-case-replace t)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'hippie-exp
    (require 'dabbrev))
#+end_src

#+begin_src emacs-lisp
  (csetq hippie-expand-verbose t)
  (csetq hippie-expand-try-functions-list
         '(try-expand-all-abbrevs
           try-expand-dabbrev-visible
           try-expand-dabbrev
           try-expand-dabbrev-all-buffers
           try-expand-dabbrev-from-kill
           try-complete-file-name-partially
           try-complete-file-name
           try-expand-line
           try-complete-lisp-symbol-partially
           try-complete-lisp-symbol
           try-expand-list
           try-expand-list-all-buffers
           try-expand-whole-kill
           try-expand-line-all-buffers))
  (global-set-key (kbd "<M-SPC>") #'hippie-expand)
#+end_src

- try-complete-lisp-symbol has a lot of completions
- try-expand-line-all-buffers is very slow

#+begin_src emacs-lisp
  (defun actuator-hippie-unexpand ()
    "Remove an expansion without having to loop around."
    (interactive)
    (hippie-expand 0))
  (global-set-key (kbd "M-S-SPC") #'actuator-hippie-unexpand)
#+end_src

** Open org-links in new window or not
#+begin_src emacs-lisp
  (csetq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                (vm-imap . vm-visit-imap-folder-other-frame)
                                (gnus . org-gnus-no-new-news)
                                (file . find-file)))
#+end_src
* Unstable
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el :noweb yes
:END:
** NSM
#+begin_src emacs-lisp
  (csetq nsm-settings-file (expand-file-name "nsm.el" actuator-var-directory))
#+end_src
** Diary
#+begin_src emacs-lisp
  (csetq diary-file (expand-file-name "diary" org-directory))
  (csetq calendar-date-style 'iso)
#+end_src

** Capture Templates
#+begin_src emacs-lisp
  (eval-when-compile (defvar org-capture-templates))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("l" "Todo (with link)" entry
                   (file "inbox.org")
                   "* TODO %?\n%U\n%i\n%a\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("t" "Todo (no link)" entry
                   (file "inbox.org")
                   "* TODO %?\n%U\n%i\n")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (defun actuator-date-stamp ()
      (format-time-string "%A %-e %B %Y %H:%M %Z"))
    (add-to-list 'org-capture-templates
                 `("j" "Journal" entry
                   (file+olp+datetree "journal.org")
                   "* %(actuator-date-stamp)\n%?")))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("C" "Contact" entry (file "contacts.org")
                   "* %^{Name}
  :PROPERTIES:
  :EMAIL: %^{Email}
  :PHONE: %^{Phone}
  :END:
  %U
  \n%?")))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (csetq calendar-latitude [51 02 north])
  (csetq calendar-longitude [114 03 west])
#+end_src

#+begin_src emacs-lisp
  (defun actuator-calendar-mode-line-entry (command echo &optional key string)
    "Return a propertized string for `calendar-mode-line-format'.
  COMMAND is a command to run, ECHO is the help-echo text, KEY
  is COMMAND's keybinding, STRING describes the binding.

  This version of this function does not display the keybinding for
  the COMMAND, which was unneeded and hard to theme correctly."
    (propertize (or key
                    (capitalize (format "%s" string)))
                'help-echo (format "mouse-1: %s" echo)
                'mouse-face 'mode-line-highlight
                'keymap (make-mode-line-mouse-map 'mouse-1 command)))

  (advice-add 'calendar-mode-line-entry :override #'actuator-calendar-mode-line-entry)
#+end_src

#+begin_src emacs-lisp
  (csetq calendar-date-style 'iso)
  (csetq calendar-offset -1)
#+end_src

** Unfiled Settings
:PROPERTIES:
:ID:       3659786E-6B2D-4AF8-8901-434068730FC7
:END:

#+begin_src emacs-lisp
  (fringe-mode 12)
#+end_src

#+begin_src emacs-lisp
  (csetq bookmark-version-control t)
  (csetq bookmark-save-flag 1)
#+end_src

#+begin_src emacs-lisp
  (setq window-combination-resize t)
  (setq undo-limit (* 80 1024 1024))
#+end_src

From  emacs-plus:

#+begin_src emacs-lisp
  ;; C source code
  (setq frame-resize-pixelwise t)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-=") #'count-words)
#+end_src

#+begin_src emacs-lisp
  (global-unset-key (kbd "<C-wheel-down>"))
  (global-unset-key (kbd "<C-wheel-up>"))
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'capitalize-dwim)
  (global-set-key (kbd "M-l") 'downcase-dwim)
  (global-set-key (kbd "M-u") 'upcase-dwim)
#+end_src

#+begin_src emacs-lisp
  (setq help-window-select t) ; Select help window by default
  (setq jit-lock-defer-time 0) ; Delay font-lock if its slow
  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "M-o") #'other-window)

  (run-with-idle-timer 2 nil #'delete-selection-mode t)
  (run-with-idle-timer 2 nil #'midnight-mode t)
  (setq sentence-end-double-space nil)

  (defun actuator-prefer-utf-8 ()
    "Set all the UTF-8 defaults."
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-language-environment "UTF-8"))

  (run-with-idle-timer 1 nil #'actuator-prefer-utf-8)

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (setq indent-tabs-mode nil) ; Never insert tabs with tab key
  (setq require-final-newline t)

  (run-with-idle-timer 2 nil #'save-place-mode 1)
  (csetq save-place-file (expand-file-name "save-place.el" actuator-var-directory))

  (setq backup-by-copying    t)
  (setq delete-old-versions  t)
  (setq kept-new-versions    50)
  (setq kept-old-versions    5) ; I don't know what an old version is
  (setq version-control      t)
  (setq vc-make-backup-files t)

  (setq uniquify-buffer-name-style 'forward) ; Like a path, the way that makes sense
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-strip-common-suffix nil)

  (setq find-file-visit-truename nil) ; Don't resolve symlinks
  (setq confirm-kill-emacs 'y-or-n-p)

  (run-with-idle-timer 1 nil #'abbrev-mode 1)
  (setq save-abbrevs 'silently)

  (setq enable-recursive-minibuffers t)
  (run-with-idle-timer 2 nil #'minibuffer-depth-indicate-mode t)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-defun  'disabled nil)

  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p)

  (defun display-startup-echo-area-message ()
    "Remove the GNU info from the minibuffer on startup.

  All you have to do is create a function with this name.  It's
  called automatically."

    (message ""))

  (csetq default-frame-alist
        '((ns-transparent-titlebar . t)
          (ns-appearance           . 'light)))

  (csetq completion-styles
        '(fuzzy
          basic
          partial-completion
          substring
          initials
          emacs22))

  (defun actuator-font-exists-p (font)
    "Return non-nil if FONT is loaded."
    (member font (font-family-list)))

  (defun actuator-frame-init (&optional _frame)
    "Initialize per-frame variables.

  These variables need to be set every time a frame is created."

    (when (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
    (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    (when (fboundp 'tooltip-mode)    (tooltip-mode    -1))
    (when (and (not (display-graphic-p))
               (fboundp 'menu-bar-mode))
      (menu-bar-mode   -1))
    (when (actuator-font-exists-p "SF Mono")
      (set-frame-font "SF Mono-12" nil t)))

  (add-hook 'after-make-frame-functions 'actuator-frame-init)

  (unless noninteractive
    (actuator-frame-init))
#+end_src
** Misc

#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'recentf-mode 1)
  (eval-when-compile (declare-function recentf-open-files "recentf")
                     (declare-function recentf-cleanup "recentf"))
  (global-set-key (kbd "C-x C-r") #'recentf-open-files)
  (csetq recentf-max-saved-items 1000)
  (csetq recentf-save-file (expand-file-name "recentf.el" actuator-var-directory))
  (csetq recentf-exclude `(,actuator-var-directory
                           "^/\\(?:ssh\\|su\\|sudo\\)?:"
                           "/var/folders/"))
  (add-hook 'midnight-mode-hook #'recentf-cleanup)
#+end_src

** Plain Font

#+begin_src emacs-lisp
  (when (file-exists-p (expand-file-name "actuator-theme.el" user-emacs-directory))
    (csetq custom-safe-themes t)
    (csetq custom-enabled-themes '(actuator)))

  (blink-cursor-mode -1)
  (setq cursor-type 'box)
  (setq scroll-conservatively 101) ; Move the buffer just enough to display point, but no more
  (setq scroll-margin 0)
  (setq mouse-wheel-scroll-amount '(1))

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

#+begin_src emacs-lisp
  (unless 'window-system
    (require 'mouse)
    (require 'xt-mouse)
    ;;(csetq mouse-sel-mode t)
    (xterm-mouse-mode t)
    (defun track-mouse (_e)))
#+end_src

#+begin_src emacs-lisp
  (when (executable-find "mdfind")
    (csetq locate-command "mdfind"))
#+end_src

#+begin_src emacs-lisp
  (run-with-idle-timer 2 nil #'show-paren-mode 1)
  (run-with-idle-timer 2 nil #'electric-pair-mode 1)
  (csetq blink-matching-paren nil)
  (csetq show-paren-delay 0)
  (csetq show-paren-style 'mixed)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook #'actuator-startup-profile)

  (defun actuator-startup-profile ()
    "Display the startup time and garbage collections in the minibuffer."

    (message "Emacs ready in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
#+end_src
** Eliminate frame title
#+begin_src emacs-lisp
  (csetq ns-use-proxy-icon nil)
  (csetq frame-title-format
         '((:eval (when (buffer-file-name)
                    (abbreviate-file-name default-directory)))
           "%b"))
#+end_src

** Help
#+begin_src emacs-lisp
  ;;(global-set-key (kbd "C-h x k") #'describe-key)
#+end_src

** Delete by Moving to Trash
[[elfeed:christiantietze.de#tag:christiantietze.de,2021-06-21:/posts/2021/06/emacs-trash-file-macos/][Trash File from Emacs with Put-Back Enabled on macOS]]

#+begin_src emacs-lisp
  (eval-when-compile
    (when (executable-find "trash")
      (csetq delete-by-moving-to-trash t)
      (csetq trash-directory "~/.Trash")
      (defun system-move-file-to-trash (path)
        "Moves file at PATH to the Trash according to `move-file-to-trash' convention.

  On macOS relies on the command-line utility 'trash' to be installed."
        (shell-command (concat "trash -vF \"" path "\""
                               "| sed -e 's/^/Trashed: /'")
                       nil ;; Name of output buffer
                       "*Trash Error Buffer*"))))
#+end_src

** Copy sentence
#+begin_src emacs-lisp
  (defun actuator-copy-sentence ()
    "Save the entire sentence to the kill ring."
    (interactive)
    (save-excursion
      (backward-sentence)
      (mark-end-of-sentence nil)
      (copy-region-as-kill nil nil t)))
#+end_src

** Org
The first item "+TODO=\"PROJECT\"" tells Org to look for a TODO keyword called "PROJECT" to match projects. The escaped quotes are needed.

#+begin_src emacs-lisp
  (csetq org-stuck-projects
        '("+TODO=\"PROJECT\"" ("NEXT" "TODO") nil ""))
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "org/" actuator-var-directory) t)

  (make-directory (expand-file-name "org-publish/"
                                    actuator-var-directory)
                  t)
  (csetq org-clock-persist-file (expand-file-name "org/org-clock-persist.el"
                                                  actuator-var-directory))
  (csetq org-publish-timestamp-directory (expand-file-name "org-publish/"
                                                           actuator-var-directory))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (eval-when-compile (defvar org-agenda-custom-commands))
    (add-to-list 'org-agenda-custom-commands
                 '("u" "Unscheduled TODOs"
                   ((todo ""
                          ((org-agenda-overriding-header "\nUnscheduled TODO")
                           (org-agenda-skip-function
                            '(org-agenda-skip-entry-if
                              'timestamp 'todo '("WAITING" "SOMEDAY" "PROJECT" "DONE" "CANCELLED")))
                           (org-agenda-sorting-strategy '((todo tsia-up alpha-up))))))))
    (add-to-list 'org-agenda-custom-commands
                 '("d" "Daily View"
                   ((agenda "")
                    (todo "NEXT"))
                   ((org-agenda-span 'day)))))
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-text-search-extra-files '(agenda-archives))
  (csetq org-agenda-files (expand-file-name "agenda" org-directory))
  (csetq org-use-fast-todo-selection 'expert)
  (csetq org-todo-keywords
         '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "SOMEDAY(s)" "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)")))
  (csetq org-agenda-window-setup 'other-frame)
  (csetq org-agenda-restore-windows-after-quit t)
  (csetq org-agenda-span 'week) ;; fortnight
  ;;(csetq org-agenda-include-diary t)
  (csetq org-agenda-todo-list-sublevels t)
  (csetq org-agenda-sticky t)
  (csetq org-agenda-dim-blocked-tasks t)
  (csetq org-list-indent-offset 1)
  (csetq org-use-speed-commands t)
  (csetq org-footnote-auto-adjust t)
  (csetq org-footnote-define-inline t)
  (csetq org-footnote-auto-label t)
  (csetq org-confirm-babel-evaluate nil)
  (csetq org-babel-results-keyword "results")
  (csetq org-edit-src-persistent-message nil)
  (csetq org-src-tab-acts-natively t)
  (csetq org-src-window-setup 'current-window)
  (csetq org-src-ask-before-returning-to-edit-buffer nil)
  (csetq org-src-fontify-natively t)
  (csetq org-tags-exclude-from-inheritance '("crypt"))
  (csetq org-crypt-key actuator-gpg-id)
  (csetq org-habit-show-habits-only-for-today t)
  (csetq org-capture-bookmark t)
  (csetq org-hide-macro-markers t)
  (csetq org-reverse-note-order t)
  (csetq org-agenda-insert-diary-extract-time t)
  (csetq org-agenda-start-with-follow-mode t)
  (csetq org-agenda-follow-indirect t)
  (csetq org-agenda-skip-scheduled-if-done t)
  (csetq org-agenda-skip-deadline-if-done t)
  (csetq org-agenda-skip-additional-timestamps-same-entry t)
  (csetq org-agenda-skip-timestamp-if-done nil)
  (csetq org-agenda-time-leading-zero t)
  (csetq org-agenda-current-time-string
         "Now - - - - - - -")
  (csetq org-agenda-time-grid
         '((daily today require-timed)
           (0600 0700 0800 0900 1000 1100
                 1200 1300 1400 1500 1600
                 1700 1800 1900 2000 2100)
           " ....." "-----------------"))
  (csetq org-agenda-diary-file "~/org/diary.org")
#+end_src

#+begin_src emacs-lisp
  (csetq org-refile-cache t)
  (csetq org-refile-allow-creating-parent-nodes 'confirm)
  (csetq org-outline-path-complete-in-steps nil)
  (csetq org-refile-use-outline-path 'file)
  ;;(csetq org-refile-targets '((org-agenda-files :maxlevel . 3)))

    (defun actuator-org-refile-candidates ()
      "Collect all the org-mode files in the org-directory.

  Currently it only collects files that start with a lowercase
  letter, which is probably the wrong way to go about it, but I
  don't have any files that start with uppercase or numbers (this
  is on purpose) and that eliminates adding any autosave, backup or
  other weird files that might temporarily get caught by the
  refiler that I don't want. This would be an easy fix, but I'm not
  doing it."
      (directory-files org-directory t "^[a-z].*\\.org$"))

    (csetq org-refile-targets '((actuator-org-refile-candidates :maxlevel . 2)))

    ;; (defun actuator-inbuffer-org-refile ()
    ;;   "Refile within the current buffer only."
    ;;   (interactive)
    ;;   (let ((org-refile-targets '((nil :maxlevel . 3)))
    ;;         (org-refile-cache nil))
    ;;     (org-refile)))

  (defun actuator-rebuild-org-refile-cache ()
    "Rebuilds the refile cache so things refile quickly.

  Might be a touch mean to slower laptops, so not sure it should
  run very often."
    (require 'org-refile)
    (eval-when-compile
      (declare-function org-refile-cache-clear "org-refile")
      (declare-function org-refile-get-targets "org-refile"))
    (org-refile-cache-clear)
    (org-refile-get-targets))

  (run-with-idle-timer 300 t #'actuator-rebuild-org-refile-cache)
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-start-with-log-mode '(closed clock))
  (csetq org-agenda-start-with-clockreport-mode t)
  (csetq org-agenda-columns-add-appointments-to-effort-sum t)
  (csetq org-global-properties
         '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
  ;;(add-to-list 'org-global-properties '("Effort_ALL". "0 0:10 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")) ;; WHY NO WORK
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-todo-ignore-scheduled 'future)
  (csetq org-agenda-todo-ignore-deadlines 'far)
  (csetq org-agenda-todo-ignore-timestamp 'future)
  (csetq org-agenda-todo-ignore-with-date nil)
  (csetq org-agenda-tags-todo-honor-ignore-options t)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-src-line-wrap-setup ()
    "Set truncate-lines-mode in org-source-editing buffers."
    (setq-local truncate-lines t))
  (add-hook 'org-src-mode-hook #'actuator-org-src-line-wrap-setup)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (csetq org-agenda-follow-mode t))
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    ;;(defvar org-modules)
    (defvar org-default-properties)
    (declare-function org-indent-mode "org-indent"))

  (with-eval-after-load 'org
    (add-to-list 'org-default-properties "DIR")
    (add-to-list 'org-default-properties "header-args")
    (require 'org-habit)
    (require 'org-checklist)
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (org-indent-mode 1)
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (calc       . t)
                                   (shell      . t))))
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org)
  (add-to-list 'package-selected-packages 'org-contrib)
  (csetq org-babel-default-header-args '((:mkdirp   . "yes")
                                         (:comments . "link")
                                         (:session  . "none")
                                         (:results  . "replace")
                                         (:exports  . "code")
                                         (:cache    . "no")
                                         (:noweb    . "no")
                                         (:hlines   . "no")
                                         (:tangle   . "no")))

  (defun actuator-update-all-dynamic-blocks ()
    "Update all dynamic blocks in an Org-mode document.

  Should only be called when in Org-mode, but also it shouldn't
  cause an error if not."

    (require 'org)
    (require 'org-table)
    (eval-when-compile
      (declare-function org-dblock-update "org")
      (declare-function org-table-map-tables "org-table"))
    (org-table-map-tables 'org-table-align 'quietly)
    (org-dblock-update 1))

  (defun actuator-org-mode-setup ()
    "Set basic defaults in Org-mode that aren't variables."

    (electric-indent-local-mode -1)
    (visual-line-mode)
    (add-hook 'before-save-hook
              'actuator-update-all-dynamic-blocks nil
              'make-it-local))

  (add-hook 'org-mode-hook #'actuator-org-mode-setup)

  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (eval-when-compile (declare-function org-store-link "ol"))
  (global-set-key (kbd "C-c l") #'org-store-link)

  (csetq org-startup-folded 'content)
  (csetq org-ellipsis " →")
  (csetq org-startup-align-all-tables t)
  (csetq org-startup-shrink-all-tables t)
  (csetq org-startup-with-inline-images t)
  (csetq org-startup-indented t)
  (csetq org-hide-leading-stars t)
  (csetq org-pretty-entities-include-sub-superscripts t)
  (csetq org-hide-emphasis-markers t)
  (csetq org-image-actual-width 300)
  (csetq org-fontify-done-headline t)
  (csetq org-structure-template-alist
         '(("e" . "src emacs-lisp")
           ("s" . "src shell")))
  (csetq org-log-done 'time)
  (csetq org-log-into-drawer t)
  (csetq org-log-reschedule 'time)
  (csetq org-log-refile 'time)
  (csetq org-log-redeadline 'time)
  (csetq org-closed-keep-when-no-todo t)
  (csetq org-enforce-todo-dependencies t)
  (csetq org-enforce-todo-checkbox-dependencies nil)
  (csetq org-complete-tags-always-offer-all-agenda-tags nil)
  (csetq org-clone-delete-id t)
  (csetq org-tags-column -60)
  (csetq org-catch-invisible-edits 'show-and-error)
  (csetq org-insert-heading-respect-content t)
  (csetq org-ctrl-k-protect-subtree t)
  (csetq org-M-RET-may-split-line '((default . nil)))
  (csetq org-special-ctrl-k t)
  (csetq org-special-ctrl-a/e t)
  ;; (csetq org-blank-before-new-entry '((heading         . t)
  ;;                               (plain-list-item . auto)))
  (csetq org-use-property-inheritance t)
  (csetq org-modules nil)
#+end_src

#+begin_src emacs-lisp
  (csetq org-tag-persistent-alist '(("noexport")
                                    ("ignore")
                                    ("crypt")
                                    (:startgrouptag . nil)
                                    ("@"      . nil)
                                    (:grouptags     . nil)
                                    ("@email"       . ?m)
                                    ("@phone"       . ?p)
                                    ("@computer"    . ?c)
                                    ("@errand"      . ?e)
                                    ("@download"    . ?d)
                                    ("@exercise"    . ?x)
                                    ("@home"        . ?h)
                                    ("@research"    . ?r)
                                    (:endgroup      . nil)
                                    (:endgrouptag   . nil)))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.

  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."

    (setq-local header-line-format nil))
  (add-hook 'org-capture-mode-hook #'actuator-org-capture-turn-off-header-line)
#+end_src

** Holidays
:PROPERTIES:
:CATEGORY: Holiday
:END:
#+begin_src emacs-lisp
  (csetq calendar-chinese-all-holidays-flag nil)
  (csetq calendar-hebrew-all-holidays-flag nil)
  (csetq calendar-christian-all-holidays-flag nil)
  (csetq calendar-islamic-all-holidays-flag nil)
  (csetq calendar-bahai-all-holidays-flag nil)
  (csetq holiday-bahai-holidays nil)
#+end_src

#+begin_src emacs-lisp
  (defvar holiday-american-holidays
    '((holiday-float 1 1 3  "Martin Luther King Day (USA)")
      (holiday-float 2 1 3  "President's Day (USA)")
      (holiday-float 5 1 -1 "Memorial Day (USA)")
      (holiday-fixed 6 14   "Flag Day (USA)")
      (holiday-fixed 7 4    "Independence Day (USA)")
      (holiday-float 10 1 2 "Columbus Day (USA)")
      (holiday-fixed 11 11  "Veteran's Day (USA)")
      (holiday-float 11 4 4 "Thanksgiving (USA)"))
    "General holidays for the United States.
  See the documentation for `calendar-holidays' for details.")

  (csetq holiday-general-holidays
         '((holiday-fixed 1 1   "New Year's Day")
           (holiday-fixed 2 2   "Groundhog Day")
           (holiday-fixed 2 14  "Valentine's Day")
           (holiday-fixed 3 17  "St. Patrick's Day")
           (holiday-fixed 4 1   "April Fools' Day")
           (holiday-float 5 0 2 "Mother's Day")
           (holiday-float 6 0 3 "Father's Day")
           (holiday-fixed 10 31 "Halloween")))

  (defvar holiday-canada-holidays
    '((holiday-fixed 7 1       "Canada Day")
      (holiday-float 9 1 1     "Labour Day")
      (holiday-float 5 1 -1    "Victoria Day" 24)
      (holiday-float 6 1 0     "August Civic Holiday")
      (holiday-fixed 9 30      "Orange Shirt Day")
      (holiday-float 10 1 2    "Thanksgiving")
      (holiday-fixed 11 11     "Remembrance Day")
      (holiday-fixed 12 26     "Boxing Day")
      (holiday-float 2 1 3     "Family Day"))
    "General holidays for Canada.
  See the documentation for `calendar-holidays' for details.")

  (csetq holiday-other-holidays (append holiday-canada-holidays
                                        holiday-american-holidays))
#+end_src
** Keyboard Macros

- ~C-x (~ Start defining a keyboard macro.
- ~C-x )~ End a keyboard macro.
- ~C-u C-x (~ Replay macro and append keys to the definition.
- ~C-u C-u C-x (~ Don’t replay but append keys.
- ~C-x C-k r~ Run the last keyboard macro on each line that begins in the region.
- ~C-x C-k n~ Name the most recent macro.
- ~C-x C-k b~ Bind the most recent macro to a keybinding (for the session only).
- ~M-x insert-kbd-macro~ Insert the most recent macro into the buffer as lisp. That’s how you save it.
- ~C-x C-k 0-9~ and ~C-x C-k A-Z~ are reserved for keyboard macros

*** Make Checklist
#+begin_src emacs-lisp
  (fset 'actuator-make-checklist
        (kmacro-lambda-form [?\C-a ?- ?  ?\[ ?  ?\] ?  ?\C-n] 0 "%d"))
  ;;(global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src

*** References
- [[http://ergoemacs.org/emacs/emacs_macro_example.html][Emacs: Keyboard Macro ]][2020-06-08 Mon]
- [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki: Keyboard Macros]] [2020-06-08 Mon]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html][Basic Keyboard Macro - GNU Emacs Manual]] [2020-06-08 Mon]

** Web
*** URL
#+begin_src emacs-lisp
  (make-directory (expand-file-name "url/" actuator-var-directory) t)
  (make-directory (expand-file-name "url/" actuator-var-directory) t)
  (csetq url-cache-directory (expand-file-name "url/" actuator-var-directory))
  (csetq url-configuration-directory (expand-file-name "url/" actuator-var-directory))
#+end_src

*** Set up browsing handlers                      :ignore:
Customizing the browse-url handlers is remarkably powerful. I don't use Emacs as a web browser much, but I do use a lot of links in Org-mode documents. If something isn't set here, it opens the URL in the default manner, which in my case is Safari ([[https://developer.apple.com/safari/technology-preview/][Technology Preview]]).

#+begin_src emacs-lisp
  (csetq browse-url-handlers '(("wikipedia"   . eww )
                               ("youtu\\.?be" . actuator-browse-video)
                               ("twitch"      . actuator-browse-video)))
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "eww" actuator-var-directory) t)
  (csetq eww-bookmarks-directory (expand-file-name "eww" actuator-var-directory))
#+end_src

#+begin_src emacs-lisp
  (csetq eww-history-limit 1000)
#+end_src

*** Handle video urls                             :ignore:
I want video links to be opened in MPV. This helps my battery life as well as my personal life because I don't have to visit YouTube. This requires [[https://mpv.io][MPV]] to be installed, which is best installed via [[http://brew.sh][Brew]] on macOS. I've tried to use [[https://nixos.org/download.html][Nix]], but it doesn't work well.

#+begin_src emacs-lisp
  (defun actuator-browse-video (url &rest _args)
    "Browse URL with a dedicated video player.
  Avoids opening a browser window."
    (call-process "mpv" nil 0 nil url))
#+end_src

*** Simple HTML renderer                          :ignore:
SHR is used to render all sorts of basic HTML in Emacs, including Elfeed posts and Nov.el books. Normally it wraps at the page width, but that can be adjusted.

#+begin_src emacs-lisp
  (csetq shr-width 75)
  (csetq shr-use-colors nil)
  (csetq shr-use-fonts nil)
  (csetq shr-image-animate nil)
  (csetq shr-cookie-policy nil)
#+end_src

*** Open links in background                      :ignore:

#+begin_src emacs-lisp
  (csetq browse-url-browser-function 'eww)
  (csetq browse-url-secondary-browser-function 'browse-url-generic)
#+end_src

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (csetq browse-url-secondary-browser-function 'browse-url-firefox))
#+end_src

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq browse-url-browser-function 'eww)
    (setq browse-url-secondary-browser-function 'browse-url-generic)
    (setq browse-url-generic-program "open")
    (setq browse-url-generic-args '("--background")))
#+end_src

#+begin_src emacs-lisp
  (make-directory "~/Sync/.sync/eww/" t)
  (csetq eww-bookmarks-directory "~/Sync/.sync/eww/")
#+end_src

** iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (csetq ibuffer-expert t)
#+end_src

#+begin_src emacs-lisp
  (csetq ibuffer-show-empty-filter-groups nil)
  (csetq ibuffer-saved-filter-groups
         '(("default"
            ("Misc"      (name . "^\\*.*\\*$"))
            ("Magit"     (name . "magit"))
            ("Src"       (name . "\*Org Src"))
            ("Dired"     (mode . dired-mode))
            ("My Org"    (directory . "/Users/g/org"))
            ("Config"    (or
                          (directory . "/Users/g/.config")
                          (directory . "/usr/local/share/emacs"))))))
#+end_src

#+begin_src emacs-lisp
    (defun actuator-ibuffer-setup ()
      "Set up ibuffer defaults that require running functions.

    This should be run as in a hook that is called when ibuffer-mode is run."

      (require 'ibuf-ext)
      (eval-when-compile
        (declare-function ibuffer-switch-to-saved-filter-groups "ibuf-ext")
        (declare-function ibuffer-auto-mode "ibuf-ext"))
      (ibuffer-switch-to-saved-filter-groups "default")
      (ibuffer-auto-mode 1)
      (toggle-truncate-lines +1))
    (add-hook 'ibuffer-mode-hook #'actuator-ibuffer-setup)
#+end_src

** Encryption (EPG)
#+begin_src emacs-lisp
  (csetq epg-pinentry-mode 'loopback)
#+end_src
** Dired
#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (require 'dired-x)
    (require 'dired-aux)
    (require 'wdired))
  (eval-when-compile (declare-function dired-omit-mode "dired-x"))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "image-dired/gallery/" actuator-var-directory) t)
  (csetq image-dired-dir (expand-file-name "image-dired/" actuator-var-directory))
  (csetq image-dired-db-file (expand-file-name "image-dired/image-dired.db" actuator-var-directory))
  (csetq image-dired-gallery (expand-file-name "image-dired/gallery/" actuator-var-directory))
  (csetq image-dired-temp-image-file (expand-file-name "image-dired/temp-image" actuator-var-directory))
  (csetq image-dired-temp-rotate-image-file (expand-file-name "image-dired/temp-rotate-image" actuator-var-directory))
#+end_src

#+begin_src emacs-lisp
  (csetq image-dired-thumb-size 100)
  (csetq image-dired-thumb-width 300)
  (csetq image-dired-thumb-height 300)
  (csetq image-dired-thumb-margin 5)
  (csetq image-dired-thumb-relief 0)
  (csetq image-dired-thumbs-per-row 4)
  (with-eval-after-load 'image-dired
    (eval-when-compile
      (defvar image-dired-thumbnail-mode-map)
      (declare-function image-dired-thumbnail-display-external "image-dired"))
    (define-key image-dired-thumbnail-mode-map
      (kbd "<return>") #'image-dired-thumbnail-display-external))

  (cond ((executable-find "open")
         (csetq image-dired-external-viewer "open"))
        ((executable-find "xdg-open")
         (csetq image-dired-external-viewer "xdg-open")))
#+end_src


#+begin_src emacs-lisp
  (csetq dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`.DS_Store\\'\\|^.git$")

  (with-eval-after-load 'savehist
    (eval-when-compile (defvar savehist-additional-variables))
    (add-to-list 'savehist-additional-variables 'dired-shell-command-history))

  (eval-when-compile (declare-function dired-directory-changed-p "dired"))
  (csetq dired-auto-revert-buffer #'dired-directory-changed-p)
  (csetq dired-dwim-target t)
  (csetq wdired-create-parent-directories t)
  (csetq wdired-allow-to-change-permissions t)
  (csetq dired-recursive-copies 'always)
  (csetq dired-isearch-filenames 'dwim)
  (csetq dired-create-destination-dirs 'ask)
  (csetq dired-vc-rename-file t)

  (add-hook 'dired-mode-hook #'hl-line-mode)

  (csetq ls-lisp-use-insert-directory-program t)
  (csetq ls-lisp-ignore-case t)
  (csetq ls-lisp-use-string-collate nil)
  (csetq ls-lisp-verbosity '(links uid))
  (csetq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
  (csetq ls-lisp-use-localized-time-format nil)

  (cond ((or (eq system-type 'gnu/linux) (executable-find "gls"))
         (when (executable-find "gls") (csetq insert-directory-program "gls"))
         (csetq dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso --dired"))
        ((eq system-type 'darwin)
         (csetq dired-listing-switches "-alhFo")))

  ;; a :: include files beginning with dots
  ;; A :: include files beginning with dots except . and ..
  ;; G :: skip group names
  ;; v :: natural sort
  ;; l :: display as list
  ;; h :: human-readable filenames
  ;; F :: display a slash after directories
  ;; S :: sort by size
#+end_src

** Attach
:PROPERTIES:
:ID:       7542A761-77AB-4B42-B25E-33BFE7A45FE9
:END:

#+begin_src emacs-lisp
  (csetq org-attach-store-link-p t)
  (csetq org-attach-expert nil)
  (csetq org-attach-dir-relative t)
  (csetq org-attach-preferred-new-method 'id)
  (csetq org-attach-method 'mv)
  (csetq org-attach-auto-tag "attach")
  (csetq org-attach-archive-delete 'query)
#+end_src
** Clock

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-clock-persistence-insinuate))
  (csetq org-clock-into-drawer "CLOCK")
  ;;(csetq org-clock-persist t)
  (csetq org-clock-out-remove-zero-time-clocks t)
  (csetq org-clock-mode-line-total 'auto)
#+end_src

** World Time
#+begin_src emacs-lisp
  (csetq world-clock-list '(("America/New_York" "New York")
                            ("Europe/London"    "London")
                            ("Australia/Sydney" "Sydney")
                            ("America/Edmonton" "Calgary")
                            ("America/St_Johns" "St. John's")))
#+end_src

** Ediff
#+begin_src emacs-lisp
  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  (csetq ediff-split-window-function 'split-window-horizontally)
  (csetq ediff-diff-options "-w") ;;-w ignores whitespace changes
  (csetq ediff-forward-word-function 'forward-char) ;;testing
  (csetq ediff-highlight-all-diffs t)
  (csetq ediff-keep-variants nil)

  (defun actuator-ediff-save-window-configuration ()
    "Save current window layout so ediff can control the frame."
    (window-configuration-to-register :ediff))

  (defun actuator-ediff-restore-window-configuration ()
    "Restore the window layout after diffing."
    (jump-to-register :ediff))

  (defun actuator-ediff-org-reveal-around-difference (&rest _)
    "Ensure that the relevant Org-mode diff is visible."
    (eval-when-compile
      (defvar ediff-buffer-A)
      (defvar ediff-buffer-B)
      (defvar ediff-buffer-C)
      (declare-function ediff-with-current-buffer "ediff-init" (buffer &rest body)))
    (require 'ediff)

    (dolist (buf (list ediff-buffer-A ediff-buffer-B ediff-buffer-C))
      (ediff-with-current-buffer buf
        (when (derived-mode-p 'org-mode)
          (org-reveal t)))))

  ;; (defun actuator-ediff-copy-both-to-C ()
  ;;   "Copy both the A and B diffs to the output C."

  ;;   (interactive)
  ;;   (defvar ediff-current-difference)
  ;;   (defvar ediff-control-buffer)
  ;;   (require 'ediff-util)
  ;;   (declare-function ediff-copy-diff "ediff-util")
  ;;   (declare-function ediff-get-region-contents "ediff-util")

  ;;   (ediff-copy-diff ediff-current-difference nil 'C nil
  ;;                    (concat
  ;;                     (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
  ;;                     (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

  ;; (defun actuator-add-d-to-ediff-mode-map ()
  ;;   "Mode map to work with ediff-copy-both-to-C"

  ;;   (defun ediff-mode-map)
  ;;   (define-key ediff-mode-map "d" 'actuator-ediff-copy-both-to-C))
  ;; (add-hook 'ediff-keymap-setup-hook 'actuator-add-d-to-ediff-mode-map)

  ;; (advice-add 'ediff-next-difference :after
  ;;             #'actuator-ediff-org-reveal-around-difference)
  ;; (advice-add 'ediff-previous-difference :after
  ;;             #'actuator-ediff-org-reveal-around-difference)

  (add-hook 'ediff-startup-hook #'actuator-ediff-save-window-configuration)
  ;;(add-hook 'ediff-startup-hook #'actuator-ediff-org-reveal-around-difference)
  (add-hook 'ediff-quit-hook #'actuator-ediff-restore-window-configuration)

  (defun actuator-org-mode-show-all ()
    "Show the entire buffer when in an org buffer.

  Sometimes it's better to show the entire buffer, for example when
  trying to run ediff on an Org-mode file. That way context for the diff is shown."
    (eval-when-compile (declare-function outline-show-all "outline"))
    (when (derived-mode-p 'org-mode)
      (require 'outline)
      (outline-show-all)))

  (add-hook 'ediff-prepare-buffer-hook #'actuator-org-mode-show-all)


#+end_src

[[https://www.reddit.com/r/emacs/comments/dxzi96/have_some_code_make_ediffing_folded_org_files/][Have some code: make ediffing folded org files better : emacs]]

** Mu4e

[[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail + mu4e]]

#+begin_src emacs-lisp
  (eval-when-compile
    (when (and (eq system-type 'darwin) (file-exists-p "/usr/local/bin/fish"))
      (csetq shell-file-name "/usr/local/bin/fish")))
#+end_src

#+begin_src emacs-lisp
  (csetq mu4e-maildir-shortcuts
         '((:maildir "/Archive" :key ?a)
           (:maildir "/Inbox"   :key ?i)))
  (csetq mail-user-agent 'mu4e-user-agent)
  (csetq mu4e-hide-index-messages t)
  (csetq mu4e-update-interval (* 60 15))
  (csetq mu4e-index-update-in-background nil)
  (csetq mu4e-index-update-error-warning t)
  (csetq mu4e-refile-folder "/Archive")
  (csetq mu4e-sent-folder   "/Sent Items")
  (csetq mu4e-drafts-folder "/Drafts")
  (csetq mu4e-trash-folder  "/Trash")
  (csetq mu4e-attachment-dir "~/Downloads/")
  (csetq mu4e-view-show-images t)
  (csetq mu4e-view-show-addresses t)
  (csetq mu4e-change-filenames-when-moving t)
  (csetq mu4e-headers-skip-duplicates t)
  (csetq mu4e-compose-format-flowed t)
  (csetq mu4e-date-format "%y-%m-%d")
  (csetq mu4e-headers-date-format "%y-%m-%d")
  ;;(csetq mu4e-get-mail-command (concat (executable-find "mbsync") " --all"))
  (csetq mu4e-get-mail-command "mbsync --all")
  (csetq mu4e-mu-binary (executable-find "mu"))
  ;;(csetq mu4e-mu-binary "mu")
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (csetq message-cite-reply-position 'traditional)
#+end_src

** Message

#+begin_src emacs-lisp
  (csetq send-mail-function 'sendmail-send-it)
  (csetq message-send-mail-function send-mail-function)
#+end_src

#+begin_src emacs-lisp
  (csetq user-full-name "Geoff MacIntosh")
  (csetq user-mail-address "geoff@mac.into.sh")
  (csetq mail-signature "Geoff.")
  (csetq message-signature mail-signature)
#+end_src

#+begin_src emacs-lisp
#+end_src

#+begin_src emacs-lisp
  (csetq mm-encrypt-option 'guided)
  (csetq mm-sign-option 'guided)
  (csetq mml-secure-openpgp-encrypt-to-self t)
  (csetq mml-secure-openpgp-sign-with-sender t)
  (csetq mml-secure-smime-encrypt-to-self t)
  (csetq mml-secure-smime-sign-with-sender t)
  (csetq mail-user-agent 'message-user-agent)
  ;;(setq mail-header-separator (purecopy "*****"))
  (csetq compose-mail-user-agent-warnings nil)
  (csetq message-mail-user-agent nil)
  ;;(setq message-citation-line-format "On %Y-%m-%d, %R %z, %f wrote:\n")
  (csetq message-confirm-send nil)
  (csetq message-kill-buffer-on-exit t)
  (csetq message-wide-reply-confirm-recipients t)
  (with-eval-after-load 'mm-bodies
    (eval-when-compile (defvar mm-body-charset-encoding-alist))
    (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . base64)))

  (with-eval-after-load 'message
    (eval-when-compile (declare-function message-sort-headers "message"))
    (add-hook 'message-setup-hook #'message-sort-headers))
#+end_src

** Native Compile
#+begin_src emacs-lisp
  (when (boundp 'comp-async-report-warnings-errors)
    (setq comp-async-report-warnings-errors nil))
#+end_src

#+begin_src emacs-lisp
  (csetq package-native-compile t)
#+end_src

** Package Quickstart

#+begin_src emacs-lisp :tangle no
  (unless noninteractive
    (add-hook 'kill-emacs-hook #'package-quickstart-refresh))
#+end_src

** Byte compile init

#+begin_src emacs-lisp
  (defun actuator-byte-recompile-init ()
    "Byte compiles the init files.

  Will recompile if the files if they are already compiled, create
  new compilations if they aren't, and native compile if that's an
  option. Does not work well with early-init.el, but that's not a
  file that should benefit from byte compilation that much anyway."

    (interactive)
    (let ((init  user-init-file))
      (if (fboundp 'native-compile)
          (progn
            (native-compile init)
            (when package-quickstart-file
              (native-compile package-quickstart-file)))
        (progn
          (byte-recompile-file init nil 0)
          (when package-quickstart-file
            (byte-recompile-file package-quickstart-file nil 0))))))
  (unless noninteractive
    (add-hook 'kill-emacs-hook #'actuator-byte-recompile-init))
#+end_src

** Allow different places in the same buffer
#+begin_src emacs-lisp
  (csetq switch-to-buffer-preserve-window-point t)
#+end_src

#+results:
: t

** ERC
#+begin_src emacs-lisp
  (defun actuator-twitch-start-irc ()
    "Connect to Twitch IRC channel.

  I really want to use irc for something for some reason."

    (interactive)
    (erc-tls :server "irc.chat.twitch.tv"
             :port 6697
             :nick (auth-source-pass-get "user" "twitch.tv")
             :password (auth-source-pass-get "oauth" "twitch.tv")))
#+end_src

** Doc View
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))

  (defvar actuator-doc-view-bookmark-push nil
    "Overwrite or add a new bookmark for doc-view files.

  When set to nil, the bookmark entry will be overwritten, so that
  only one bookmark per buffer will be written. Set to non-nil to
  push a new bookmark each time the buffer is killed. Only the
  latest bookmark will be used automatically to jump to the
  location. I guess you could use this to keep a record of how much
  you read each time, but honestly that seems absurd to me.")

  (defun actuator-doc-view-open-handler ()
    "Jump to bookmark location if available when opening a document."

    (require 'bookmark)
    (eval-when-compile (declare-function bookmark-maybe-load-default-file "bookmark"))
    (bookmark-maybe-load-default-file)
    (bookmark-jump (buffer-name)))

  (defun actuator-doc-view-save-handler ()
    "Create a bookmark when killing a doc-view buffer.

  See the variable `actuator-doc-view-bookmark-push' to customize
  the behaviour of this function."

    (when (eq major-mode 'doc-view-mode)
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (bookmark-set (buffer-name) actuator-doc-view-bookmark-push)))

  (add-hook 'doc-view-mode-hook #'actuator-doc-view-open-handler)
  (add-hook 'kill-buffer-hook #'actuator-doc-view-save-handler)

  (csetq doc-view-resolution 150)
#+end_src
https://gist.github.com/spacebat/5500966

** Sync stuff
#+begin_src emacs-lisp
  (csetq elfeed-db-directory   "~/Sync/.sync/elfeed")
  (csetq abbrev-file-name      (expand-file-name "etc/abbrev.el" org-directory))
#+end_src

** Bookmarks
#+begin_src emacs-lisp
  (csetq bookmark-fontify nil)
  (csetq bookmark-default-file "~/Sync/.sync/bookmark.el")
#+end_src

** Org Randomnote
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-randomnote)
#+end_src

** Auth Source / EPA / EPG

#+begin_src emacs-lisp
  (csetq epa-file-encrypt-to actuator-gpg-id)
  (csetq auth-sources '(password-store))
  (csetq password-cache-expiry 600)
#+end_src

** Fish Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'fish-mode)
#+end_src
** Ledger Mode
#+begin_src emacs-lisp
  (when (executable-find "ledger")
    (csetq ledger-default-date-format "%Y-%m-%d")
    (add-to-list 'package-selected-packages 'ledger-mode))
#+end_src
** Markdown Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'markdown-mode)
#+end_src

** YAML Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'yaml-mode)
#+end_src
** TOML Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'toml-mode)
#+end_src
** Lua Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'lua-mode)
#+end_src
** Gitignore Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'gitignore-mode)
#+end_src
** Gitconfig Mode
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'gitconfig-mode)
#+end_src
** Ripgrep
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'rg)
#+end_src
** Nov.el
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (csetq nov-save-place-file (expand-file-name "nov-save-place.el" actuator-var-directory))
  (csetq nov-text-width 75)
  (defun actuator-novel-setup ()
    "Set up some defaults for nov.el that make it nicer to read in."

    (face-remap-add-relative 'variable-pitch :family "Georgia"
                             :height 1.3)
    (setq-local line-spacing 1.2))
  (add-hook 'nov-mode-hook 'actuator-novel-setup)
#+end_src

** Project
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'project)
  (csetq project-list-file (expand-file-name "project-list.el" actuator-var-directory))
#+end_src

** Org Link Minor Mode

#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'org-link-minor-mode)

  (when (package-installed-p 'org-link-minor-mode)
    (add-hook 'emacs-lisp-mode #'org-link-minor-mode))
#+end_src

** HTMLize
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'htmlize)
#+end_src

** Eldoc

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'eldoc)

  (csetq eldoc-echo-area-use-multiline-p t)
  (csetq eldoc-idle-delay 0)

  (with-eval-after-load 'eldoc
    (eval-when-compile (declare-function elisp-get-fnsym-args-string@docstring "elisp-mode"))
    ;;(require 'elisp-mode)
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src

** Forge
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'forge)
  (make-directory (expand-file-name "forge/post/" actuator-var-directory) t)
  (csetq forge-database-file (expand-file-name "forge/forge.db" actuator-var-directory))
  (csetq forge-post-directory (expand-file-name "forge/post/" actuator-var-directory))
#+end_src

#+results:

** Transient
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'transient)
  (make-directory (expand-file-name "transient" actuator-var-directory) t)
  (csetq transient-history-file (expand-file-name "transient/history.el" actuator-var-directory))
  (csetq transient-levels-file (expand-file-name "transient/levels.el" actuator-var-directory))
  (csetq transient-values-file (expand-file-name "transient/values.el" actuator-var-directory))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'counsel)
  (add-to-list 'package-selected-packages 'ivy)
  (add-to-list 'package-selected-packages 'swiper)

  (csetq counsel-find-file-ignore-regexp "\\`\\.")

  (when (package-installed-p 'counsel)
    (eval-when-compile
      (declare-function counsel-buffer-or-recentf "counsel")
      (declare-function counsel-find-file "counsel")
      (declare-function counsel-M-x "counsel")
      (declare-function counsel-describe-function "counsel")
      (declare-function counsel-describe-variable "counsel")
      (declare-function counsel-search "counsel")
      (declare-function counsel-yank-pop "counsel"))
    (global-set-key (kbd "C-x C-r") #'counsel-buffer-or-recentf)
    (global-set-key (kbd "C-x C-f") #'counsel-find-file)
    (global-set-key (kbd "M-x")     #'counsel-M-x)
    (global-set-key (kbd "C-h f")   #'counsel-describe-function)
    (global-set-key (kbd "C-h v")   #'counsel-describe-variable)
    (global-set-key (kbd "C-c s")   #'counsel-search)
    (global-set-key (kbd "M-y")     #'counsel-yank-pop))
#+end_src

#+begin_src emacs-lisp
  (when (package-installed-p 'ivy)
    (eval-when-compile (declare-function ivy-switch-buffer "ivy"))
    (global-set-key (kbd "C-x b") #'ivy-switch-buffer))

  (with-eval-after-load 'ivy
    (eval-when-compile
      (defvar ivy-minibuffer-map)
      (declare-function counsel-mode "counsel")
      (declare-function ivy-mode "ivy")
      (declare-function ivy-immediate-done "ivy")
      (declare-function ivy-alt-done "ivy")
      (declare-function ivy-next-line "ivy"))
    (counsel-mode 1)
    (ivy-mode 1)
    (define-key ivy-minibuffer-map (kbd "<C-return>") #'ivy-immediate-done)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "M-y") #'ivy-next-line))

  (csetq ivy-use-ignore-default 'always)
  (csetq ivy-ignore-buffers '("*elfeed-log*"
                              "*straight-process*"
                              "*Completions*"
                              "*Compile-Log*"))
  (csetq ivy-use-virtual-buffers nil)
  (csetq ivy-count-format "(%d/%d) ")
  (csetq ivy-extra-directories nil)
#+end_src


#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'prescient)
  (add-to-list 'package-selected-packages 'ivy-prescient)

  (with-eval-after-load 'ivy
    (when (package-installed-p 'ivy-prescient)
      (eval-when-compile
        (declare-function ivy-prescient-mode "ivy-prescient")
        (declare-function prescient-persist-mode "prescient"))
      (ivy-prescient-mode 1)
      (prescient-persist-mode 1)))

  (csetq prescient-save-file (expand-file-name "prescient.el" actuator-var-directory))
  (csetq prescient-history-length 10000)
  (csetq prescient-aggressive-file-save t)
#+end_src
** Cliplink

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-cliplink)
  (eval-when-compile (declare-function org-cliplink "org-cliplink"))
  (global-set-key (kbd "C-x p i") #'org-cliplink)
  (with-eval-after-load 'org-capture
    (eval-when-compile (defvar org-capture-templates))
    (add-to-list 'org-capture-templates
                 '("b" "Bookmark" entry
                   (file "bookmarks.org")
                   "* %(org-cliplink-capture) %^g\n%U\n\n%?"
                   :prepend
                   :empty-lines 1
                   :kill-buffer)))
#+end_src

** Anki
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'anki-editor)
#+end_src

** Auctex
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'auctex)
  (csetq TeX-engine 'luatex)
  (csetq TeX-source-correlate-start-server t)
#+end_src
** Magit
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'magit)

  (eval-when-compile
    (declare-function magit-status "magit-status")
    (declare-function magit-list-repositories "magit-repos"))
  (global-set-key (kbd "C-c g") #'magit-status)
  (global-set-key (kbd "C-x g") #'magit-status)
  (global-set-key (kbd "C-x G") #'magit-list-repositories)

  (csetq magit-diff-refine-hunk 'all)
  (csetq magit-save-repository-buffers 'dontask)
  (csetq magit-section-initial-visibility-alist
         '((untracked . show)
           (unstaged  . show)
           (unpushed  . show)
           (upstream  . show)))
  ;;(csetq magit-auto-revert-mode t)
  (csetq magit-push-always-verify nil)
  (csetq magit-no-confirm '(stage-all-changes
                            unstage-all-changes))
  (csetq magit-status-initial-section nil)
  (csetq magit-repository-directories
         `((,org-directory . 0)
           ("~/env.d"      . 0)
           ("~/Projects"   . 1)))
#+end_src

#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    "Fullscreen the magit status window."
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
#+end_src


#+begin_src emacs-lisp
  (defun magit-quit-session ()
    "Restore the previous window configuration and kill the magit buffer."
    (interactive)
    (kill-buffer)
    (auto-revert-mode -1)
    (jump-to-register :magit-fullscreen))
#+end_src

** Org download

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-download)

  ;;(global-set-key (kbd "C-M-y") #'org-download-screenshot)

  ;;(require 'org-download)


  (csetq org-download-method 'directory)
  (csetq org-download-image-dir nil)
  ;;(csetq org-download-annotate-function #'actuator-org-dl-annotate)
  ;;(csetq org-download-timestamp "")
  (csetq org-download-screenshot-method "screencapture -i %s")
  (csetq org-download-heading-lvl nil)
  (csetq org-download-timestamp "%Y%m%d-%H%M%S-")
  ;;(csetq org-download-screenshot-method "/usr/local/bin/pngpaste %s")

#+end_src

** Web Mode

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'web-mode)

  (when (package-installed-p 'web-mode)
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'"   . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'"  . web-mode)))

  (csetq web-mode-markup-indent-offset 2)
  (csetq web-mode-code-indent-offset 2)
  (csetq web-mode-css-indent-offset 2)
#+end_src
** Elfeed
#+begin_src emacs-lisp
  (csetq elfeed-search-filter "@1-week-ago +unread ")
  (csetq elfeed-enclosure-default-dir "~/Download/")
  (csetq elfeed-search-title-max-width 120)
  (global-set-key (kbd "C-x w") #'actuator-elfeed-load-db-and-open)
  (with-eval-after-load 'elfeed
    (eval-when-compile (defvar elfeed-search-mode-map))
    (define-key elfeed-search-mode-map (kbd "q") #'actuator-elfeed-save-db-and-bury)
    (define-key elfeed-search-mode-map (kbd "R") #'actuator-elfeed-mark-all-as-read))
#+end_src

Filters are kind of the star of Elfeed. I mostly use them to remove items that I don't want to see (or already see in other contexts---podcasts for example). I think it's all pretty straightforward. The only thing of note that I do is adding a debug tag to each hook that hides things. That way I can tell which filter it is that's causing problems when I make a stupid typo and suddenly a specific filter matches all entries.

#+begin_src emacs-lisp
  (with-eval-after-load 'elfeed
    (eval-when-compile (declare-function elfeed-make-tagger "elfeed"))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :entry-title "sponsor\\|revenue\\|financial"
                                  :add '(junk debug1)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "2 weeks ago"
                                  :add 'debug2
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "MacSparky"
                                  :entry-title "focused\\|Mac Power Users\\|jazz\\|automators\\|podcast"
                                  :add '(junk debug3)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "Six Colors"
                                  :entry-title "podcast\\|macworld\\|member"
                                  :add '(junk debug4)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "Longreads"
                                  :entry-title "longreads"
                                  :add '(junk debug5)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "youtube\\.com"
                                  :add '(video youtube)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "twitchrss"
                                  :add '(video twitch)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "kijiji\\.ca"
                                  :add '(shop kijiji)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "reddit"
                                  :add 'reddit))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "ikea"
                                  :entry-title "Q\\:"
                                  :remove 'unread
                                  :add '(junk debug6)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "cestlaz"
                                  :entry-title '(not "emacs")
                                  :add '(junk debug7)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "reddit\\.com"
                                  :entry-title '(not "F1")
                                  :add '(junk debug8)
                                  :remove 'unread)))
#+end_src

You don't need to do anything special to load Elfeed. You can set up a keybinding that runs ~(elfeed)~ and it should work. I took this function from [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][Pragmatic Emacs]] when I first set up Elfeed a few years ago because I wanted to keep the database in sync between multiple computers. These helper functions ensure that the database is loaded and saved at the appropriate moments. I'm not sure there's any benefit to these if you only use them on one computer (as I do now) but I can't find any downsides either, so they stay.

#+begin_src emacs-lisp
  (defun actuator-elfeed-load-db-and-open ()
    "Wrapper to load the elfeed database from disk before opening.

  Taken from Pragmatic Emacs."
    (interactive)
    (eval-when-compile
      (declare-function elfeed "elfeed")
      (declare-function elfeed-db-load "elfeed-db")
      (declare-function elfeed-search-update "elfeed-search")
      (declare-function elfeed-update "elfeed"))
    (window-configuration-to-register :elfeed-fullscreen)
    (delete-other-windows)
    (elfeed)
    (elfeed-db-load)
    (elfeed-search-update 1)
    (elfeed-update))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-elfeed-save-db-and-bury ()
    "Save the Elfeed database to disk before burying buffer.

  Taken from Pragmatic Emacs."
    (interactive)
    (eval-when-compile
     (declare-function elfeed-db-save "elfeed-db")
     (declare-function elfeed-db-gc "elfeed-db")
     (declare-function elfeed-db-compact "elfeed-db")
     (declare-function elfeed-db-unload "elfeed-db"))
    (elfeed-db-save)
    (elfeed-db-gc)
    ;;(elfeed-db-compact)
    (elfeed-db-unload)
    (quit-window)
    (garbage-collect)
    (jump-to-register :elfeed-fullscreen))
#+end_src

#+begin_src emacs-lisp
    (defun actuator-elfeed-mark-all-as-read ()
      "Mark all feeds in search as read.

  Taken from Mike Zamansky"
      (interactive)
      (eval-when-compile (declare-function elfeed-search-untag-all-unread "elfeed-search"))
      (with-no-warnings (mark-whole-buffer))
      (elfeed-search-untag-all-unread))
#+end_src

Changing the colours of an entry is neat, but not that useful. I mostly have this set up in order to learn how to do it, and as a vague novelty.

#+begin_src emacs-lisp
  (with-eval-after-load 'elfeed
    (eval-when-compile (defvar elfeed-search-face-alist))
    (add-to-list 'elfeed-search-face-alist
                 '(video actuator-elfeed-video-face))
    (add-to-list 'elfeed-search-face-alist
                 '(image actuator-elfeed-image-face))
    (add-to-list 'elfeed-search-face-alist
                 '(comic actuator-elfeed-comic-face)))
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-video-face
    `((t . (:background "gray90" :foreground "black")))
    "Face for elfeed video entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-image-face
    `((t . (:background "gray90" :foreground "black")))
    "Face for elfeed image entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-comic-face
    `((t . (:background "gray90" :foreground "black")))
    "Face for elfeed comic entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (csetq elfeed-search-header-function #'actuator-elfeed-search--header)

  (defun actuator-elfeed-search--header ()
    "Computes the string to be used as the Elfeed header.

  This version doesn't show 0/0:0 items because I have no idea what
  those numbers are supposed to represent."
    (eval-when-compile
      (defvar elfeed-search-filter-active)
      (defvar elfeed-search-filter)
      (declare-function elfeed-queue-count-active "elfeed")
      (declare-function elfeed-queue-count-total "elfeed")
      (declare-function elfeed-search--intro-header "elfeed-search")
      (declare-function elfeed-db-last-update "elfeed-db"))
    (cond
     ((zerop (elfeed-db-last-update))
      (elfeed-search--intro-header))
     ((> (elfeed-queue-count-total) 0)
      (let ((total (elfeed-queue-count-total))
            (in-process (elfeed-queue-count-active)))
        (format "%d jobs pending, %d active..."
                (- total in-process) in-process)))
     ((let* ((db-time (seconds-to-time (elfeed-db-last-update)))
             (update (format-time-string "%Y-%m-%d %H:%M" db-time))
             (unread (actuator-elfeed-search--count-unread)))
        (format "Updated %s %s%s"
                (propertize update 'face 'elfeed-search-last-update-face)
                (propertize unread 'face 'elfeed-search-unread-count-face)
                (cond
                 (elfeed-search-filter-active "")
                 ((string-match-p "[^ ]" elfeed-search-filter)
                  (concat ", " (propertize elfeed-search-filter
                                           'face 'elfeed-search-filter-face)))
                 ("")))))))

  (defun actuator-elfeed-search--count-unread ()
    "Count the number of entries and feeds being currently displayed."
    (eval-when-compile
      (defvar elfeed-search-filter-active)
      (defvar elfeed-search-filter-overflowing)
      (defvar elfeed-search-entries)
      (declare-function elfeed-tagged-p "elfeed-db")
      (declare-function elfeed-feed-url "elfeed-db")
      (declare-function elfeed-entry-feed "elfeed-db"))
    (if (and elfeed-search-filter-active elfeed-search-filter-overflowing)
        "?/?:?"
      (cl-loop with feeds = (make-hash-table :test 'equal)
               for entry in elfeed-search-entries
               for feed = (elfeed-entry-feed entry)
               for url = (elfeed-feed-url feed)
               count entry into entry-count
               count (elfeed-tagged-p 'unread entry) into unread-count
               do (puthash url t feeds)
               finally
               (cl-return
                (format "%d unread %d total %d feeds"
                        unread-count entry-count
                        (hash-table-count feeds))))))
#+end_src

** Org-elfeed
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'elfeed-org)

  (with-eval-after-load 'elfeed
    (eval-when-compile
      (declare-function elfeed-org "elfeed-org"))
      (elfeed-org))

  (csetq rmh-elfeed-org-ignore-tag "disconnected")
  (csetq rmh-elfeed-org-auto-ignore-invalid-feeds nil)
  (csetq rmh-elfeed-org-files `(,(expand-file-name "feeds.org" org-directory)))
#+end_src

** Eshell

#+begin_src emacs-lisp
  (make-directory (expand-file-name "elfeed" actuator-var-directory) t)
  (csetq eshell-directory-name (expand-file-name "elfeed" actuator-var-directory))
  (eval-when-compile (defvar eshell-directory-name))
  (csetq eshell-history-file-name (expand-file-name "history" eshell-directory-name))
#+end_src

#+begin_src emacs-lisp
  (defalias 'eshell/f  'find-file-other-window)
  (defalias 'eshell/ff 'find-file)
  (defalias 'eshell/v  'view-file-other-window)
  (defalias 'eshell/vv 'view-file)

  (csetq eshell-destroy-buffer-when-process-dies t)
  (csetq eshell-banner-message "")
#+end_src

#+begin_src emacs-lisp
  (csetq eshell-history-size 10000)
  (csetq eshell-hist-ignoredups t)
#+end_src

#+begin_src emacs-lisp
  (csetq eshell-cmpl-cycle-completions nil)
  (csetq eshell-cmpl-ignore-case t)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-eshell-smart-shell ()
    "Set up Plan9/Smart shell in eshell."

    (require 'em-smart)
    (eval-when-compile (declare-function eshell-smart-initialize "em-smart"))
    (eshell-smart-initialize))
  (csetq eshell-where-to-jump 'begin)
  (csetq eshell-review-quick-commands nil)
  (csetq eshell-smart-space-goes-to-end t)
  (add-hook 'eshell-mode-hook #'actuator-eshell-smart-shell)
#+end_src

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

#+begin_src emacs-lisp :tangle no
  (defun actuator-eshell-imenu ()
    "Set up eshell-imenu integration"

    (setq-local imenu-generic-expression
                '(("Prompt" "^.*?[#❯]" 1))))
  ;;(add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun actuator-eshell-autocomplete ()
    "Enable tab autocompletion in eshell."

    (define-key eshell-mode-map (kbd "<tab>") #'actuator-eshell-autocomplete))
  (defun actuator-pcomplete-std-complete ()

    (interactive)
    (pcomplete-std-complete))
  ;;(add-hook 'eshell-mode-hook #'actuator-eshell-autocomplete)
#+end_src

#+results:
| actuator-fish-completion | actuator-eshell-autocomplete | actuator-eshell-imenu |

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'pcmpl-args)
  (with-eval-after-load 'eshell
    (require 'pcmpl-args nil t))
#+end_src

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'package-selected-packages 'pcmpl-homebrew)
    (with-eval-after-load 'eshell
      (require 'pcmpl-homebrew nil t)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'fish-completion)

  (csetq fish-completion-fallback-on-bash-p t)

  (defun actuator-set-up-eshell-fish-completion ()
    "arst"
    (when (executable-find "fish")
      (require 'fish-completion nil t)
      (fish-completion-mode)))

  ;;(add-hook 'eshell-mode-hook #'actuator-set-up-eshell-fish-completion)
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-hook 'eshell-expand-input-functions
            #'eshell-expand-history-references)
#+end_src

#+begin_src emacs-lisp
  (defun fish-path (path max-len)
    "Return a potentially trimmed-down version of the directory PATH.
  Replacing parent directories with their initial characters to try
  to get the character length of PATH (sans directory slashes) down
  to MAX-LEN."
    (require 'cl-seq)
    (declare-function cl-reduce "cl-seq")
    (let* ((components (split-string (abbreviate-file-name path) "/"))
           (len (+ (1- (length components))
                   (cl-reduce '+ components :key 'length)))
           (str ""))
      (while (and (> len max-len)
                  (cdr components))
        (setq str (concat str
                          (cond ((= 0 (length (car components))) "/")
                                ((= 1 (length (car components)))
                                 (concat (car components) "/"))
                                (t
                                 (if (string= "."
                                              (string (elt (car components) 0)))
                                     (concat (substring (car components) 0 2)
                                             "/")
                                   (string (elt (car components) 0) ?/)))))
              len (- len (1- (length (car components))))
              components (cdr components)))
      (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-eshell-prompt ()
    "Custom prompt for eshell.

  Designed to be as minimalist as possible, while being moderately useful."

    (require 'eshell)
    (require 'em-dirs)
    (eval-when-compile (declare-function eshell/pwd "em-dirs"))
    (concat
     ;;(user-login-name)
     ;;"@"
     ;;(system-name)
     ;;":"
     (fish-path (eshell/pwd) 20)
     " ❯ "))
  (csetq eshell-prompt-regexp "^.+@.+:.+❯ ")
  (csetq eshell-prompt-function #'actuator-eshell-prompt)
#+end_src

** Mu4e Alert
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'mu4e-alert)

  (defun actuator-set-up-mu4e-alert ()
    "Set up mu4e alerts if both mu4e and mu4e-alert are installed.

  If run with an idle timer such as:
  `(run-with-idle-timer 2 nil #'actuator-set-up-mu4e-alert)'
  it will not hurt the startup time."

    (require 'mu4e-alert nil t)
    (require 'mu4e nil t)
    (eval-when-compile
      (when (and (featurep 'mu4e-alert) (featurep 'mu4e))
        (declare-function mu4e-alert-set-default-style "mu4e-alert")
        (declare-function mu4e-alert-enable-notifications "mu4e-alert")
        (declare-function mu4e-alert-enable-mode-line-display "mu4e-alert")
        (cond ((eq system-type 'gnu/linux)
               (mu4e-alert-set-default-style 'libnotify))
              ((eq system-type 'darwin)
               (mu4e-alert-set-default-style 'osx-notifier)))
        (mu4e-alert-enable-notifications)
        (mu4e-alert-enable-mode-line-display))))

  (run-with-idle-timer 2 nil #'actuator-set-up-mu4e-alert)
#+end_src
** Alert

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'alert)
  (cond ((eq system-type 'gnu/linux)
         (csetq alert-default-style 'libnotify))
        ((eq system-type 'darwin)
         (csetq alert-default-style 'osx-notifier)))
#+end_src
** Systemd
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'systemd)
#+end_src

** Tramp
#+begin_src emacs-lisp
  (make-directory (expand-file-name "tramp/" actuator-var-directory) t)
  (csetq tramp-auto-save-directory (expand-file-name "tramp/auto-save/" actuator-var-directory))
  (csetq tramp-persistency-file-name (expand-file-name "tramp.el" actuator-var-directory))
#+end_src

** Rainbow
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'rainbow-mode)
  (when (package-installed-p 'rainbow-mode)
    (eval-when-compile (declare-function rainbow-mode "rainbow-mode"))
    (run-with-idle-timer 2 nil #'rainbow-mode))
#+end_src
** Modeline

#+begin_src emacs-lisp
  (setq-default mode-line-format
                (list
                 " %e"
                 mode-line-mule-info
                 mode-line-client
                 mode-line-modified
                 " "
                 '(:eval (when (buffer-file-name)
                           (abbreviate-file-name default-directory)))
                 ;;mode-line-buffer-identification
                 (propertize "%b" 'face 'mode-line-buffer-id)
                 " %IB "
                 mode-line-position
                 " "
                 mode-line-misc-info
                 '(:eval (when (featurep 'minions)
                           minions-mode-line-modes))))
#+end_src

*** References
- [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Custom Emacs Modeline]]
** Minions
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'minions)

  (when (package-installed-p 'minions)
    (eval-when-compile (declare-function minions-mode "minions"))
    (run-with-idle-timer 1 nil #'minions-mode))
#+end_src
** Sudoers

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'etc-sudoers-mode)
#+end_src

** VTerm

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'vterm)
  (when (executable-find "fish")
    (csetq vterm-shell "fish"))
#+end_src

** Auto-save
#+begin_src emacs-lisp
  (csetq auto-save-list-file-prefix (expand-file-name "auto-save/"
                                                      actuator-var-directory))
  (csetq auto-save-default t)
#+end_src

#+results:

** Backups
#+begin_src emacs-lisp
  (csetq backup-directory-alist
         `(("." . ,(expand-file-name "backups" actuator-var-directory))))
#+end_src

** Ignore disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function 'ignore)
#+end_src

** MPDel
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'mpdel)
  (require 'mpdel nil t)
  ;; (mpdel-mode)
  (csetq mpdel-prefix-key (kbd "C-z"))
#+end_src

https://gitea.petton.fr/mpdel/mpdel

** Spell check
#+begin_src emacs-lisp
  ;;(csetq ispell-program-name "aspell")
  (csetq ispell-personal-dictionary (expand-file-name "etc/dictionary" org-directory))
  (csetq ispell-silently-savep t)
  (defun actuator-org-reveal-around ()
    "Reveals the area around the point in Org-mode files."

    (when (derived-mode-p 'org-mode)
      (eval-when-compile (declare-function org-reveal "org"))
      (org-reveal t)))
  (add-hook 'ispell-update-post-hook #'actuator-org-reveal-around)
#+end_src

** Remove bidirectional editing to make long lines better
#+begin_src emacs-lisp
  (csetq bidi-paragraph-direction 'left-to-right)
  (csetq bidi-inhibit-bpa t)
#+end_src

** Long lines mode
#+begin_src emacs-lisp
  (run-with-idle-timer 2 nil #'global-so-long-mode 1)
#+end_src

** Package
#+begin_src emacs-lisp
  (csetq package-name-column-width 40)
  (add-hook 'package-menu-mode-hook #'hl-line-mode)
#+end_src

** Proced
#+begin_src emacs-lisp
  (csetq proced-auto-update-flag t)
#+end_src

** Winner
#+begin_src emacs-lisp
  (run-with-idle-timer 2 nil #'winner-mode)
#+end_src

** Flymake
#+begin_src emacs-lisp :tangle no
  (add-hook 'emacs-lisp-mode-hook #'flymake-mode)
#+end_src

#+begin_src emacs-lisp
  (csetq flymake-suppress-zero-counters t)
  (csetq flymake-no-changes-timeout 1)
  (csetq flymake-start-on-save-buffer t)
  (with-eval-after-load 'flymake
    (eval-when-compile
      (defvar flymake-mode-map)
      (declare-function flymake-start "flymake")
      (declare-function flymake-show-diagnostics-buffer "flymake")
      (declare-function flymake-goto-next-error "flymake")
      (declare-function flymake-goto-prev-error "flymake"))
    (define-key flymake-mode-map (kbd "C-c ! s") #'flymake-start)
    (define-key flymake-mode-map (kbd "C-c ! d") #'flymake-show-diagnostics-buffer)
    (define-key flymake-mode-map (kbd "C-c ! n") #'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "C-c ! p") #'flymake-goto-prev-error))
#+end_src

** Display buffer

[[https://emacs.stackexchange.com/questions/48472/how-to-make-m-x-ansi-term-behave-like-m-x-shell-opening-in-new-window/48481#48481][Switch-to-buffer-obey-display-actions]]

#+begin_src emacs-lisp
  (csetq switch-to-buffer-obey-display-actions nil) ;; Currently fucks up badly Investiate this.
  (csetq display-buffer-alist
         '(("\\*\\(Org Lint\\|Backtrace\\|Warnings\\|Compile-Log\\|Messages\\|Completions\\)\\*"
            (display-buffer-in-side-window)
            (side . bottom)
            (window-parameters . ((mode-line-format . none)))
            (window-height . 0.2))
           ("\\*Calendar.*"
            (display-buffer-in-side-window)
            (side . bottom)
            (window-height . shrink-window-if-larger-than-buffer))
           ("^[a-z]+\\.org-[A-Z]+ [a-z, ]+-[0-9]$"
            (display-buffer-in-side-window)
            (side . bottom)
            (window-height . 0.5))))
#+end_src

** Safe local variables
#+begin_src emacs-lisp
  (add-to-list 'safe-local-variable-values
               '(after-save-hook . "org-babel-tangle"))
#+end_src

** Org publish org

#+begin_src emacs-lisp
  (defun actuator-filter-timestamp (trans back _comm)
    "Remove <> around time-stamps."
    (pcase back
      ((or `jekyll `html `md)
       (replace-regexp-in-string "&[lg]t;" "" trans))
      (`latex
       (replace-regexp-in-string "[<>]" "" trans))))

  (with-eval-after-load 'ox
    (eval-when-compile (defvar org-export-filter-timestamp-functions))
    (add-to-list 'org-export-filter-timestamp-functions
                 #'actuator-filter-timestamp))
#+end_src

#+begin_src emacs-lisp
    (defvar actuator-org-html-head
      "<link rel='stylesheet' href='css/site.css' type='text/css'/>")

    (defvar actuator-org-html-preamble
      "<ul>
    <li><a href='/'>Home</a></li>
    </ul>")

    (defvar actuator-org-html-postamble
      "Last updated %C. Built with %c. (%v HTML).")
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load
   'ox-publish
   (eval-when-compile (defvar org-publish-project-alist))
   (setq org-publish-project-alist nil)
   (add-to-list
    'org-publish-project-alist
    `("org-content"
      :base-directory ,org-directory
      :base-extension "org"
      ;;:html-link-home "/"
      ;;:html-link-up nil
      :publishing-directory "~/Desktop/html/"
      :publishing-function org-html-publish-to-html
      :with-author t
      :with-creator nil
      :with-date t
      :with-title t
      :section-numbers nil
      :with-drawers t
      :with-sub-superscript t
      :html-viewport nil
      :recursive nil
      :with-toc nil
      :section-numbers nil
      :with-broken-links mark
      :html-doctype "html5"
      :html-html5-fancy t
      :html-head-extra nil
      :html-head-include-default-style nil
      :html-head-include-scripts nil
      :html-head ,actuator-org-html-head
      :html-preamble ,actuator-org-html-preamble
      :html-postamble ,actuator-org-html-postamble
      :sitemap-title "Sitemap"
      :sitemap-style list
      :sitemap-filename "sitemap.org"
      ;;:sitemap-sort-files anti-chronologically
      :auto-sitemap t
      :makeindex t)))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-export-org ()
    "Build org html."
    (interactive)
    (require 'ox-publish)
    (eval-when-compile (declare-function org-publish "ox-publish"))
    (org-publish "org" nil t))
  (global-set-key (kbd "C-c p") #'actuator-export-org)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-filter-local-links (link backend _info)
    "Filter to convert all the forms of /index.html to /."
    (require 'ox)
    (eval-when-compile (declare-function org-export-derived-backend-p "ox"))
    (if (org-export-derived-backend-p backend 'html)
        (replace-regexp-in-string "/index.html" "/" link)))
  (with-eval-after-load
      'ox
    (eval-when-compile (defvar org-export-filter-link-functions))
    (add-to-list 'org-export-filter-link-functions 'actuator-filter-local-links))
#+end_src

** Insert creation stamp on heading creation
[2021-06-05 Sat 16:24]

#+begin_src emacs-lisp
  (defun actuator-org-insert-heading-timestamp ()
    "Insert a timestamp below a new heading.

  Org counts an inactive timestamp on the start of a line as a
  creation date."
    (eval-when-compile (declare-function org-time-stamp-inactive "org"))
    (save-excursion
      (insert "\n")
      (org-time-stamp-inactive '(16))))

  (add-hook 'org-insert-heading-hook #'actuator-org-insert-heading-timestamp)
#+end_src

** Org-edna
[2021-06-11 Fri 15:44]
#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'org-edna)
#+end_src

** Org agenda sunrise/set
[2021-06-11 Fri 20:18]

#+begin_src emacs-lisp
  (defun diary-sunrise ()
    (let ((dss (diary-sunrise-sunset)))
      (with-temp-buffer
        (insert dss)
        (goto-char (point-min))
        (while (re-search-forward " ([^)]*)" nil t)
          (replace-match "" nil nil))
        (goto-char (point-min))
        (search-forward ",")
        (buffer-substring (point-min) (match-beginning 0)))))

  ;; sunset
  (defun diary-sunset ()
    (let ((dss (diary-sunrise-sunset))
          start end)
      (with-temp-buffer
        (insert dss)
        (goto-char (point-min))
        (while (re-search-forward " ([^)]*)" nil t)
          (replace-match "" nil nil))
        (goto-char (point-min))
        (search-forward ", ")
        (setq start (match-end 0))
        (search-forward " at")
        (setq end (match-beginning 0))
        (goto-char start)
        (capitalize-word 1)
        (buffer-substring start end))))
#+end_src

** Type break
[2021-06-16 Wed 20:22]
#+begin_src emacs-lisp
  (csetq type-break-file-name (expand-file-name "type-break.el" actuator-var-directory))
  (run-with-idle-timer 2 nil #'type-break-mode 1)
#+end_src

** Auto-insert
[2021-06-16 Wed 20:23]
#+begin_src emacs-lisp
  (run-with-idle-timer 2 nil #'auto-insert-mode 1)
#+end_src

** Show tooltips in modeline

#+begin_src emacs-lisp
  (csetq org-return-follows-link t)
  (csetq help-at-pt-display-when-idle t)
  (csetq help-at-pt-timer-delay 0)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-echo-area-tooltips ()
    "Show tooltips in the echo area automatically for current buffer."
    (setq-local help-at-pt-display-when-idle t
                help-at-pt-timer-delay 0)
    (help-at-pt-cancel-timer)
    (help-at-pt-set-timer))

  (add-hook 'org-mode-hook #'actuator-echo-area-tooltips nil t)
#+end_src

** Pulse line

#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
    "Interactive function to pulse the current line."
    (interactive)
    (require 'pulse)
    (pulse-momentary-highlight-one-line (point)))
  (defadvice other-window (after other-window-pulse activate) (pulse-line))
  (defadvice delete-window (after delete-window-pulse activate) (pulse-line))
  (defadvice recenter-top-bottom (after recenter-top-bottom-pulse activate) (pulse-line))
  (csetq pulse-delay .07)
#+end_src

* Footer
#+begin_src emacs-lisp :comments no :tangle ~/.config/emacs/init.el
  (provide 'init)
  ;;; init.el ends here
#+end_src
