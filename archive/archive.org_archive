Archived entries from file /home/g/env.d/linux.org_archive

* 2021

** 2021-05 May

*** 2021-05-28 Friday
**** From linux.org_archive
***** Twitch FFMPEG
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-05-28 Fri 12:04
  :ARCHIVE_FILE: ~/env.d/linux.org_archive
  :ARCHIVE_CATEGORY: linux
  :END:
From [[https://wiki.archlinux.org/index.php/Streaming_to_twitch.tv#Shell_script_method][Streaming to twitch.tv - ArchWiki]]

#+begin_src shell :tangle ~/src/stream-to-twitch :shebang "#!/usr/bin/env sh
  # Usage: stream-to-twitch path/to/key

  set -euo pipefail

  #######################################
  # Stream to Twitch.tv.
  # Globals:
  #   None.
  # Arguments:
  #   Stream key. A string.
  # Returns:
  #   None.
  #######################################
  stream_to_twitch() {
      res_input="2550x1440" # input resolution
      res_output="1280x720" # output resolution
      fps="30" # target FPS
      gop="60" # i-frame interval, should be double of fps
      gop_min="30" # min i-frame interval, should be equal to fps
      probesize="42M" # https://stackoverflow.com/a/57904380
      threads="2" # max 6
      cbr="1000k" # constant bitrate (should be between 1000kâ€“3000k)
      quality="ultrafast" # one of the many FFmpeg presets
      audio_input_speakers="0" # speakers' sink id
      audio_input_mic="default" # microphone's sink id
      audio_rate="44100"
      stream_server="live-yto" # see https://stream.twitch.tv/ingests for list
      stream_key="${1}" # key will be passed as an agument from the command line
      loglevel="warning" # supress unecessary information from printing

      ffmpeg \
          -loglevel "${loglevel}" \
          -f x11grab -s "${res_input}" -r ${fps} -probesize ${probesize} -i :0.0 \
          -f pulse -i "${audio_input_speakers}" \
          -f pulse -i "${audio_input_mic}" \
          -filter_complex "[2]highpass=f=200,lowpass=f=3000[hl]; [1][hl]amix=inputs=2[a]" \
          -map 0:v -map [a] \
          -f flv -ac 2 -ar ${audio_rate} \
          -vcodec libx264 -g ${gop} -keyint_min ${gop_min} -b:v ${cbr} \
          -minrate ${cbr} -maxrate ${cbr} -pix_fmt yuv420p \
          -s ${res_output} -preset "${quality}" -tune film -acodec aac \
          -threads ${threads} -strict normal \
          -bufsize ${cbr} \
          "rtmp://${stream_server}.twitch.tv/app/${stream_key}"
  }

  # Get stream key securely stored with the password manager "pass"
  # and pass the key to the script to start the stream.
  stream_to_twitch "$(pass "${1}")" #twitch.tv-stream-key
#+end_src

 If using PulseAudio, run pactl list sinks short to find your Input Audio stream.
**** From emacs.org_archive
***** Disabled
   :PROPERTIES:
   :header-args: :tangle no
   :ARCHIVE_TIME: 2021-05-28 Fri 12:04
   :ARCHIVE_FILE: ~/env.d/emacs.org_archive
   :ARCHIVE_CATEGORY: emacs
   :END:
****** Completion at point
#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

https://with-emacs.com/posts/tutorials/customize-completion-at-point/

#+begin_src emacs-lisp
  (autoload 'ffap-file-at-point "ffap")
  (defun complete-path-at-point+ ()
    "Return completion data for UNIX path at point."
    (let ((fn (ffap-file-at-point))
          (fap (thing-at-point 'filename)))
      (when (and (or fn (equal "/" fap))
                 (save-excursion
                   (search-backward fap (line-beginning-position) t)))
        (list (match-beginning 0)
              (match-end 0)
              #'completion-file-name-table :exclusive 'no))))

  (add-hook 'completion-at-point-functions
            #'complete-path-at-point+
            'append)
#+end_src

****** Matrix
#+begin_src emacs-lisp
  (use-package matrix-client
    :straight (matrix-client :host github
                             :repo "alphapapa/matrix-client.el"))
#+end_src

****** Smart Tab

#+begin_src emacs-lisp
  (use-package smart-tab
    :disabled t
    ;
    :functions global-smart-tab-mode
    :config
    (global-smart-tab-mode 1)
    :custom
    (smart-tab-using-hippie-expand t)
    (smart-tab-completion-functions-alist nil))
#+end_src

****** Checklist

#+begin_src emacs-lisp :tangle no
  (use-package org-checklist

    :config
    (add-to-list 'org-modules 'org-checklist))
#+end_src

****** Backends
#+begin_src emacs-lisp
  ;;(setq org-export-backends '(html icalendar latex))
#+end_src
****** Publish Project
#+begin_src emacs-lisp
  (setq org-publish-project-alist
        `(("blog-org"
           :base-directory ,org-directory
           :base-extension "blog\\.org"
           :publishing-directory "~/Documents/Projects/mac-into-sh"
           :publishing-function org-md-publish-to-md
           :with-broken-links mark
           )
          ("blog-images"
           :base-directory ,org-directory
           :base-extension "jpg\\|gif\\|png\\|jpeg"
           :publishing-directory "~/Documents/Projects/mac-into-sh/images"
           :recursive t
           :publishing-function org-publish-attachment)
          ("blog" :components ("blog-org" "blog-images"))))
#+end_src
****** Hugo
#+begin_src emacs-lisp
  (use-package ox-hugo

    :custom
    org-hugo-section "posts")
#+end_src

#+begin_src emacs-lisp
  (define-skeleton hugo-header-skeleton
    "Insert the required Hugo information into a file."
    > "#+title: " (setq v1 (skeleton-read "Title: ")) \n
    "#+date: \n"
    "#+hugo_base_dir: ~/Documents/Projects/mac-into-sh/\n"
    "#+export_file_name: index\n"
    "#+hugo_bundle: " (replace-regexp-in-string " " "-" (downcase v1))
    "\n"
    "* " v1 "\n" _ "\n\n"
    "* Metadata                       :noexport:blog:unpublished:")
#+end_src
****** Prodigy
#+begin_src emacs-lisp
  (use-package prodigy

    :config
    (prodigy-define-service
     :name "Hugo"
     :command "hugo"
     :args '("server" "-D")
     :cwd "~/Documents/Projects/mac-into-sh"
     :stop-signal 'sigkill
     :kill-process-buffer-on-stop t))
#+end_src
****** Ignore headlines
#+begin_src emacs-lisp :tangle no
  (use-package ox-extra

    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))
#+end_src

Then tag a headline with ~:ignore:~ to avoid the headline being exported. The content will be though.

*References*
- [[https://emacs.stackexchange.com/questions/38184/org-mode-ignore-heading-when-exporting-to-latex#41685][StackExchange]]
****** Skeleton
You can define a skeleton to expand as an abbrev expansion. Add it to the list via ~M-x edit-abbrevs~ as shown here

#+begin_example
  (c-mode-abbrev-table)
  "example" 0 "" example-skeleton
#+end_example

In this, the abbrev is added to C-mode, it is invoked when you type "example," it runs the skeleton defined ~example-skeleton~ and has been run zero times.

*References*
- [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Skeletons-as-Abbrevs.html][GNU Manual]] [2020-04-26 Sun]

****** Spell check

#+begin_src emacs-lisp
;; comment
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package flyspell

    :custom
    (flyspell-abbrev-p t)
    (flyspell-use-global-abbrev-table-p t)
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    (flyspell-mode 1))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package flyspell-correct-ivy
     :after flyspell
     :bind (:map flyspell-mode-map
           ("C-;" . flyspell-correct-word-generic))
     :custom (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package ispell

    ;;:ensure-system-package hunspell
    :custom
    ;; (when (executable-find "hunspell")
    ;;   (setq-default ispell-program-name "hunspell")
    ;;   (setq ispell-really-hunspell t))
    (ispell-current-personal-dictionary "~/.dict"))
#+end_src

****** Dired subtree

#+begin_src emacs-lisp
  (use-package dired-subtree
    :disabled t
    :config
    :bind (:map dired-mode-map
               ("i" . dired-subtree-cycle)))
#+end_src
****** Dired git info

#+begin_src emacs-lisp
  (use-package dired-git-info
    :disabled t

    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))
#+end_src
****** Diredfl

#+begin_src emacs-lisp
  (use-package diredfl
    :disabled t

    :config
    (diredfl-global-mode 1))
#+end_src
****** Dired Open

#+begin_src emacs-lisp
  (defun actuator-dired-open ()
    "Open the file at point with open."
    (interactive)
    (let* ((files (dired-get-marked-files t current-prefix-arg))
           (nfiles (length files)))
      (when (or (< nfiles 8)
                (y-or-n-p (format "Really open %d files?" nfiles)))
        (dolist (file files) (start-process "open" nil "open" file)))))
  (bind-key "e" #'actuator-dired-open dired-mode-map)
#+end_src

****** Fancy refile

#+begin_src emacs-lisp
  (defmacro actuator-org-make-refile-command (fn-suffix refile-targets)
    "Generate a command to call `org-refile' with modified targets."
    `(defun ,(intern (concat "actuator-org-refile-" (symbol-name fn-suffix))) ()
       ,(format "`org-refile' to %S" refile-targets)
       (interactive)
       (org-refile-cache-clear)
       (let ((org-refile-target-verify-function nil)
             (org-refile-targets ,refile-targets))
         (call-interactively 'org-refile))))
#+end_src

#+begin_src emacs-lisp
  (actuator-org-make-refile-command this-file `((,(buffer-file-name) :maxlevel . 9)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (defhydra actuator-org-refile-hydra (:color blue :hint nil)
    "
_t_his file"
    ("t" actuator-org-refile-this-file))
  (bind-key "C-c r" #'actuator-org-refile-hydra/body org-mode-map)
#+end_src

https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html
****** MRU Clock

#+begin_src emacs-lisp
  (use-package org-mru-clock
    :disabled t

    :bind
    ("C-c C-x i" . org-mru-clock-in)
    ("C-c C-x C-j . org-mru-clock-select-recent-task")
    :custom
    (org-mru-clock-completing-read 'ivy-completing-read))
#+end_src
****** Hydra

#+begin_src emacs-lisp
  (use-package hydra

    :custom
    (hydra-hint-display-type 'lv))
#+end_src

****** Pulse Line
#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(scroll-up-command scroll-down-command
                     recenter-top-bottom other-window))
    (advice-add command :after #'pulse-line))
#+end_src

****** Auto-upgrade
#+begin_src emacs-lisp
    (use-package auto-package-update
      :ensure t
      :demand t
      :config
      (require 'auto-package-update)
      ;;:hook (auto-package-update-before . actuator-backup-emacs-directory)
)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun actuator-backup-emacs-directory ()
    "It does."
    (shell-command "BORG_REPO=~/Backup/emacs borg create --stats --verbose \\
  --compression zstd,22 ::{hostname}-{now} \\
  ~/.config/emacs" "*Package backup log*")
    (shell-command "BORG_REPO=~/Backup/emacs borg prune --stats --keep-last 10 \\
  --save-space" "*Package backup log*"))
#+end_src

****** Git autocommit
#+begin_src emacs-lisp
  (use-package git-auto-commit-mode
    :ensure t)
#+end_src

****** Sunrise/set

#+begin_src emacs-lisp :tangle no
  (require 'solar)
  (setq calendar-location-name "St. John's, NL")

  (defun solar-sunrise-string (date &optional nolocation)
    "String of *local* time of sunrise and daylight on Gregorian DATE."
    (let ((l (solar-sunrise-sunset date)))
      (format
       "%s (%s hours daylight)"
       (if (car l)
       (concat "Sunrise " (apply 'solar-time-string (car l)))
         "no sunrise")
       (nth 2 l)
       )))
  ;; To be called from diary-list-sexp-entries, where DATE is bound.
  ;;;###diary-autoload
  (defun diary-sunrise ()
    "Local time of sunrise as a diary entry.
    Accurate to a few seconds."
    (or (and calendar-latitude calendar-longitude calendar-time-zone)
        (solar-setup))
    (solar-sunrise-string date))

    (defun solar-sunset-string (date &optional nolocation)
    "String of *local* time of sunset and daylight on Gregorian DATE."
    (let ((l (solar-sunrise-sunset date)))
      (format
       "%s (%s hours daylight)"
       (if (cadr l)
       (concat "Sunset " (apply 'solar-time-string (cadr l)))
         "no sunset")
       (nth 2 l)
       )))
  ;; To be called from diary-list-sexp-entries, where DATE is bound.
  ;;;###diary-autoload
  (defun diary-sunset ()
    "Local time of sunset as a diary entry.
    Accurate to a few seconds."
    (or (and calendar-latitude calendar-longitude calendar-time-zone)
        (solar-setup))
    (solar-sunset-string date))
#+end_src

[[https://www.reddit.com/r/orgmode/comments/a1z26t/sunrise_sunset_as_separate_entries_on_agenda_view/][Sunrise Sunset as Separate Entries on Agenda View (SUPPORT) : orgmode]]
[[https://stackoverflow.com/questions/22889036/custom-diary-sunrise-function-not-working-autoload-diary-emacs][elisp - Custom diary-sunrise function not working. `autoload-diary`? (Emacs.)...]]

****** Truncate
#+begin_src emacs-lisp
  (setq truncate-partial-width-windows nil)
  (toggle-truncate-lines 1) ; Don't wrap lines by default
  (add-hook 'text-mode-hook    #'turn-on-visual-line-mode)
  (add-hook 'prog-mode-hook    #'auto-fill-mode)
  (add-hook 'special-mode-hook #'turn-on-visual-line-mode)
#+end_src
****** SMTP Mail

#+begin_src emacs-lisp
  (use-package smtpmail
    :ensure nil
    :custom
    (smtpmail-default-smtp-server "smtp.fastmail.com")
    (smtpmail-smtp-server "smtp.fastmail.com")
    (smtpmail-smtp-service 587))
#+end_src
***** Shortcuts                                 :ignore:
:PROPERTIES:
:header-args: :noweb-ref shortcuts :tangle no :results output silent
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/emacs.org_archive
:ARCHIVE_OLPATH: Unstable/Elfeed
:ARCHIVE_CATEGORY: emacs
:END:
I built a few shortcuts to switch between different tag views that I commonly use. Elfeed has support for Emacs' bookmarks, so I just needed to make bookmarks for the views I wanted. I set up the search how I like it (~s~) then made a bookmark entry (~C-x r m~) called, say ~elfeed-all~. I can call that bookmark from anywhere in Emacs to go to that elfeed view, but I also decided to [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][steal some functions from Pragmatic Emacs]] to make single-letter keybindings in elfeed.

#+begin_src emacs-lisp
  (defun actuator-elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  (defun actuator-elfeed-show-unread ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-unread"))
#+end_src
***** EMMS
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/emacs.org_archive
:ARCHIVE_OLPATH: Unstable
:ARCHIVE_CATEGORY: emacs
:END:
Or could just use mingus?
#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :config
    (require 'emms-player-mpd)
    (require 'emms-setup)
    (emms-minimalistic)
    (setq emms-player-mpd-server-name "localhost")
    (setq emms-player-mpd-server-port "6600")
    (add-to-list 'emms-info-functions 'emms-info-mpd)
    :custom
    (emms-player-list '(emms-player-mpd))
    (emms-source-file-default-directory "~/Music/Music Files"))

  (make-directory (expand-file-name "emms/" actuator-var-directory) t)
  (customize-set-variable 'emms-directory (expand-file-name "emms/" actuator-var-directory))
#+end_src
***** SVG Screenshot
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/emacs.org_archive
:ARCHIVE_OLPATH: Unstable
:ARCHIVE_CATEGORY: emacs
:END:
#+begin_src emacs-lisp :tangle no
  (defun screenshot-svg ()
    "Save a screenshot of the current frame as an SVG image.
  Saves to a temp file and puts the filename in the kill ring."
    (interactive)
    (let* ((filename (make-temp-file "Emacs" nil ".svg"))
           (data (x-export-frames nil 'svg)))
      (with-temp-file filename
        (insert data))
      (kill-new filename)
      (message filename)))
#+end_src
***** Captar
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/emacs.org_archive
:ARCHIVE_OLPATH: Unstable/Org-elfeed
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("e" "Elfeed Feed" entry
                   (file+olp ,(expand-file-name "feeds.org"
                                                org-directory) "Feeds")
                   "* [[%^{Feed URL}][%^{Title}]]\n%(org-time-stamp-inactive)"
                   :immediate-finish
                   :kill-buffer
                   :empty-lines 1)))
#+end_src
***** Changes                                 :noexport:
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/emacs.org_archive
:ARCHIVE_OLPATH: Unstable/Org-elfeed
:ARCHIVE_CATEGORY: emacs
:END:
****** Wednesday May 20, 2020
- Published
***** Split Windows
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/emacs.org_archive
:ARCHIVE_OLPATH: Unstable
:ARCHIVE_CATEGORY: emacs
:END:
#+begin_src emacs-lisp
    (defun actuator-split-window-right ()
      "Replacement for `split-window-right'.
    Moves the point to the newly created window and asks for the
    buffer."
      (interactive)
      (split-window-right)
      (other-window 1)
      (when (fboundp 'ivy-switch-buffer)
        (ivy-switch-buffer)))
  ;;(global-set-key (kbd "C-x 3") #'actuator-split-window-right)
#+end_src

#+begin_src emacs-lisp
    (defun actuator-split-window-below ()
      "Replacement for `split-window-below'.
    Moves the point to the newly created window and asks for the
    buffer."
      (interactive)
      (split-window-below)
      (other-window 1)
      (when (fboundp 'ivy-switch-buffer)
        (ivy-switch-buffer)))
  ;;(global-set-key (kbd "C-x 2") #'actuator-split-window-below)
#+end_src
**** From macos.org_archive
***** Stop indexing node_modules
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-05-28 Fri 12:04
  :ARCHIVE_FILE: ~/env.d/macos.org_archive
  :ARCHIVE_CATEGORY: macos
  :END:
FROM ANDY
#+begin_src shell
  find . -type d -name "node_modules" -exec touch "{}/.metadata_never_index" \;
#+end_src
***** Backup Anki
:PROPERTIES:
:ID:       B421E9B0-7686-4777-AA4B-2A6C2D2A8DED
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/macos.org_archive
:ARCHIVE_CATEGORY: macos
:END:

#+begin_src xml :tangle ~/Library/LaunchAgents/actuator.backup-anki.plist
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
    <dict>
      <key>Label</key>
      <string>actuator.backup-anki</string>
      <key>ProgramArguments</key>
      <array>
        <string>/bin/sh</string>
        <string>-c</string>
        <string>/usr/bin/rsync -av ~/Library/ApplicationSupport/Anki2 ~/Documents/Archive/Anki2</string>
      </array>
      <key>StartCalendarInterval</key>
      <dict>
        <key>Hour</key>
        <integer>3</integer>
        <key>Minute</key>
        <integer>0</integer>
      </dict>
      <key>StandardErrorPath</key>
      <string>/tmp/backup-ankit.stderr</string>
    </dict>
  </plist>
#+end_src
***** Rsync music backup
:PROPERTIES:
:ID:       CB217DF8-4B9F-4ADC-9F60-1B7FAB3DA897
:ARCHIVE_TIME: 2021-05-28 Fri 12:04
:ARCHIVE_FILE: ~/env.d/macos.org_archive
:ARCHIVE_CATEGORY: macos
:END:
I wanted to keep my music backed up to iCloud. I don't pay for iTunes Match or Apple Music, but I do have 2TB of iCloud Drive storage, so this works well.

This script should rysnc-copy my music to my archive  very confusing) but had no end of issues getting permission from the system to run it. The secret was to enable full disk access to ~/bin/sh~.

#+begin_src xml :tangle ~/Library/LaunchAgents/actuator.syncmusic.plist
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
    <dict>
      <key>Label</key>
      <string>actuator.syncmusic</string>
      <key>ProgramArguments</key>
      <array>
        <string>/bin/sh</string>
        <string>-c</string>
        <string>/usr/bin/rsync -av ~/Music/ ~/Documents/Archive/Music</string>
      </array>
      <key>StartCalendarInterval</key>
      <dict>
        <key>Hour</key>
        <integer>3</integer>
        <key>Minute</key>
        <integer>0</integer>
      </dict>
      <key>StandardErrorPath</key>
      <string>/tmp/music.stderr</string>
    </dict>
  </plist>
#+end_src
**** From default.org_archive
***** ZSH
  :PROPERTIES:
  :ARCHIVE_TIME: 2021-05-28 Fri 12:05
  :ARCHIVE_FILE: ~/env.d/default.org_archive
  :ARCHIVE_CATEGORY: default
  :END:
#+begin_src shell :tangle ~/.zshenv
  export XDG_DATA_HOME="$HOME/.local/share"
  export XDG_CONFIG_HOME="$HOME/.config"
  export XDG_CACHE_HOME="$HOME/.cache"

  export EDITOR="emacsclient -tty -a \"\""
  export VISUAL="emacsclient -c -a \"\""

  export QMK_HOME="~/Documents/Projects/qmk_firmware"

  [ -d /usr/local/opt/ruby/bin ] && \
      path=( /usr/local/opt/ruby/bin $path )

  [ -d /usr/local/opt/ruby/libexec/gembin ] && \
      path=( /usr/local/opt/ruby/libexec/gembin $path )

  [ -d /Library/TeX/texbin ] && \
      path=( /Library/TeX/texbin $path )

  [ -d /usr/local/sbin ] && \
      path=( /usr/local/sbin $path )

  typeset -U PATH path
#+end_src
**** From emacs.org
***** Modeline time
:PROPERTIES:
:ARCHIVE_TIME: 2021-05-28 Fri 12:07
:ARCHIVE_FILE: ~/env.d/emacs.org
:ARCHIVE_OLPATH: Unstable
:ARCHIVE_CATEGORY: emacs
:END:
#+begin_src emacs-lisp
  (run-with-idle-timer 1 nil #'display-time)
  (csetq display-time-24hr-format t)
  (csetq display-time-default-load-average nil)
#+end_src

** 2021-07 July

*** 2021-07-29 Thursday
**** From emacs.org
***** Change GC
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-29 Thu 19:07
:ARCHIVE_FILE: ~/env.d/emacs.org
:ARCHIVE_OLPATH: Init
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp :tangle no
  (defvar actuator-original-gc-cons-threshold gc-cons-threshold
    "Original value for `gc-cons-threshold'.")
  (defvar actuator-original-gc-cons-percentage gc-cons-percentage
    "Original value for `gc-cons-percentage'.")
  (defvar actuator-engorged-gc-cons-threshold (* 5 1000 1000 1000)
    "Enlarged `gc-cons-threshold'.")
  (defvar actuator-engorged-gc-cons-percentage 0.6
    "Enlarged `gc-cons-percentage'.")

  (defun actuator-restore-gc ()
    "Restore `gc-cons-threshold' and `gc-cons-percentage' value.

  This should be used shortly after enlarging the garbage
  collection values and ideally before doing any typing. It might
  cause Emacs to pause for a noticable amount of time, but I
  haven't noticed that so far."

    (setq gc-cons-threshold  actuator-original-gc-cons-threshold)
    (setq gc-cons-percentage actuator-original-gc-cons-percentage)
    (garbage-collect))

  (defun actuator-engorge-gc ()
    "Set `gc-cons-threshold' and `gc-cons-percentage' to huge numbers.

  This should be used in situations where garbage collection
  happens a lot, such as during Emacs' init or when using the
  minibuffer completion on really big lists."

    (setq gc-cons-threshold actuator-engorged-gc-cons-threshold)
    (setq gc-cons-percentage actuator-engorged-gc-cons-percentage))

  (actuator-engorge-gc)
  (add-hook 'after-init-hook #'actuator-restore-gc)
#+end_src
***** Cancel GC in Minibuffer
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-29 Thu 19:07
:ARCHIVE_FILE: ~/env.d/emacs.org
:ARCHIVE_OLPATH: Stable
:ARCHIVE_CATEGORY: emacs
:END:
#+begin_src emacs-lisp
  (when (and (fboundp 'actuator-engorge-gc)
             (fboundp 'actuator-restore-gc))
    (add-hook 'minibuffer-setup-hook #'actuator-engorge-gc)
    (add-hook 'minibuffer-exit-hook  #'actuator-restore-gc))

#+end_src
***** Ement
:PROPERTIES:
:ARCHIVE_TIME: 2021-07-29 Thu 19:28
:ARCHIVE_FILE: ~/env.d/emacs.org
:ARCHIVE_OLPATH: Unstable
:ARCHIVE_CATEGORY: emacs
:END:
This is almost certainly the wrong way to do this, but if plz.el and ement.el are git-cloned to the correct location, this activates them. I don't like using external package managers because I am wrong.

#+begin_src emacs-lisp
  (let ((ement-path
         (expand-file-name "site-lisp/ement.el" user-emacs-directory))
        (plz-path
         (expand-file-name "site-lisp/plz.el" user-emacs-directory)))
    (when (and (file-exists-p ement-path) (file-exists-p plz-path))
      (add-to-list 'package-selected-packages 'ts)
      (add-to-list 'load-path ementel)
      (add-to-list 'load-path plzel)
      (when (and (null (file-exists-p (expand-file-name "plz-autoloads.el" plz-path)))
                 (null (file-exists-p (expand-ifle-name "ement-autoloads.el" ement-path))))
        (package-refresh-contents)
        (package-install 'ts)
        (package-generate-autoloads "ement" ementel)
        (package-generate-autoloads "plz" plzel)
        (byte-recompile-directory (expand-file-name "site-lisp" user-emacs-directory) 0)
        (native-compile-async (expand-file-name "site-lisp" user-emacs-directory) t t)
        (message "Installing ement.el"))
      (load "plz-autoloads")
      (load "ement-autoloads")
      (defun actuator-matrix-connect ()
        "Connects to my Matrix Server."
        (interactive)
        (ement-connect
         (auth-source-pass-get "userid" "element.io")
         (auth-source-pass-get 'secret "element.io")))))
#+end_src
