#+title: Actuator Emacs
#+startup: contents
#+property: header-args :tangle (expand-file-name "init.el" user-emacs-directory) :comments link

* Forward
Install Emacs via your chosen system. It works with native-compile on both macOS and Linux for me.

Then to actually install stuff evaluate the following source block. If it works (untested currently) it should install a bunch of packages and kill Emacs when it's done. Then you should be good to go!

#+begin_src emacs-lisp :tangle no
  (require 'package)
  (require 'ob-tangle)
  (org-babel-tangle nil (buffer-file-name))
  (load-file (expand-file-name "early-init.el" user-emacs-directory))
  (load-file (expand-file-name "init.el" user-emacs-directory))
  (package-refresh-contents)
  (package-install-selected-packages)
  (kill-emacs)
#+end_src

I'm calling this whole thing Actuator. It's a name I came up with because I needed a prefix for naming functions and variables in my Emacs config, and the original name---env.d---has a dot in it which doesn't work for me. I don't know. Anyway, it's named after an Arc'Teryx Veilance jacket that I don't particularly have strong opinions on it, but the name is fun.

Oh, I should probably note that I love pleasing the Emacs byte-compiler, but also am not very good at it. So there's a lot of completely unneeded boilerplate that makes some parts of it happy, but also there will warnings all over the place.

** Windows stuff
:PROPERTIES:
:CREATED: [2022-03-03 Thu 08:55]
:END:

Right now I'm setting Emacs to be [[https://www.emacswiki.org/emacs/EmacsPortableApp][portable on Windows]]. This isn't necessary if Emacs is actually installed on Windows and probably is a bad idea.

#+begin_src bat :tangle (if (eq system-type 'windows-nt) (expand-file-name "../emacs.bat" invocation-directory) "no")
  set HOME=%~dp0emacshome
  "%~dp0/emacs-27.2-x86_64/bin/runemacs.exe" %*
#+end_src

* Early init
:PROPERTIES:
:header-args: :tangle (expand-file-name "early-init.el" user-emacs-directory) :comments link :mkdirp yes
:END:

#+begin_src emacs-lisp :comments no
  ;;; early-init.el --- Pre-package.el settings -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;; This is a tangled file, see Org file for information.

  ;;; Code:
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-original-gc-cons-threshold gc-cons-threshold)
  (defvar actuator-original-gc-cons-percentage gc-cons-percentage)

  (setq gc-cons-threshold (* 128 1000 1000))
  (setq gc-cons-percentage 2)
  (setq load-prefer-newer t)
  (setq frame-inhibit-implied-resize t)
#+end_src

[[*Reset garbage collection][Reset garbage collection]]

I moved the custom-file to early init because when it was in the auto-tangled Org file some things ended up being saved in the init.el file and some in the custom-file, so there were weird errors occurring. This way there's only one location that I need to worry about.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom-settings.el" user-emacs-directory))
  (load custom-file 'noerror 'nomessage)
#+end_src

#+begin_src emacs-lisp
  (setq window-system-default-frame-alist
          '((ns (ns-transparent-titlebar . t)
                (ns-appearance           . 'light))))
#+end_src

#+begin_src emacs-lisp
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  ;;(when (fboundp 'tooltip-mode)  (tooltip-mode  -1))
  ;;(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

#+begin_src emacs-lisp
  (when (member "/usr/local/Homebrew/Library/Homebrew/shims/shared"
                exec-path)
    (setq exec-path '()))

  (defvar actuator-path (reverse
                       `("/usr/local/sbin"
                         "/usr/local/bin"
                         "/opt/local/sbin"
                         "/opt/local/bin"
                         "/bin"
                         "/sbin"
                         "/usr/bin"
                         "/usr/sbin"
                         "/usr/local/opt/ruby/libexec/gembin"
                         "/usr/local/opt/ruby/bin"
                         "/Library/Tex/texbin"
                         ,exec-directory)))

  (defun actuator-add-to-path (path)
    (when (file-exists-p path)
      (add-to-list 'exec-path path)))

  (mapc 'actuator-add-to-path actuator-path)
#+end_src

* Init
:PROPERTIES:
:header-args: :tangle (expand-file-name "init.el" user-emacs-directory) :comments link :mkdirp yes
:END:
** Lexical Binding
#+begin_src emacs-lisp :comments no
  ;;; init.el --- Load literate config -*- lexical-binding: t; -*-

  ;;; Commentary:

  ;; This is a tangled file, see Org file for information.

  ;;; Code:
#+end_src

** Non-interactive
:PROPERTIES:
:CREATED:  [2022-06-24 Fri 11:23]
:END:
#+begin_src emacs-lisp
  (when noninteractive
    (setq gc-cons-percentage 1)
     (defvar package-selected-packages nil))
#+end_src

** Csetq
The macro ~csetq~ probably has limited actual purpose. It provides the same interfaces as ~setq~ so if you don't use it it's a simple switch. It might make things better in some situations and should never make things worse. It's stolen from Lele Gaifax on the [[https://lists.gnu.org/archive/html/help-gnu-emacs/2015-12/msg00097.html][Emacs mailing list]].

#+begin_src emacs-lisp
  (defmacro csetq (variable value)
    "Macro to set the VALUE of VARIABLE, possibly a custom user option.

  Should be a drop-in replacement for `setq', switching between the
  two should only cause issues if the variable is supposed to be
  set with customize."
    `(funcall (or (get ',variable 'custom-set)
                  (and (plist-member (symbol-plist ',variable)
                                     'standard-value)
                       'set-default)
                  'set)
              ',variable ,value))
#+end_src



#+begin_src emacs-lisp
  (unless (and (fboundp 'package-installed-p) noninteractive)
    (require 'package))
#+end_src

** Fonts
:PROPERTIES:
:CREATED:  [2022-08-02 Tue 14:23]
:END:
#+begin_src emacs-lisp
  (defvar xtr-font-mono
    (cond
     ((member "Fira Mono" (font-family-list))
      "Fira Mono")
     ((member "SF Mono" (font-family-list))
      "SF Mono"))
  "Monospaced font that for sure exists on the system.")
#+end_src

#+begin_src emacs-lisp
    (defvar xtr-font-variable
      (when (member "SF Pro" (font-family-list))
        "SF Pro")
    "Variable-pitch font that for sure exists on the system.")
#+end_src

#+begin_src emacs-lisp
  (defun actuator-frame-init (&optional _frame)
    "Initialize per-frame variables.

  These variables need to be set every time a frame is created."
    (when (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
    (when (fboundp 'fringe-mode)
      (fringe-mode 12))
    (set-frame-font xtr-font-mono))

  (add-hook 'after-make-frame-functions 'actuator-frame-init)

  (unless noninteractive
    (add-hook 'after-init-hook #'actuator-frame-init))
#+end_src

** Tangle
:PROPERTIES:
:CREATED:  [2022-01-10 Mon 14:14]
:END:

 #+begin_src emacs-lisp
   (defvar org-directory)
   (customize-set-variable 'org-directory (expand-file-name "org" "~"))
   (unless (file-exists-p org-directory)
     (make-directory org-directory))
#+end_src

#+begin_src emacs-lisp
  (defvar actuator-directory
    (let ((dir "~/env.d"))
      (if (file-exists-p dir)
          dir
      nil))
    "Directory with actuator Org files.
  This is the directory where Emacs will try to tangle the config
  files from.")
#+end_src

* Theme
:LOGBOOK:
- Refiled on [2022-02-21 Mon 17:29]
:END:
#+begin_src emacs-lisp
  ;;(deftheme actuator)

  (add-hook 'minibuffer-setup-hook 'actuator-minibuffer-setup)

  (defun actuator-minibuffer-setup ()
    "Remap minibuffer faces to ensure uniformity.

    I really don't like it when the minibuffer has different font
    sizes. Currently I have to remap everything manually, but that's
    probably okay."
    (set (make-local-variable 'face-remapping-alist)
         '((org-document-title :height 1.0))))

  ;; flymake error
  ;; flymake warning
  ;; flymake note
  ;; todo not due yet
  ;; todo past due

  (defvar xtr-highlight)

  (defvar xtr-red)

  (defvar xtr-white)
  (defvar xtr-black)

  (defvar xtr-gray-mid)
  (defvar xtr-gray-light)
  (defvar xtr-gray-dark)
  (defvar xtr-gray-xlight)

  (let ((blue  "#29BEEA")
        (white "#FFFFFF")
        (dark  "#000000")
        ;;(cyan  "#00FFFF")
        (red   "#FF1616")
        (grey  "#484e55")
        (lgrey "#bdc4cc")

        (highlight-dim "#B1F8FF")
        (code-background "#F5F6F8")

        (xgrey "#F5F6F8")
        ;;(xbord "#EDF0F4")
        )

    (custom-theme-set-faces
     'user
     ;;`(fixed-pitch ((t (:family ,xtr-font-mono :weight light))))
     ;;`(variable-pitch ((t (:family ,xtr-font-variable :weight light))))
     `(default ((t (:background ,white
                                :foreground ,dark
                                :weight light))))
     `(cursor ((t (:background ,blue))))
     `(fringe ((t (:background ,white))))
     `(region ((t (:background ,highlight-dim))))
     `(highlight ((t (:background ,highlight-dim))))
     `(hl-line ((t (:background ,grey :foreground ,white))))
     `(header-line ((t (:background ,grey :foreground ,white))))

     `(font-lock-builtin-face ((t (:weight bold))))
     `(font-lock-constant-face ((t (:weight bold))))
     `(font-lock-function-name-face ((t (:weight bold))))
     `(font-lock-keyword-face ((t (:weight bold))))
     `(font-lock-variable-name-face ((t (:weight bold))))
     `(font-lock-type-face ((t (:weight bold))))
     `(font-lock-string-face ((t (:weight thin))))

     `(mu4e-header-highlight-face ((t (:inherit hl-line))))
     `(mu4e-compose-separator-face ((t (:inherit org-drawer))))
     `(message-header-name ((t (:weight light
                                        :foreground ,lgrey))))
     `(message-header-subject ((t :weight normal
                                  :foreground ,dark)))
     `(message-header-to ((t :weight normal
                             :foreground ,dark)))
     `(message-header-other ((t (:weight normal
                                         :foreground ,dark))))

     `(font-lock-warning-face ((t (:foreground ,red))))
     `(font-lock-comment-face ((t (:weight thin))))
     `(font-lock-comment-delimiter-face ((t (:weight thin))))
     `(org-agenda-done ((t (:inherit org-headline-done
                                     :weight normal))))

     `(org-drawer ((t (:foreground ,lgrey))))
     `(org-special-keyword ((t (:inherit org-drawer
                                         :foreground ,dark))))
     `(org-ellipsis ((t (:foreground ,lgrey))))
     `(org-block ((t (:background ,code-background :extend t))))
     `(org-block-begin-line ((t :inherit org-block)))
     `(org-block-end-line ((t :inherit org-block)))
     `(link ((t :foreground ,dark
                :underline t)))
     `(org-document-title ((t :foreground ,dark
                              :height 220)))
     `(org-level-1 ((t :weight bold)))
     `(org-done ((t :foreground ,lgrey
                    :weight bold)))
     `(org-headline-done ((t :foreground ,grey)))
     `(org-todo ((t :foreground ,red
                    :weight bold)))
     `(org-special-keyword ((t :foreground ,grey)))

     `(org-date ((t :foreground ,dark
                    :underline t)))
     `(org-agenda-date ((t :foreground ,dark
                           :height 180)))
     `(org-agenda-date-today ((t :foreground ,dark
                                 :weight bold
                                 :slant normal
                                 :height 180)))
     `(org-time-grid ((t :foreground ,grey )))
     ;;`(org-tag)
     `(org-table ((t :foreground ,dark
                     :family ,xtr-font-mono)))

     `(pulse-highlight-start-face ((t :background ,red)))


     ;; `(dired-filename ((t :foreground red)))
     ;; `(dired-header ((t :foreground red)))
     ;; `(dired-hide-details-information ((t :foreground red)))
     ;; `(dired-hide-details-detail ((t :foreground red)))
     ;; `(dired-ignored ((t :foreground red)))
     ;; `(dired-broken-symlink ((t :foreground red)))
     ;; `(dired-directory ((t :foreground red)))
     ;; `(dired-symlink ((t :foreground red)))

     ;; `(elfeed-search-date-face ((t :foreground red)))
     ;; `(elfeed-search-title-face ((t :foreground red)))
     ;; `(elfeed-search-unread-title-face ((t :foreground red)))
     ;; `(elfeed-search-last-update-face ((t :foreground red)))
     ;; `(elfeed-search-feed-face ((t :foreground red)))
     ;; `(elfeed-search-tag-face ((t :foreground red)))

     `(elfeed-search-unread-count-face ((t :foreground ,white)))

     `(ivy-current-match ((t (:background ,grey
                                          :foreground ,white
                                          :extend t))))
     `(minibuffer-prompt ((t (:inherit default))))
     `(isearch ((t (:background ,lgrey))))
     ;; `(show-paren-match ((t (:background ,lgrey))))
     ;; `(show-paren-match-expression ((t (:background ,lgrey))))
     ;; `(show-paren-mismatch ((t (:background ,lgrey))))
     ;; `(magit-section-heading ((t (:background ,lgrey))))
     ;; `(magit-section-highlight ((t (:background ,lgrey))))

     `(elfeed-search-tag-face ((t (:foreground ,grey))))
     `(elfeed-search-feed-face ((t (:foreground ,grey))))
     `(mode-line ((t (:box (:line-width 7
                                        :color ,grey)
                           ;;:underline nil
                           ;;:overline ,xbord
                           :foreground ,white
                           :background ,grey
                           ;;:inherit variable-pitch
                           :height 110))))
     `(mode-line-inactive ((t (:inherit mode-line
                                        :foreground ,lgrey
                                        :background ,xgrey
                                        :box
                                        (:line-width 7
                                                     :color, xgrey)))))

     `(mode-line-highlight ((t (:box (:line-width 7
                                                  :color ,grey)
                                     :background ,grey
                                     :foreground ,white))))
     `(eshell-prompt ((t :foreground ,dark
                         :weight bold)))


     ))

  ;;(provide-theme 'actuator)
#+end_src

#+results:

* Emacs
:PROPERTIES:
:CREATED:  [2022-05-13 Fri 20:07]
:END:
** C-m
:PROPERTIES:
:CREATED:  [2022-05-25 Wed 18:34]
:END:
:LOGBOOK:
- Refiled on [2022-05-27 Fri 15:37]
:END:
#+begin_src emacs-lisp
  (define-key input-decode-map [?\C-m] [C-m])
#+end_src

** Elide
:PROPERTIES:
:CREATED:  [2022-05-26 Thu 16:26]
:END:
:LOGBOOK:
- Refiled on [2022-05-27 Fri 15:29]
:END:
I am hiding this when not bound because I have weird errors where on Windows it says that ~elide-head-mode~ isn't a function.

#+begin_src emacs-lisp
  (when (fboundp 'elide-head-mode)
    (add-hook 'prog-mode-hook #'elide-head-mode))
#+end_src

** Switches

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "<mouse-8>") (kbd "<XF86Back>"))
  (define-key key-translation-map (kbd "<mouse-9>") (kbd "<XF86Forward>"))
#+end_src

#+begin_src emacs-lisp
  (global-unset-key (kbd "<pinch>"))
#+end_src

#+begin_src emacs-lisp
  (csetq redisplay-skip-fontification-on-input t)
  (csetq switch-to-buffer-obey-display-actions t)
  (csetq completions-detailed t)
  (csetq completions-format 'one-column)
  (csetq next-error-message-highlight 'keep)
  (csetq fast-but-imprecise-scrolling t)
  (csetq tab-first-completion 'word)
  (csetq tab-always-indent 'complete)
  (csetq save-place-abbreviate-file-names t)
  (csetq dired-do-revert-buffer t)
  (csetq abbrev-suggest nil)
  (csetq calc-make-windows-dedicated t)
  (csetq image-dired-thumb-visible-marks t)
#+end_src

#+begin_src emacs-lisp
  (csetq view-read-only t)           ; Open read-only files in view mode
  (global-unset-key (kbd "C-z"))     ; Disable suspend keybinding
  (csetq window-combination-resize t) ; Split windows so that it's proportional-ish
  (csetq undo-limit (* 10 1024 1024)) ; Set a high undo limit (bytes)
  (global-unset-key (kbd "<C-wheel-down>")) ; I hate scroll-resizing fonts
  (global-unset-key (kbd "<C-wheel-up>"))
  (csetq help-window-select t)            ; Select help window by default, so it's easy
                                          ; to kill
  (defvar help-mode-map)
  (eval-when-compile
    (declare-function help-go-back "help-mode" ())
    (declare-function help-go-forward "help-mode" ()))
  (with-eval-after-load 'help-mode
    (define-key help-mode-map (kbd "<mouse-8>") #'help-go-back) ; Mouse back and forward buttons
    (define-key help-mode-map (kbd "<mouse-9>") #'help-go-forward))
  (csetq jit-lock-defer-time 0)           ; Defer doing font lock if there's input pending
  (csetq use-short-answers t)
  (global-set-key (kbd "M-o") #'other-window) ; M-o is otherwise unused
  (delete-selection-mode +1)                   ; Delete selection instead of be confusing
  (midnight-mode t) ; Run stuff at a random morning cycle
  (csetq sentence-end-double-space nil)         ; Single space FTW
  (set-language-environment "UTF-8")            ; This is all that's needed to ensure UTF-8
  (add-hook 'before-save-hook 'whitespace-cleanup) ; Remove trailing spaces and most blank lines at the end
  (csetq indent-tabs-mode nil)            ; Never insert tabs with tab key
  (csetq require-final-newline t)
  (save-place-mode +1) ; Save the place the point lived in
  (csetq find-file-visit-truename nil) ; Don't resolve symlinks
  (csetq confirm-kill-emacs 'y-or-n-p) ; Ensures there is a confirmation
  (put 'narrow-to-region 'disabled nil) ; I don't use this though
  (put 'narrow-to-defun  'disabled nil) ; I don't use this either
  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p) ; CHMOD scripts on save. Doesn't work on tangle
  ;;(global-set-key (kbd "s-z") #'undo-only)
  ;;(global-set-key (kbd "s-Z") #'undo-redo)
  (csetq bookmark-save-flag 1)            ; Save every time
  (csetq bookmark-set-fringe-mark nil)    ; Those marks drive me mad
  (csetq frame-resize-pixelwise t)        ; Allow resize by pixels, not just columns or rows
  (csetq frame-inhibit-implied-resize t)  ; The frame isn't resized when the contents are
  (global-set-key (kbd "M-=") #'count-words) ; Dumb count words
  (blink-cursor-mode -1)                     ; Remove blink
  (csetq cursor-type 'box)
  (csetq scroll-conservatively 101) ; Move the buffer just enough to display point, but no more
  (csetq scroll-margin 3)           ; Scroll when the point hits the edge of the screen if 0
  (csetq mouse-wheel-scroll-amount '(1))  ; I should fancify this
  (csetq inhibit-startup-message t)       ; No startup message
  (csetq initial-scratch-message "")      ; No scratch message
  (when (executable-find "mdfind")
    (csetq locate-command "mdfind"))
  (show-paren-mode +1) ; Show paren-friends
  (electric-pair-mode +1) ; Make closing parens
  (csetq blink-matching-paren nil)
  (csetq show-paren-delay 0)
  (csetq show-paren-style 'mixed)
  (csetq epg-pinentry-mode 'loopback)     ; Loopback allows Emacs to request passwords in the minibuffer I think
  (csetq package-native-compile t)        ; Allow native compiled packages
  ;;(csetq switch-to-buffer-preserve-window-point t) ;
  ;;(csetq bookmark-fontify nil)
  (csetq sort-fold-case t)                ; Sort regardless of case
  (csetq disabled-command-function 'ignore) ; Don't yell when doing stuff that's been disabled
  (csetq bidi-paragraph-direction 'left-to-right) ; This way is faster to process if you never use other paragraph directions
  (csetq bidi-inhibit-bpa t)
  (global-so-long-mode +1) ; Fancy hooks to deal with big files.
  (csetq proced-auto-update-flag t)       ; Auto-update proced
  (csetq create-lockfiles nil)            ; Lockfiles are bad news
  (csetq image-use-external-converter t)
  (remove-hook 'after-save-hook 'rmail-after-save-hook) ; I don't use rmail
 #+end_src

** Drop-in functions
*** Auto-create missing directories
:PROPERTIES:
:CREATED:  [2022-06-12 Sun 16:38]
:END:
:LOGBOOK:
- Refiled on [2022-06-13 Mon 18:46]
:END:

#+begin_src emacs-lisp
  (defun xtr-auto-create-missing-dirs ()
    "Automatically create a missing dir in a path."
    (let ((target-dir (file-name-directory buffer-file-name)))
      (unless (file-exists-p target-dir)
        (make-directory target-dir t))))

  (add-to-list 'find-file-not-found-functions #'xtr-auto-create-missing-dirs)
#+end_src

[[https://emacsredux.com/blog/2022/06/12/auto-create-missing-directories][Auto-create Missing Directories]]

*** Unfill paragraph

#+begin_src emacs-lisp
  (defun actuator-unfill-paragraph ()
    "Does the opposite of filling a paragraph.

  This technically causes it to wrap only at a really huge number.
  It should be safe in most instances, but Emacs does have some
  issues with really long lines, so if you run this on a really,
  really huge paragraph, you might be sorry."

    (interactive)
    (let ((fill-column most-positive-fixnum))
      (fill-paragraph)))

  (global-set-key (kbd "C-M-q") #'actuator-unfill-paragraph)
#+end_src

*** Just one space

#+begin_src emacs-lisp
  (defun actuator-maybe-just-one-space ()
    "Insert just one space, killing all other whitespace."
    (interactive)
    (just-one-space -1)
      (when (and (looking-at ")")
               (looking-back ") " nil))
          (delete-char -1)))

  (global-set-key (kbd "M-/") #'actuator-maybe-just-one-space)
#+end_src

*** Copy sentence
:PROPERTIES:
:CREATED:  [2022-02-08 Tue 19:18]
:END:

#+begin_src emacs-lisp
  (defun actuator-kill-ring-save ()
    "Save the entire sentence to the kill ring."
    (interactive)
    (cond ((region-active-p)
           (kill-ring-save (region-beginning) (region-end)))
          ((derived-mode-p 'text-mode)
            (save-excursion
              (backward-sentence)
              (mark-end-of-sentence nil)
              (copy-region-as-kill nil nil t)))
          ((derived-mode-p 'prog-mode)
           (save-excursion
             (backward-sexp)
             (backward-char)
           (mark-sexp nil t)
           (copy-region-as-kill nil nil t)))))

  (global-set-key (kbd "M-w") #'actuator-kill-ring-save)
#+end_src

*** Change word case
:PROPERTIES:
:CREATED:  [2022-01-28 Fri 11:48]
:END:

[[https://christiantietze.de/posts/2021/03/change-case-of-word-at-point/][Change Case of Word at Point in Emacs, But for Real This Time • Christian Tietze]]

#+begin_src emacs-lisp
  (defun actuator-capitalize-word-at-point ()
    "A replacement which operates on the entire word."
    (interactive)
    (actuator-word-boundary-at-point-or-region #'actuator-capitalize-region))

  (defun actuator-downcase-word-at-point ()
    "A replacement which operates on the entire word."
    (interactive)
    (actuator-word-boundary-at-point-or-region #'downcase-region))

  (defun actuator-upcase-word-at-point ()
    "A replacement which operates on the entire word."
    (interactive)
    (actuator-word-boundary-at-point-or-region #'upcase-region))

  (defun actuator-capitalize-region (beginning end)
    "Downcases then capitalizes between BEGINNING and END only.
  The default capitalization function upcases the first characters
  in the word. This replacement first downcases the word and then
  capitalizes it, which is really what you want."
    (downcase-region beginning end)
    (upcase-initials-region beginning end))

  (defun actuator-word-boundary-at-point-or-region (&optional callback)
    "Return the boundary of the word at point, or region, if any.
  Forwards the points to CALLBACK as (CALLBACK p1 p2), if present.

  Entirely lifted form Christian Tietze, who modified it from Xah Lee.
  https://christiantietze.de/posts/2021/03/change-case-of-word-at-point/
  http://ergoemacs.org/emacs/modernization_upcase-word.html"

    (let ((deactivate-mark nil)
          beginning end)
      (if (use-region-p)
          (setq beginning (region-beginning)
                end (region-end))
        (save-excursion
          (skip-chars-backward "[:alpha:]")
          (setq beginning (point))
          (skip-chars-forward "[:alpha:]")
          (setq end (point))))
      (when callback
        (funcall callback beginning end))
      (list beginning end)))

  (global-set-key (kbd "M-c") #'actuator-capitalize-word-at-point)
  (global-set-key (kbd "M-u") #'actuator-upcase-word-at-point)
  (global-set-key (kbd "M-l") #'actuator-downcase-word-at-point)
#+end_src

*** Find-definitions
:PROPERTIES:
:CREATED:  [2022-02-19 Sat 11:05]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function org-babel-tangle-jump-to-org "ob-tangle" nil)
    (declare-function xref-find-definitions "xref" (identifier)))

  (defun actuator-jump-to-correct-location ()
    "Replacement for `xref-find-definitions' to be org-aware.

  This function attempts to jump to the Org source file if it
  exists and falls back on xref if that fails. Should be a drop-in
  replacement."
    (interactive)
    (require 'ob-tangle)
    (require 'xref)
    (condition-case nil
        (org-babel-tangle-jump-to-org)
      (error
       (call-interactively #'xref-find-definitions))))
  (global-set-key (kbd "M-.") #'actuator-jump-to-correct-location)
#+end_src

** Savehist
#+begin_src emacs-lisp
  (csetq history-length 10000)
  (csetq history-delete-duplicates t)
  (csetq message-log-max 10000)
#+end_src

#+begin_src emacs-lisp
  (csetq savehist-save-minibuffer-history t)
  (csetq savehist-additional-variables
         '(bookmark-history
           buffer-name-history
           command-history
           compile-command
           compile-history
           extended-command-history
           file-name-history
           file-name-history
           global-mark-ring
           Info-history-list
           kill-ring
           kmacro-ring
           last-kbd-macro
           mark-ring
           minibuffer-history
           occur-collect-regexp-history
           org-agenda-search-history
           org-clock-history
           org-clock-stored-history
           org-link--history
           org-link--insert-history
           org-mark-ring
           org-read-date-history
           org-refile-cache
           org-refile-history
           org-table-formula-history
           org-tags-history
           query-replace-history
           regexp-search-ring
           register-alist
           savehist-minibuffer-history-variables
           search-ring
           timer-list
           shell-command-history))

  (savehist-mode)
#+end_src

Interprogram paste can cause [[https://github.com/syl20bnr/spacemacs/issues/9409][issues]] if it saves too much, setting it to an integer or nil limits it.

#+begin_src emacs-lisp
  (csetq save-interprogram-paste-before-kill 100)
#+end_src

Unpropertizing the kill ring is [[https://emacs.stackexchange.com/questions/4187/strip-text-properties-in-savehist][good for the kill ring]].

#+begin_src emacs-lisp
  (defun actuator-unpropertize-kill-ring ()
    "Remove properties from items in the kill ring.

  Text stored in the kill ring is kept propertized; faces that
  apply to it should be correctly applied on yank. That can vastly
  increase the size of the kill ring, causing it to go from no big
  deal to a rather substantial issue if you try to persist the kill
  ring. This removes properties, which makes the kill ring lossy in
  a fashion, but means that saving huge numbers of kill ring items
  to disk should no longer cause weird issues."
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'savehist-save-hook #'actuator-unpropertize-kill-ring)
#+end_src

** Autorevert
Autorevert via notify is supposed to be much lower power than polling. It should work by default, but on Arch you need to install inotify-tools or it does not work at all.

#+begin_src emacs-lisp
  (global-auto-revert-mode +1)
  ;;(csetq auto-revert-avoid-polling t)
  (csetq global-auto-revert-non-file-buffers t)
  (csetq auto-revert-verbose t)
  (csetq auto-revert-check-vc-info nil)
#+end_src

** Minibuffer

#+begin_src emacs-lisp
  (csetq read-minibuffer-restore-windows nil)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-minibuffer-normalize-face-height ()
    "Reset faces in the minibuffer to be the default height."

    (set (make-local-variable 'face-remapping-alist)
         '((org-document-title :height 1.0))))

  (add-hook 'minibuffer-setup-hook #'actuator-minibuffer-normalize-face-height)
#+end_src

#+begin_src emacs-lisp
  (defun xtr-minibuffer-setup ()
    ""
    (setq gc-cons-percentage 0.5))

  (defun xtr-minibuffer-exit ()
    "Thing."
    (setq gc-cons-percentage actuator-original-gc-cons-percentage))

  (add-hook 'minibuffer-setup-hook #'xtr-minibuffer-setup -90)
  (add-hook 'minibuffer-exit-hook #'xtr-minibuffer-exit 90)
#+end_src
** Hippie expand

#+begin_src emacs-lisp
  (csetq dabbrev-case-distinction t)
  (csetq dabbrev-case-fold-search t)
  (csetq dabbrev-case-replace nil)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'hippie-exp
    (require 'dabbrev))
#+end_src

#+begin_src emacs-lisp
  (csetq hippie-expand-verbose t)
  (csetq hippie-expand-try-functions-list
         '(try-expand-all-abbrevs
           try-expand-dabbrev-visible
           try-expand-dabbrev
           try-expand-dabbrev-all-buffers
           try-expand-dabbrev-from-kill
           try-complete-file-name-partially
           try-complete-file-name
           try-expand-line
           try-complete-lisp-symbol-partially
           try-complete-lisp-symbol
           try-expand-list
           try-expand-list-all-buffers
           try-expand-whole-kill
           try-expand-line-all-buffers
           xtr-try-expand-by-dict
           xtr-try-add-expansion))

  (global-set-key (kbd "<M-SPC>") #'hippie-expand)
#+end_src

- try-complete-lisp-symbol has a lot of completions
- try-expand-line-all-buffers is very slow

#+begin_src emacs-lisp
  (defun actuator-hippie-unexpand ()
    "Remove an expansion without having to loop around."
    (interactive)
    (hippie-expand 0))
  (global-set-key (kbd "M-S-SPC") #'actuator-hippie-unexpand)
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function he-init-string "hippie-exp" (beg end))
    (declare-function he-dabbrev-beg "hippie-exp" ())
    (declare-function he-reset-string "hippie-exp" ()))
  (defun xtr-try-add-expansion (_old)
    "Add a new global abbrev, `OLD' is required by hippies."
    (he-init-string (he-dabbrev-beg) (point))
    (or (inverse-add-global-abbrev 1)
        (he-reset-string)))
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function he-init-string "hippie-exp" (beg end))
    (declare-function he-lisp-symbol-beg "hippie-exp" ())
    (declare-function he-string-member "hippie-exp"
                      (str lst &optional trans-case))
    (declare-function he-reset-string "hippie-exp" ())
    (declare-function he-substitute-string "hippie-exp"
                      (str &optional trans-case))
    (declare-function ispell-lookup-words "ispell"
                      (word &optional lookup-dict)))
  (defvar he-search-string)
  (defvar he-tried-table)
  (defvar he-expand-list)

  (defun xtr-try-expand-by-dict (old)
    "Attempt to expand a word by using the dictionary.
  Needs OLD due to `hippie-expand'."
    (unless (bound-and-true-p ispell-minor-mode)
      (ispell-minor-mode 1))

    (unless old
      (he-init-string (he-lisp-symbol-beg) (point))
      (if (not (he-string-member he-search-string he-tried-table))
          (setq he-tried-table (cons he-search-string he-tried-table)))
      (setq he-expand-list
            (and (not (equal he-search-string ""))
                 (ispell-lookup-words
                  (concat (buffer-substring-no-properties
                           (he-lisp-symbol-beg) (point))
                          "*")))))
    (if (null he-expand-list)
        (if old (he-reset-string))
      (he-substitute-string (car he-expand-list))
      (setq he-expand-list (cdr he-expand-list))
      t))
#+end_src

** Recentf

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function recentf-open-files "recentf")
    (declare-function recentf-cleanup "recentf"))

  (global-set-key (kbd "C-x C-r") #'recentf-open-files)

  (csetq recentf-filename-handlers '(abbreviate-file-name))
  (csetq recentf-max-saved-items 1000)
  (csetq recentf-auto-cleanup 'never)
  (csetq recentf-exclude `("^/\\(?:ssh\\|su\\|sudo\\)?:"
                           "/var/folders/"))
  (add-hook 'midnight-hook #'recentf-cleanup)
  (let ((inhibit-message t))
    (recentf-mode +1))
#+end_src

** Eliminate frame title
#+begin_src emacs-lisp
  (csetq ns-use-proxy-icon nil)
  (csetq frame-title-format
         '((:eval (when (buffer-file-name)
                    (abbreviate-file-name default-directory)))
           "%b"))
#+end_src

** Delete by Moving to Trash
[[elfeed:christiantietze.de#tag:christiantietze.de,2021-06-21:/posts/2021/06/emacs-trash-file-macos/][Trash File from Emacs with Put-Back Enabled on macOS]]

#+begin_src emacs-lisp
  (when (executable-find "trash")
    (csetq delete-by-moving-to-trash t))

  (let ((trash "~/.Trash"))
    (when (file-exists-p trash)
      (csetq trash-directory "~/.Trash")))

  (defun system-move-file-to-trash (path)
    "Move file at PATH to the Trash according to `move-file-to-trash'.

    On macOS relies on the command-line utility 'trash' to be installed."
    (shell-command (concat "trash -vF \"" path "\""
                           "| sed -e 's/^/Trashed: /'")
                   nil ;; Name of output buffer
                   "*Trash Error Buffer*"))
#+end_src

** Server

#+begin_src emacs-lisp
  (csetq server-client-instructions nil)
    (eval-when-compile
      (declare-function server-running-p "server"))
  (require 'server)
  (unless (server-running-p) (server-start))
#+end_src

** Actuator startup profile

#+begin_src emacs-lisp
  (run-with-idle-timer 3 nil #'actuator-startup-profile)

  (defun actuator-startup-profile ()
    "Display the startup time and garbage collections in the minibuffer."

    (message "Emacs %s ready in %s with %d garbage collections."
             emacs-version
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))
#+end_src

** Keyboard Macros

- ~C-x (~ Start defining a keyboard macro.
- ~C-x )~ End a keyboard macro.
- ~C-u C-x (~ Replay macro and append keys to the definition.
- ~C-u C-u C-x (~ Don’t replay but append keys.
- ~C-x C-k r~ Run the last keyboard macro on each line that begins in the region.
- ~C-x C-k n~ Name the most recent macro.
- ~C-x C-k b~ Bind the most recent macro to a keybinding (for the session only).
- ~M-x insert-kbd-macro~ Insert the most recent macro into the buffer as lisp. That’s how you save it.
- ~C-x C-k 0-9~ and ~C-x C-k A-Z~ are reserved for keyboard macros

*** References
- [[http://ergoemacs.org/emacs/emacs_macro_example.html][Emacs: Keyboard Macro ]][2020-06-08 Mon]
- [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki: Keyboard Macros]] [2020-06-08 Mon]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html][Basic Keyboard Macro - GNU Emacs Manual]] [2020-06-08 Mon]

** iBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (csetq ibuffer-expert t)
#+end_src

#+begin_src emacs-lisp
  (csetq ibuffer-show-empty-filter-groups nil)
  (csetq ibuffer-saved-filter-groups
         `(("default"
            ("Scratch" (name . "\*scratch\*"))
            ("Org" (or
                    (name . "\*Org Src")
                    (mode . org-agenda-mode)
                    (directory . "org/")))
            ("Config" (directory . "env.d/"))
            ("Docs" (mode . doc-view-mode))
            ("Dired" (mode      . dired-mode))
            ("Help" (or
                     (name . "\*Help\*")
                     (name . "\*Apropos\*")
                     (name . "\*info\*")))
            ("Internal" (or
                         (name . "\*Compile-log\*")
                         (name . "\*Buffer List\*")
                         (name . "\*Backtrace\*")
                         (name . "\*Messages\*")
                         (name . "\*Completions\*")
                         (name . "\*Calendar\*")
                         (name . "\*tramp/sudo")
                         (name . "\*elfeed-log\*")
                         (name . "\*Packages\*")
                         (mode . compilation-mode))))))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-ibuffer-setup ()
    "Set up ibuffer defaults that require running functions.

  This should be run as in a hook that is called when `ibuffer-mode' is run."

    (require 'ibuf-ext)
    (eval-when-compile
      (declare-function ibuffer-switch-to-saved-filter-groups "ibuf-ext" (name))
      (declare-function ibuffer-auto-mode "ibuf-ext" (&optional arg))
      (declare-function ibuffer-do-sort-by-alphabetic "ibuf-ext" () t))
    (ibuffer-switch-to-saved-filter-groups "default")
    (ibuffer-auto-mode +1)
    (ibuffer-do-sort-by-alphabetic)
    (toggle-truncate-lines +1))

  (add-hook 'ibuffer-mode-hook #'actuator-ibuffer-setup)
#+end_src

** Dired
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-d") #'dired)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (require 'dired-x)
    (require 'dired-aux)
    (require 'wdired))
  (eval-when-compile
    (declare-function dired-omit-mode "dired-x"))
  (add-hook 'dired-mode-hook #'dired-omit-mode)
#+end_src

#+begin_src emacs-lisp
      (defvar image-dired-thumbnail-mode-map)
  (csetq image-dired-thumb-size 100)
  (csetq image-dired-thumb-width 300)
  (csetq image-dired-thumb-height 300)
  (csetq image-dired-thumb-margin 5)
  (csetq image-dired-thumb-relief 0)
  (csetq image-dired-thumbs-per-row 4)
  (with-eval-after-load 'image-dired
    (eval-when-compile
      (declare-function image-dired-thumbnail-display-external "image-dired"))
    (define-key image-dired-thumbnail-mode-map
      (kbd "<return>") #'image-dired-thumbnail-display-external))

  (cond ((executable-find "open")
         (csetq image-dired-external-viewer "open"))
        ((executable-find "xdg-open")
         (csetq image-dired-external-viewer "xdg-open")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (defvar dired-mode-map)
  (define-key dired-mode-map
                (kbd "C-c C-x a")
                #'org-attach-dired-to-subtree)
#+end_src

#+begin_src emacs-lisp
  (csetq dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`.DS_Store\\'\\|^.git$")

  (with-eval-after-load 'savehist
    (eval-when-compile (defvar savehist-additional-variables))
    (add-to-list 'savehist-additional-variables 'dired-shell-command-history))

  (eval-when-compile
    (declare-function dired-directory-changed-p "dired"))
  (csetq dired-auto-revert-buffer #'dired-directory-changed-p)
  (csetq dired-dwim-target t)
  (csetq wdired-create-parent-directories t)
  (csetq wdired-allow-to-change-permissions t)
  (csetq dired-recursive-copies 'always)
  (csetq dired-isearch-filenames 'dwim)
  (csetq dired-create-destination-dirs 'ask)
  (csetq dired-vc-rename-file t)
  (csetq dired-kill-when-opening-new-dired-buffer t)

  (add-hook 'dired-mode-hook #'hl-line-mode)

  (csetq ls-lisp-use-insert-directory-program t)
  (csetq ls-lisp-ignore-case t)
  (csetq ls-lisp-use-string-collate nil)
  (csetq ls-lisp-verbosity '(links uid))
  (csetq ls-lisp-format-time-list '("%Y-%m-%d %H:%M" "%Y-%m-%d"))
  (csetq ls-lisp-use-localized-time-format nil)

  (cond ((or (eq system-type 'gnu-linux) (executable-find "gls"))
         (when (executable-find "gls")
           (csetq insert-directory-program "gls"))
         (csetq dired-listing-switches "-AGFhlv --group-directories-first --time-style=long-iso --dired"))
        ((eq system-type 'darwin)
         (csetq dired-listing-switches "-alhFo"))
        ((unless (executable-find "ls")
           (csetq ls-lisp-use-insert-directory-program nil))))

  ;; a :: include files beginning with dots
  ;; A :: include files beginning with dots except . and ..
  ;; G :: skip group names
  ;; v :: natural sort
  ;; l :: display as list
  ;; h :: human-readable filenames
  ;; F :: display a slash after directories
  ;; S :: sort by size
#+end_src

** Ediff
#+begin_src emacs-lisp
      (defvar ediff-buffer-A)
      (defvar ediff-buffer-B)
      (defvar ediff-buffer-C)
  (csetq ediff-window-setup-function 'ediff-setup-windows-plain)
  (csetq ediff-split-window-function 'split-window-horizontally)
  (csetq ediff-diff-options "-w") ;;-w ignores whitespace changes
  (csetq ediff-forward-word-function 'forward-char) ;;testing
  (csetq ediff-highlight-all-diffs t)
  (csetq ediff-keep-variants nil)

  (defun actuator-ediff-save-window-configuration ()
    "Save current window layout so ediff can control the frame."
    (window-configuration-to-register :ediff))

  (defun actuator-ediff-restore-window-configuration ()
    "Restore the window layout after diffing."
    (jump-to-register :ediff))

  (defun actuator-ediff-org-reveal-around-difference (&rest _)
    "Ensure that the relevant Org-mode diff is visible."


    (eval-when-compile
      (declare-function ediff-with-current-buffer "ediff-init" (buffer &rest body) t))
    (require 'ediff)

    (dolist (buf (list ediff-buffer-A ediff-buffer-B ediff-buffer-C))
      (ediff-with-current-buffer buf
        (when (derived-mode-p 'org-mode)
          (org-reveal t)))))

  ;; (defun actuator-ediff-copy-both-to-C ()
  ;;   "Copy both the A and B diffs to the output C."

  ;;   (interactive)
  ;;   (defvar ediff-current-difference)
  ;;   (defvar ediff-control-buffer)
  ;;   (require 'ediff-util)
  ;;   (declare-function ediff-copy-diff "ediff-util")
  ;;   (declare-function ediff-get-region-contents "ediff-util")

  ;;   (ediff-copy-diff ediff-current-difference nil 'C nil
  ;;                    (concat
  ;;                     (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
  ;;                     (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

  ;; (defun actuator-add-d-to-ediff-mode-map ()
  ;;   "Mode map to work with ediff-copy-both-to-C"

  ;;   (defun ediff-mode-map)
  ;;   (define-key ediff-mode-map "d" 'actuator-ediff-copy-both-to-C))
  ;; (add-hook 'ediff-keymap-setup-hook 'actuator-add-d-to-ediff-mode-map)

  ;; (advice-add 'ediff-next-difference :after
  ;;             #'actuator-ediff-org-reveal-around-difference)
  ;; (advice-add 'ediff-previous-difference :after
  ;;             #'actuator-ediff-org-reveal-around-difference)

  (add-hook 'ediff-startup-hook #'actuator-ediff-save-window-configuration)
  ;;(add-hook 'ediff-startup-hook #'actuator-ediff-org-reveal-around-difference)
  (add-hook 'ediff-quit-hook #'actuator-ediff-restore-window-configuration)

  (defun actuator-org-mode-show-all ()
    "Show the entire buffer when in an org buffer.

  Sometimes it's better to show the entire buffer, for example when
  trying to run ediff on an Org-mode file. That way context for the
  diff is shown."
    (eval-when-compile
      (declare-function outline-show-all "outline"))
    (when (derived-mode-p 'org-mode)
      (require 'outline)
      (outline-show-all)))

  (add-hook 'ediff-prepare-buffer-hook #'actuator-org-mode-show-all)
#+end_src

[[https://www.reddit.com/r/emacs/comments/dxzi96/have_some_code_make_ediffing_folded_org_files/][Have some code: make ediffing folded org files better : emacs]]

** Auth Source / EPA / EPG

#+begin_src emacs-lisp
  (customize-set-variable 'epa-file-encrypt-to '("geoff@mac.into.sh"))
  (customize-set-variable 'epa-file-select-keys nil)
  (customize-set-variable 'auth-sources '(password-store))
  (customize-set-variable 'password-cache-expiry 600)

  (when (file-exists-p "~/.password-store")
    (require 'password-store)
    (auth-source-pass-enable))
#+end_src

** Project
#+begin_src emacs-lisp
  (defvar package-selected-packages)
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'project))
#+end_src

** Eldoc

[[https://www.reddit.com/r/emacs/comments/c1zl0s/weekly_tipstricketc_thread/ergullj/?context=1][Improve eldoc's documentation]]

#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'eldoc))

  (csetq eldoc-echo-area-use-multiline-p t)
  (csetq eldoc-idle-delay 0)
  (csetq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)

  (with-eval-after-load 'eldoc
    (eval-when-compile
      (declare-function elisp-get-fnsym-args-string@docstring "elisp-mode" (orig-fun sym &rest r) t))
    ;;(require 'elisp-mode)
    (define-advice elisp-get-fnsym-args-string (:around (orig-fun sym &rest r) docstring)
      "If SYM is a function, append its docstring."
      (require 'subr-x)
      (concat
       (apply orig-fun sym r)
       (when-let ((doc (and (fboundp sym) (documentation sym 'raw)))
                  (oneline (substring doc 0 (string-match "\n" doc))))
         (when (not (string= "" oneline))
           (concat " " (propertize oneline 'face 'italic)))))))
#+end_src

** Tramp
#+begin_src emacs-lisp
  (csetq tramp-auto-save-directory (expand-file-name "tramp/" user-emacs-directory))
#+end_src

** Modeline

#+begin_src emacs-lisp
  (csetq mode-line-compact t)
  (setq-default mode-line-format
                (list
                 " %e"
                 mode-line-mule-info
                 mode-line-client
                 mode-line-modified
                 " "
                 '(:eval (when (buffer-file-name)
                           (abbreviate-file-name default-directory)))
                 ;;mode-line-buffer-identification
                 (propertize "%b" 'face 'mode-line-buffer-id)
                 " %IB "
                 mode-line-position
                 " "
                 mode-line-misc-info
                 '(:eval (when (featurep 'minions)
                           minions-mode-line-modes))))
#+end_src

*** References
- [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Custom Emacs Modeline]]
** Auto-save

#+begin_src emacs-lisp
   (csetq auto-save-no-message t)
#+end_src

#+begin_src emacs-lisp
  (csetq auto-save-list-file-prefix
         (expand-file-name "auto-save-list/" user-emacs-directory))
  (csetq auto-save-default t)
#+end_src

#+begin_src emacs-lisp
  (make-directory (expand-file-name "auto-saves" user-emacs-directory) t)
  (csetq auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-saves/" user-emacs-directory) t)))
#+end_src

** Backups
#+begin_src emacs-lisp
  (csetq backup-directory-alist
         `(("." . ,(expand-file-name "backups" user-emacs-directory))))
#+end_src

** Spell check
#+begin_src emacs-lisp
  (defvar org-directory)

  (when (ignore-errors (file-exists-p org-directory))
    (csetq ispell-personal-dictionary (expand-file-name "data/dictionary" org-directory)))
  (csetq ispell-silently-savep t)
  (defun actuator-org-reveal-around ()
    "Reveals the area around the point in Org-mode files."

    (when (derived-mode-p 'org-mode)
      (eval-when-compile
        (declare-function org-reveal "org"))
      (org-reveal t)))
  (add-hook 'ispell-update-post-hook #'actuator-org-reveal-around)
#+end_src

** Winner
#+begin_src emacs-lisp
  (winner-mode)
  (csetq winner-boring-buffers-regexp "^\\*")
#+end_src

** Flymake
#+begin_src emacs-lisp :tangle no
  (add-hook 'emacs-lisp-mode-hook #'flymake-mode)
#+end_src

#+begin_src emacs-lisp
  (defvar flymake-mode-map)
  (csetq flymake-suppress-zero-counters t)
  (csetq flymake-no-changes-timeout 1)
  (csetq flymake-start-on-save-buffer t)
  (with-eval-after-load 'flymake
    (eval-when-compile
      (declare-function flymake-start "flymake")
      (declare-function flymake-show-buffer-diagnostics "flymake")
      (declare-function flymake-goto-next-error "flymake")
      (declare-function flymake-goto-prev-error "flymake"))
    (define-key flymake-mode-map (kbd "C-c ! s") #'flymake-start)
    (define-key flymake-mode-map (kbd "C-c ! d") #'flymake-show-buffer-diagnostics)
    (define-key flymake-mode-map (kbd "C-c ! n") #'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "C-c ! p") #'flymake-goto-prev-error))
#+end_src

** Reset garbage collection
:PROPERTIES:
:CREATED:  [2022-04-10 Sun 10:18]
:END:
#+begin_src emacs-lisp
  (defvar actuator-original-gc-cons-threshold)
  (defvar actuator-original-gc-cons-percentage)

  (defun actuator-restore-gc-cons ()
    "Restore gc-cons-* to default after startup."
    (when (boundp 'actuator-original-gc-cons-threshold)
      (csetq gc-cons-threshold  actuator-original-gc-cons-threshold))
    (when (boundp 'actuator-original-gc-cons-percentage)
      (csetq gc-cons-percentage actuator-original-gc-cons-percentage)))

    (add-hook 'emacs-startup-hook #'actuator-restore-gc-cons)
#+end_src

** Display buffer

[[https://emacs.stackexchange.com/questions/48472/how-to-make-m-x-ansi-term-behave-like-m-x-shell-opening-in-new-window/48481#48481][Switch-to-buffer-obey-display-actions]]

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (csetq display-buffer-alist
           '(("\\*\\(Org Lint\\|Backtrace\\|Warnings\\|Compile-Log\\|Messages\\|Completions\\)\\*"
              (display-buffer-in-side-window)
              (side . bottom)
              (window-parameters . ((mode-line-format . none)))
              (window-height . 0.2))
             ("\\*Calendar.*"
              (display-buffer-in-side-window)
              (side . bottom)
              (window-height . shrink-window-if-larger-than-buffer))
             ("^[a-z]+\\.org-[A-Z]+ [a-z, ]+-[0-9]$"
              (display-buffer-in-side-window)
              (side . bottom)
              (window-height . 0.5)))))
#+end_src

** Auto-insert
[2021-06-16 Wed 20:23]
#+begin_src emacs-lisp
  (auto-insert-mode 1)
#+end_src

** Show tooltips in modeline

#+begin_src emacs-lisp
  (csetq org-return-follows-link nil)
  (csetq help-at-pt-display-when-idle t)
  (csetq help-at-pt-timer-delay 0)
#+end_src

#+begin_src emacs-lisp
  (defvar help-at-pt-display-when-idle)
  (defvar help-at-pt-timer-delay)

  (defun actuator-echo-area-tooltips ()
    "Show tooltips in the echo area automatically for current buffer.

  You need to cancel the help-at-pt timer in order so reset the
  delay to 0. That's what this does."
    (setq-local help-at-pt-display-when-idle t
                help-at-pt-timer-delay 0)
    (help-at-pt-cancel-timer)
    (help-at-pt-set-timer))

  (add-hook 'org-mode-hook #'actuator-echo-area-tooltips nil t)
#+end_src

** Pulse line

#+begin_src emacs-lisp
  (defvar pulse-delay)

  (defun pulse-line (&rest _)
    "Interactive function to pulse the current line."
    (interactive)
    (require 'pulse)
    (pulse-momentary-highlight-one-line (point)))
  (defadvice other-window (after other-window-pulse activate)
    "Doc."
    (pulse-line))
  (defadvice delete-window
      (after delete-window-pulse activate)
    "Doc."
    (pulse-line))
  (defadvice recenter-top-bottom
      (after recenter-top-bottom-pulse activate)
    "Doc."
    (pulse-line))


  (csetq pulse-delay .07)
#+end_src

** Registers
[2021-07-18 Sun 21:27]
#+begin_src emacs-lisp :tangle no
  (set-register ?i (cons 'file (expand-file-name "inbox.org" org-directory)))
#+end_src

** Compilation window
[2021-07-28 Wed 11:09]

#+begin_src emacs-lisp :tangle no
  (defun actuator-notify-compilation-result (buffer msg)
    "Notify that the compilation is finished,
    close the *compilation* buffer if the compilation is successful,
    and set the focus back to Emacs frame"
    (if (string-match "^finished" msg)
        (progn
          (sleep-for 4)
          (delete-windows-on buffer)
          (message "Compilation Successful"))
      (message "Compilation Failed"))
    (let ((current-frame (car (car (cdr (current-frame-configuration))))))
      (select-frame-set-input-focus current-frame)))

  (add-to-list 'compilation-finish-functions
               'actuator-notify-compilation-result)
#+end_src

** Minions
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'minions))

  (when (and (locate-library "minions") (display-graphic-p))
    (eval-when-compile
      (declare-function minions-mode "ext:minions"))
    (minions-mode))
#+end_src

** Fido mode

#+begin_src emacs-lisp
  (defvar recentf-list)
  (defvar icomplete-fido-mode-map)
  (eval-when-compile
    (declare-function icomplete-fido-exit "icomplete" (force)))

  (customize-set-variable 'icomplete-scroll t)
  (customize-set-variable 'icomplete-show-matches-on-no-input t)
  (customize-set-variable 'read-buffer-completion-ignore-case t)
  (customize-set-variable 'completion-ignore-case t)
  (customize-set-variable
   'completion-pcm-complete-word-inserts-delimiters t)
  (customize-set-variable 'read-answer-short t)
  (customize-set-variable 'read-file-name-completion-ignore-case t)

  (defun xtr-recentf-completing-read ()
    "Interactive completion on recentf files."
    (interactive)
    (let ((file (completing-read
                 "Choose recent file: " recentf-list nil t)))
      (when file
        (find-file file))))

  (defun xtr-kill-whole-line ()
    "Kill the whole line, regardless of point location."
    (interactive)
    (move-beginning-of-line nil)
    (kill-line))

  (fido-mode +1)
  (icomplete-vertical-mode +1)
  (define-key icomplete-fido-mode-map (kbd "C-<return>")
              #'icomplete-fido-exit)
  (define-key icomplete-fido-mode-map (kbd "M-k")
              #'xtr-kill-whole-line)
  (global-set-key (kbd "C-x C-r") #'xtr-recentf-completing-read)
#+end_src

** Windmove
#+begin_src emacs-lisp
  (csetq windmove-create-window nil)
  (global-set-key (kbd "<s-up>")   #'windmove-up)
  (global-set-key (kbd "<s-down>") #'windmove-down)
  (global-set-key (kbd "<s-left>")  #'windmove-left)
  (global-set-key (kbd "s-<right>") #'windmove-right)

  (global-set-key (kbd "<S-s-up>") #'windmove-swap-states-up)
  (global-set-key (kbd "<S-s-down>") #'windmove-swap-states-down)
  (global-set-key (kbd "<S-s-left>") #'windmove-swap-states-left)
  (global-set-key (kbd "<S-s-right>") #'windmove-swap-states-right)
#+end_src

** Insert heading timestamp
:PROPERTIES:
:CREATED: [2022-04-03 Sun 09:40]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function org-entry-get "org"
                      (pom property &optional inherit literal-nil))
    (declare-function org-set-property "org" (property value)))

  (defvar actuator-org-created-property-name "CREATED"
    "The Org-mode property that stores entry creation dates.")

  (defun actuator-org-insert-heading-timestamp ()
    "Insert a timestamp below a new heading.

    Org counts an inactive timestamp on the start of a line as a
    creation date."
    (interactive)
    (let ((now (format-time-string "[%Y-%m-%d %a %H:%M]"))
          (property actuator-org-created-property-name))
      (unless (org-entry-get (point) property nil)
        (org-set-property property now))))

  (add-hook 'org-insert-heading-hook
            #'actuator-org-insert-heading-timestamp)

  (add-hook 'org-capture-prepare-finalize-hook
            #'actuator-org-insert-heading-timestamp)
#+end_src

** Info
:PROPERTIES:
:CREATED:  [2022-02-07 Mon 13:32]
:END:
#+begin_src emacs-lisp
  (defvar Info-mode-map)
  (eval-when-compile
    (declare-function Info-backward-node "info" nil)
    (declare-function Info-forward-node "info" (&optional not-down not-up no-error)))
  (with-eval-after-load 'info
    (define-key Info-mode-map (kbd "<mouse-8>") #'Info-backward-node)
    (define-key Info-mode-map (kbd "<mouse-9>") #'Info-forward-node))
#+end_src

** Package Init

As of Emacs 29 or so, both the Gnu and NonGnu ELPA package archives are default. I add MELPA as a low-priority archive for now (Jan 2022).

#+begin_src emacs-lisp
  (csetq package-archives
         '(("melpa"  . "https://melpa.org/packages/")
           ("gnu"    . "https://elpa.gnu.org/packages/")
           ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

  (csetq package-archive-priorities '(("melpa"  . 10)
                                      ("gnu"    . 30)
                                      ("nongnu" . 20)))
#+end_src

** Desktop
:PROPERTIES:
:CREATED:  [2022-02-21 Mon 10:46]
:END:
:LOGBOOK:
- Refiled on [2022-02-21 Mon 17:35]
:END:

#+begin_src emacs-lisp
  (csetq desktop-base-file-name "desktop-save-file.el")
  (csetq desktop-dirname  user-emacs-directory)
  (csetq desktop-base-lock-name "desktop-lock")
  (csetq desktop-save t)
  (unless (equal init-file-debug t)
    (desktop-save-mode +1))
#+end_src

** Context-menu
:PROPERTIES:
:CREATED: [2022-04-06 Wed 09:57]
:END:

#+begin_src emacs-lisp
  (when (fboundp 'context-menu-mode)
    (context-menu-mode +1))
#+end_src

** Help etc.
:PROPERTIES:
:CREATED: [2022-04-06 Wed 09:59]
:END:
#+begin_src emacs-lisp
  (csetq help-enable-symbol-autoload t)
  (csetq describe-bindings-outline t)
#+end_src

** Bell
:PROPERTIES:
:CREATED: [2022-04-10 Sun 08:38]
:END:

#+begin_src emacs-lisp
  (csetq visible-bell nil)
  (csetq ring-bell-function 'ignore)
#+end_src

** Recompile init
:PROPERTIES:
:CREATED:  [2022-04-10 Sun 09:52]
:END:

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function org-babel-tangle-jump-to-org "ob-tangle" nil)
    (declare-function org-babel-tangle-file "ob-tangle"
                      (file &optional target-file lang-re))
    (declare-function package-quickstart-refresh "package" nil))
  (defvar package-quickstart)

  (defun actuator-regen-init ()
    "A stupid version of what I was doing."
    (interactive)
    ;;(org-with-wide-buffer)

    (let ((init       (expand-file-name "init.el" user-emacs-directory))
          (early-init (expand-file-name "early-init.el"
                                        user-emacs-directory))
          (org        (expand-file-name "actuator-emacs.org"
                                        actuator-directory)))
      (when (file-exists-p org)
        (org-babel-tangle-file org))
      (cond ((native-comp-available-p)
             (native-compile init)
             (native-compile early-init)
             (message "Native compiled init"))
            (t
             (byte-compile-file init)
             (byte-compile-file early-init)
             (message "Byte-compiled init")))))
#+end_src

** Rename current buffer
:PROPERTIES:
:CREATED:  [2022-05-01 Sun 19:17]
:END:

https://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs

#+begin_src emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let* ((name (buffer-name))
          (filename (buffer-file-name))
          (basename (file-name-nondirectory filename)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))
#+end_src

** Elisp mode
:PROPERTIES:
:CREATED:  [2022-05-01 Sun 19:27]
:END:

#+begin_src emacs-lisp
  (defun actuator-elisp-hook ()
    "Set mode-specific setting for Emacs Lisp."
    (auto-fill-mode +1)
    (display-fill-column-indicator-mode +1)
    (flymake-mode +1))

  (add-hook 'emacs-lisp-mode-hook #'actuator-elisp-hook)
#+end_src

** Add emacs source SRC
:PROPERTIES:
:CREATED:  [2022-05-10 Tue 15:28]
:END:
#+begin_src emacs-lisp
  (defvar find-function-C-source-directory)
  (let ((emacs-source "~/Source/emacs/src/"))
    (when (file-exists-p emacs-source)
      (csetq find-function-C-source-directory emacs-source)))
#+end_src

** Backups
:PROPERTIES:
:CREATED:  [2022-02-09 Wed 09:04]
:END:

#+begin_src emacs-lisp
  (csetq backup-by-copying    t)
  (csetq delete-old-versions  t)
  (csetq kept-new-versions    100)
  (csetq kept-old-versions    50) ; I don't know what an old version is
  (csetq version-control      t)
  (csetq vc-make-backup-files t)
#+end_src

** Startup echo

#+begin_src emacs-lisp
  (defun display-startup-echo-area-message ()
    "Remove the GNU info from the minibuffer on startup.

  All you have to do is create a function with this name.  It's
  called automatically."

    (message ""))
#+end_src

** Abbrev

#+begin_src emacs-lisp
  (when (ignore-errors (file-exists-p org-directory))
    (csetq abbrev-file-name (expand-file-name "data/abbrev.el" org-directory)))
  (defun actuator-enable-abbrev-mode ()
    "Wrapper to ensure abbrev mode is turned on, not toggled."
    (abbrev-mode +1))

  (add-hook 'text-mode-hook #'actuator-enable-abbrev-mode)
  (add-hook 'prog-mode-hook #'actuator-enable-abbrev-mode)
  (csetq save-abbrevs 'silently)
#+end_src

** Package
#+begin_src emacs-lisp
  (csetq package-name-column-width 40)
  (add-hook 'package-menu-mode-hook #'hl-line-mode)
#+end_src

According to [[https://lists.gnu.org/archive/html/emacs-devel/2020-12/msg01162.html][Stephan Monnier]], we only need to set the =package-quickstart= variable to generate a quickstart file, not to load one if it exists.

#+begin_src emacs-lisp
  (csetq package-quickstart t)
#+end_src

Further in the same link, he recommends against calling =package-activate-all= as it should be auto-called between early-init and init and may cause issues if called twice.

** Uniquify

#+begin_src emacs-lisp
  (csetq uniquify-buffer-name-style 'forward) ; Like a path, the way that makes sense
  (csetq uniquify-separator "/")
  (csetq uniquify-after-kill-buffer-p t)
  (csetq uniquify-ignore-buffers-re "^\\*")
  (csetq uniquify-strip-common-suffix nil)
#+end_src

** Completion

#+begin_src emacs-lisp
  (csetq completion-styles
        '(fuzzy
          partial-completion
          substring
          initials
          basic))
#+end_src

** Term mouse
#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (if (executable-find "gpm")
        (gpm-mouse-mode +1)
      (xterm-mouse-mode +1)))
#+end_src

This will only check the display on starting Emacs. If I need to check later (for example if I start graphically and then open a term emacsclient) this will not check. For that I need to add an after-make-frame-functions hook.

** Kill buffer
:PROPERTIES:
:CREATED:  [2022-07-27 Wed 17:00]
:END:
#+begin_src emacs-lisp :tangle no
  (defun xtr-kill-buffer (orig-func &optional buffer-or-name)
    "Kill buffer with optional diff function.
  Takes ORIG-FUNC as it's advice, and can be optionally given a
  BUFFER-OR-NAME."
    (catch 'quit
      (save-window-excursion
        (with-current-buffer buffer-or-name
          (let (done (buf (current-buffer)))
            (when (and buffer-file-name (buffer-modified-p))
              (while (not done)
                (let ((response (read-char-choice
                                 (format "Save file %s? (y, n, d, q) "
                                         (buffer-file-name buf))
                                 '(?y ?n ?d ?q))))
                  (setq done (cond
                              ((eq response ?q) (throw 'quit nil))
                              ((eq response ?y) (save-buffer) t)
                              ((eq response ?n) (set-buffer-modified-p nil) t)
                              ((eq response ?d) (diff-buffer-with-file) nil))))))
            (apply orig-func (list (current-buffer))))))))

  (advice-add 'kill-buffer :around #'xtr-kill-buffer)
#+end_src

https://in.comum.org/smart-way-to-close-files.html

https://emacs.stackexchange.com/questions/3245/kill-buffer-prompt-with-option-to-diff-the-changes/3363#3363

** Auto-save
:PROPERTIES:
:CREATED:  [2022-07-27 Wed 17:06]
:END:

#+begin_src emacs-lisp
  (auto-save-visited-mode +1)
#+end_src

* Modes
:PROPERTIES:
:CREATED:  [2022-05-13 Fri 20:11]
:END:
** Slime
:PROPERTIES:
:CREATED:  [2022-05-29 Sun 21:32]
:END:
:LOGBOOK:
- Refiled on [2022-06-08 Wed 19:34]
:END:
#+begin_src emacs-lisp
  (defvar inferior-lisp-program)
  (defvar slime-path)

  (when (executable-find "sbcl")
    (add-to-list 'package-selected-packages 'slime)
    (add-to-list 'package-selected-packages 'hippie-expand-slime)
    (csetq inferior-lisp-program "sbcl")
    (when (locate-library "slime")
      (require 'slime)
      (add-to-list 'load-path (expand-file-name "contrib" slime-path)))
    (when (locate-library "hippie-expand-slime")
      (add-hook 'slime-mode-hook 'set-up-slime-hippie-expand)))
#+end_src

** Fish Mode
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'fish-mode))
#+end_src
** Ledger Mode
#+begin_src emacs-lisp
  (csetq ledger-default-date-format "%Y-%m-%d")
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'ledger-mode))
#+end_src
** YAML Mode
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'yaml-mode))
#+end_src
** TOML Mode
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'toml-mode))
#+end_src
** Markdown Mode
#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'markdown-mode)
#+end_src

** Lua Mode
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'lua-mode))
#+end_src
** Git Modes
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'git-modes))
#+end_src
** Ripgrep
#+begin_src emacs-lisp
  (with-eval-after-load 'package
   (when (executable-find "rg")
    (add-to-list 'package-selected-packages 'rg)))
#+end_src
** Forge
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (unless (eq system-type 'windows-nt)
      (add-to-list 'package-selected-packages 'forge)))
#+end_src

** Nov.el
#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'nov))
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . doc-view-mode))
  (csetq nov-text-width 75)
  (defun actuator-novel-setup ()
    "Set up some defaults for nov.el that make it nicer to read in."

    (face-remap-add-relative 'variable-pitch :family "Georgia"
                             :height 1.3)
    (setq-local line-spacing 1.2))
  (add-hook 'nov-mode-hook 'actuator-novel-setup)
#+end_src

** Transient
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'transient))
#+end_src

** Magit
#+begin_src emacs-lisp
  (with-eval-after-load 'package
      (when (executable-find "git")
        (add-to-list 'package-selected-packages 'magit)))

  (eval-when-compile
    (declare-function magit-status "magit-status")
    (declare-function magit-list-repositories "magit-repos"))
  (global-set-key (kbd "C-x g") #'magit-status)
  (global-set-key (kbd "C-x G") #'magit-list-repositories)

  (csetq magit-diff-refine-hunk 'all)
  (csetq magit-save-repository-buffers 'dontask)
  (csetq magit-section-initial-visibility-alist
         '((untracked . show)
           (unstaged  . show)
           (unpushed  . show)
           (upstream  . show)))
  (csetq magit-push-always-verify nil)
  (csetq magit-no-confirm '(stage-all-changes
                            unstage-all-changes))
  (csetq magit-status-initial-section nil)
  ;; (csetq magit-repository-directories
  ;;        `((,org-directory      . 0)
  ;;          (,actuator-directory . 0)
  ;;          ("~/Projects"        . 1)))
#+end_src

#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    "Fullscreen the magit status window."
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
#+end_src


#+begin_src emacs-lisp
  (defun magit-quit-session ()
    "Restore the previous window configuration and kill the magit buffer."
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))
#+end_src

** Auctex
#+begin_src emacs-lisp :tangle no
  (when (executable-find "luatex")
    (add-to-list 'package-selected-packages 'auctex))
  (csetq TeX-engine 'luatex)
  (csetq TeX-source-correlate-start-server t)
#+end_src
** Web Mode

#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'web-mode)

  (when (locate-library "web-mode")
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'"   . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'"  . web-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'"  . web-mode)))

  (csetq web-mode-markup-indent-offset 2)
  (csetq web-mode-code-indent-offset 2)
  (csetq web-mode-css-indent-offset 2)
#+end_src
** Anki
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (unless (eq system-type 'windows-nt)
      (add-to-list 'package-selected-packages 'anki-editor)))
#+end_src

** Elfeed
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (unless (eq system-type 'windows-nt)
      (add-to-list 'package-selected-packages 'elfeed)))
#+end_src


#+begin_src emacs-lisp
  (defvar elfeed-search-mode-map)
  (csetq elfeed-search-filter "@1-week-ago +unread ")
  (csetq elfeed-enclosure-default-dir "~/Download/")
  (csetq elfeed-search-title-max-width 120)
  (csetq elfeed-db-directory   (expand-file-name "elfeed" user-emacs-directory))

  (global-set-key (kbd "C-x w") #'actuator-elfeed-load-db-and-open)
  (with-eval-after-load 'elfeed

    (define-key elfeed-search-mode-map (kbd "q") #'actuator-elfeed-save-db-and-bury)
    (define-key elfeed-search-mode-map (kbd "R") #'actuator-elfeed-mark-all-as-read))
#+end_src

Filters are kind of the star of Elfeed. I mostly use them to remove items that I don't want to see (or already see in other contexts---podcasts for example). I think it's all pretty straightforward. The only thing of note that I do is adding a debug tag to each hook that hides things. That way I can tell which filter it is that's causing problems when I make a stupid typo and suddenly a specific filter matches all entries.

#+begin_src emacs-lisp
  (with-eval-after-load 'elfeed
    (eval-when-compile
      (declare-function elfeed-make-tagger "elfeed"))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :entry-title "sponsor\\|revenue\\|financial\\|philosophy"
                                  :add '(junk debug1)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :before "2 weeks ago"
                                  :add 'debug2
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "MacSparky"
                                  :entry-title "focused\\|Mac Power Users\\|jazz\\|automators\\|podcast\\|Labs"
                                  :add '(junk debug3)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "Six Colors"
                                  :entry-title "podcast\\|macworld\\|member"
                                  :add '(junk debug4)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-title "Longreads"
                                  :entry-title "longreads"
                                  :add '(junk debug5)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "youtube\\.com"
                                  :add '(video youtube)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "twitchrss"
                                  :add '(video twitch)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "kijiji\\.ca"
                                  :add '(shop kijiji)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "reddit"
                                  :add 'reddit))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "ikea"
                                  :entry-title "Q\\:"
                                  :remove 'unread
                                  :add '(junk debug6)))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "cestlaz"
                                  :entry-title '(not "emacs")
                                  :add '(junk debug7)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "reddit\\.com"
                                  :entry-title '(not "F1")
                                  :add '(junk debug8)
                                  :remove 'unread))
    (add-hook 'elfeed-new-entry-hook
              (elfeed-make-tagger :feed-url "kijiji"
                                  :entry-title "yeezy\\|jordan\\|dunk"
                                  :add '(junk debug9)
                                  :remove 'unread)))
#+end_src




You don't need to do anything special to load Elfeed. You can set up a keybinding that runs ~(elfeed)~ and it should work. I took this function from [[http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/][Pragmatic Emacs]] when I first set up Elfeed a few years ago because I wanted to keep the database in sync between multiple computers. These helper functions ensure that the database is loaded and saved at the appropriate moments. I'm not sure there's any benefit to these if you only use them on one computer (as I do now) but I can't find any downsides either, so they stay.

#+begin_src emacs-lisp
  (defun actuator-elfeed-load-db-and-open ()
    "Wrapper to load the elfeed database from disk before opening.

  Taken from Pragmatic Emacs."
    (interactive)
    (eval-when-compile
      (declare-function elfeed "elfeed")
      (declare-function elfeed-db-load "elfeed-db")
      (declare-function elfeed-search-update "elfeed-search")
      (declare-function elfeed-update "elfeed"))
    (window-configuration-to-register :elfeed-fullscreen)
    (delete-other-windows)
    (elfeed)
    (elfeed-db-load)
    (elfeed-search-update 'arg)
    (elfeed-update))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-elfeed-save-db-and-bury ()
    "Save the Elfeed database to disk before burying buffer.

  Taken from Pragmatic Emacs."
    (interactive)
    (eval-when-compile
     (declare-function elfeed-db-save "elfeed-db")
     (declare-function elfeed-db-gc "elfeed-db")
     (declare-function elfeed-db-compact "elfeed-db")
     (declare-function elfeed-db-unload "elfeed-db"))
    (elfeed-db-save)
    (elfeed-db-gc)
    ;;(elfeed-db-compact)
    (elfeed-db-unload)
    (quit-window)
    (garbage-collect)
    (jump-to-register :elfeed-fullscreen))
#+end_src

#+begin_src emacs-lisp
    (defun actuator-elfeed-mark-all-as-read ()
      "Mark all feeds in search as read.

  Taken from Mike Zamansky"
      (interactive)
      (eval-when-compile
        (declare-function elfeed-search-untag-all-unread "elfeed-search"))
      (with-no-warnings (mark-whole-buffer))
      (elfeed-search-untag-all-unread))
#+end_src

Changing the colours of an entry is neat, but not that useful. I mostly have this set up in order to learn how to do it, and as a vague novelty.

#+begin_src emacs-lisp
  (defvar elfeed-search-face-alist)
  (with-eval-after-load 'elfeed
    (add-to-list 'elfeed-search-face-alist
                 '(video actuator-elfeed-video-face))
    (add-to-list 'elfeed-search-face-alist
                 '(image actuator-elfeed-image-face))
    (add-to-list 'elfeed-search-face-alist
                 '(comic actuator-elfeed-comic-face)))
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-video-face
    `((t . (:background "gray90" :foreground "black")))
    "Face for elfeed video entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-image-face
    `((t . (:background "gray90" :foreground "black")))
    "Face for elfeed image entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp
  (defface actuator-elfeed-comic-face
    `((t . (:background "gray90" :foreground "black")))
    "Face for elfeed comic entry."
    :group 'actuator-elfeed)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defvar elfeed-search-filter-active)
  (defvar elfeed-search-filter-overflowing)
  (defvar elfeed-search-entries)
  (defvar elfeed-search-header-function)
  (csetq elfeed-search-header-function #'actuator-elfeed-search--header)

  (defun actuator-elfeed-search--header ()
    "Computes the string to be used as the Elfeed header.

  This version doesn't show 0/0:0 items because I have no idea what
  those numbers are supposed to represent."
    (eval-when-compile
      (defvar elfeed-search-filter-active)
      (defvar elfeed-search-filter)
      (declare-function elfeed-queue-count-active "elfeed")
      (declare-function elfeed-queue-count-total "elfeed")
      (declare-function elfeed-search--intro-header "elfeed-search")
      (declare-function elfeed-db-last-update "elfeed-db"))
    (cond
     ((zerop (elfeed-db-last-update))
      (elfeed-search--intro-header))
     ((> (elfeed-queue-count-total) 0)
      (let ((total (elfeed-queue-count-total))
            (in-process (elfeed-queue-count-active)))
        (format "%d jobs pending, %d active..."
                (- total in-process) in-process)))
     ((let* ((db-time (seconds-to-time (elfeed-db-last-update)))
             (update (format-time-string "%Y-%m-%d %H:%M" db-time))
             (unread (actuator-elfeed-search--count-unread)))
        (format "Updated %s %s%s"
                (propertize update 'face 'elfeed-search-last-update-face)
                (propertize unread 'face 'elfeed-search-unread-count-face)
                (cond
                 (elfeed-search-filter-active "")
                 ((string-match-p "[^ ]" elfeed-search-filter)
                  (concat ", " (propertize elfeed-search-filter
                                           'face 'elfeed-search-filter-face)))
                 ("")))))))

  (defun actuator-elfeed-search--count-unread ()
    "Count the number of entries and feeds being currently displayed."
    (eval-when-compile

      (declare-function elfeed-tagged-p "elfeed-db")
      (declare-function elfeed-feed-url "elfeed-db" t t)
      (declare-function elfeed-entry-feed "elfeed-db"))
    (if (and elfeed-search-filter-active elfeed-search-filter-overflowing)
        "?/?:?"
      (cl-loop with feeds = (make-hash-table :test 'equal)
               for entry in elfeed-search-entries
               for feed = (elfeed-entry-feed entry)
               for url = (elfeed-feed-url feed)
               count entry into entry-count
               count (elfeed-tagged-p 'unread entry) into unread-count
               do (puthash url t feeds)
               finally
               (cl-return
                (format "%d unread %d total %d feeds"
                        unread-count entry-count
                        (hash-table-count feeds))))))
#+end_src

** Org-elfeed
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (unless (eq system-type 'windows-nt)
      (add-to-list 'package-selected-packages 'elfeed-org)))
  (with-eval-after-load 'elfeed
    (eval-when-compile
      (declare-function elfeed-org "elfeed-org"))
    (elfeed-org))

  (csetq rmh-elfeed-org-ignore-tag "disconnected")
  (csetq rmh-elfeed-org-auto-ignore-invalid-feeds nil)
  (when (ignore-errors (file-exists-p org-directory))
    (csetq rmh-elfeed-org-files `(,(expand-file-name "feed.org" org-directory))))
#+end_src

** Systemd
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'systemd))
#+end_src

** Rainbow
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'rainbow-mode))
  (when (and (locate-library "rainbow-mode") (display-graphic-p))
    (eval-when-compile
      (declare-function rainbow-mode "rainbow-mode"))
    (rainbow-mode))
#+end_src
** Sudoers

#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (when (file-exists-p "/etc/sudoers")
      (add-to-list 'package-selected-packages 'etc-sudoers-mode)))
#+end_src

** Kmacro
:PROPERTIES:
:CREATED:  [2022-07-13 Wed 13:26]
:END:
#+begin_src emacs-lisp
  (require 'kmacro)
  (defalias 'kmacro-insert-macro 'insert-kbd-macro)
  (define-key kmacro-keymap (kbd "I") #'kmacro-insert-macro)
#+end_src
* Org
:PROPERTIES:
:CREATED:  [2022-05-13 Fri 20:07]
:END:
** Prettify symbols
:PROPERTIES:
:CREATED:  [2022-06-13 Mon 17:55]
:END:
:LOGBOOK:
- Refiled on [2022-06-13 Mon 18:48]
:END:
#+begin_src emacs-lisp
  (csetq prettify-symbols-unprettify-at-point 'right-edge)

  (defun xtr-prettify-org-symbols ()
    "Prettifies all Org buffers."
    (add-to-list 'prettify-symbols-alist '("#+title: " . ""))
    (prettify-symbols-mode +1))

  (when (display-graphic-p)
    (add-hook 'org-mode-hook #'xtr-prettify-org-symbols))
#+end_src

** Archive old stuff
:PROPERTIES:
:CREATED:  [2022-01-06 Thu 15:32]
:END:
:LOGBOOK:
- Refiled on [2022-05-14 Sat 10:28]
:END:

Stolen from http://doc.norang.ca/org-mode.html#Archiving

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function outline-next-heading "outline" ())
    (declare-function org-get-todo-state "org" ())
    (declare-function org-end-of-subtree "org"
                      (&optional invisible-ok to-heading)))
  (defvar org-done-keywords)

  (defun actuator-skip-non-archivable-tasks ()
    "Skip trees that are not available for archiving."
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      ;; consider only tasks with done todo headings as archivable tasks
      (if (member (org-get-todo-state) org-done-keywords)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (daynr (string-to-number (format-time-string "%d" (current-time))))
                 (a-month-ago (* 60 60 24 (+ daynr 1)))
                 (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                 (this-month (format-time-string "%Y-%m-" (current-time)))
                 (subtree-is-current (save-excursion
                                       (forward-line 1)
                                       (and (< (point) subtree-end)
                                            (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
            (if subtree-is-current
                next-headline ;; has a date in this month or last month, so skip it
              nil)) ;; available to archive
        (or next-headline (point-max)))))
#+end_src

** Agenda
#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function org-agenda-todo-yesterday "org-agenda" (&optional arg)))

  (with-eval-after-load 'org-agenda
    (defvar org-agenda-mode-map)
    (define-key org-agenda-mode-map (kbd "T") #'org-agenda-todo-yesterday))
#+end_src

** Open org-links in new window or not
#+begin_src emacs-lisp
  (csetq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                (vm-imap . vm-visit-imap-folder-other-frame)
                                (gnus . org-gnus-no-new-news)
                                (file . find-file)))
#+end_src
** Diary
#+begin_src emacs-lisp
  (csetq diary-file (expand-file-name "diary" org-directory))
  (csetq calendar-date-style 'iso)
  (csetq org-agenda-insert-diary-strategy 'top-level)
  (csetq org-agenda-include-diary t)
#+end_src

#+begin_src emacs-lisp
  (defvar diary-file)
  (unless (file-exists-p diary-file)
    (make-empty-file diary-file t))
#+end_src
** Capture Templates                                              :noexport:
#+begin_src emacs-lisp
  (defvar org-capture-templates)
#+end_src

#+begin_src emacs-lisp
  (csetq org-capture-use-agenda-date t)
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("m" "Media"))
    (add-to-list 'org-capture-templates
                 '("s" "Extra")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("sl" "Log" entry
                   (file+olp+datetree "logbook.org")
                   "* %?"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src


#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("c" "Current TODO" entry
                   (file "inbox.org")
                   "* TODO %? %^G"
                   :empty-lines 1
                   :clock-in t
                   :clock-resume t
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("w" "Work TODO" entry
                   (file "inbox.org")
                   "* TODO %? %^g"
                   :empty-lines 1
                   :clock-in t
                   :clock-resume t
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("t" "Future TODO" entry
                   (file "inbox.org")
                   "* TODO %? %^G%^{Effort}p"
                   :empty-lines 1)))
#+end_src

#+begin_src emacs-lisp
(defun actuator-date-stamp ()
  "Pleasant time string."
      (format-time-string "%A %-e %B %Y %H:%M %Z"))

  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("sj" "Journal" entry
                   (file+olp+datetree "journal.org.gpg")
                   "* %(actuator-date-stamp)\n%?"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("w" "Work" entry
                   (file+headline "sas.org" "Tasks")
                   "* TODO %? %^G"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("sn" "Note" entry
                   (file "inbox.org")
                   "* %?"
                   :empty-lines 1)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("sc" "Changelog" entry
                   (file+olp+datetree "changelog.org")
                   "* %?\n %a"
                   :empty-lines 1
                   :kill-buffer: 1)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("ss" "Inventory" entry
                   (file+headline "inventory.org" "Unapproved")
                   "* %^{Specific item}%^{Purchased_Date|N/A}p%^{Price}p%^{Home_Location}p%^{Purchased_Location}p%^{Provides}p\n%?"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("mb" "Book" entry
                   (file+headline "books.org" "Unread")
                   "* %^{Title}%^{Author}p%^{Year}p%^{Series}p\n%?"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("mm" "Movie" entry
                   (file+headline "movies.org" "Unwatched")
                   "* %^{Title}%^{Year}p%^{Series}p\n%?"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("sd" "Drug" entry
                   (file+olp+datetree "logbook.org")
                   "* %^{Drug} at %<%R> :drug: %^{Dose}p\n"
                   :empty-lines 1
                   :kill-buffer t)))
#+end_src

** Export ics
:PROPERTIES:
:CREATED:  [2022-06-15 Wed 13:01]
:END:
:LOGBOOK:
- Refiled on [2022-06-15 Wed 15:49]
:END:

#+begin_src emacs-lisp :tangle no
  (defvar org-agenda-custom-commands)

  (with-eval-after-load 'org-agenda
    (add-to-list 'org-agenda-custom-commands
                 `("X" "Diary to iCal" agenda ""
                   ((org-agenda-files '("diary.org"))
                    (org-agenda-span 37)
                    (org-agenda-start-day "-7d"))
                   ("~/.cache/calendar.ics"))))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 `("w" "Work" entry
                   (file+olp+datetree "work-journal.org")
                   "* TODO %?"
                   :empty-lines 1
                   :tree-type month
                   :clock-in t)))
#+end_src

#+begin_src emacs-lisp :tangle no
    (defvar xtr-calendar-file "~/.cache/calendar.ics")

    (defun xtr-export-ics ()
      "Make minor adjustments to my exported calendar.

    This is not the best way to do it, but it works and makes me happy."
      (org-batch-store-agenda-views)

      (with-current-buffer (find-file-noselect xtr-calendar-file)
        (goto-char (point-min))
        (while (re-search-forward "OrgMode" nil t)
          (replace-match "Geoff"))
        (goto-char (point-min))
        (while (re-search-forward org-ts-regexp nil t)
          (replace-match ""))
        (goto-char (point-min))
        (while (re-search-forward "DESCRIPTION:–" nil t)
          (replace-match "DESCRIPTION:"))
        (goto-char (point-min))
        (while (re-search-forward "VTODO" nil t)
          (replace-match "VEVENT"))
        (save-buffer)
        (kill-buffer))

      (start-process "Upload ICS" nil "curl" "--user"
               (format "%s:%s"
                       (auth-source-pass-get "user"
                                             "webdav.fastmail.fm")
                       (auth-source-pass-get 'secret
                                             "webdav.fastmail.fm"))
               "-T"
               (expand-file-name xtr-calendar-file)
               (format "%s/share/"
                       (auth-source-pass-get "url"
                                             "webdav.fastmail.fm"))))
  ;;(advice-add #'org-agenda-quit :after #'xtr-export-ics)
#+end_src

#+begin_src shell :tangle no
  emacs -batch -l ~/.config/emacs/init.el -eval "(xtr-export-ics)"
#+end_src

#+begin_src emacs-lisp
  (customize-set-variable 'icalendar-export-sexp-enumerate-all t)
  (customize-set-variable 'org-icalendar-include-sexps t)
  (customize-set-variable 'org-icalendar-include-body nil)

  (eval-when-compile
    (declare-function org-icalendar-combine-agenda-files "ox-icalendar"
                      (&optional async)))

  (defun xtr-create-and-upload-ical ()
    "Generate an icalendar file and upload it to my server."
    (message "Creating ical file...")
    (let ((inhibit-message t))
      (org-icalendar-combine-agenda-files))
    (let ((inhibit-message t))
      (xtr-upload-ical))
    (message "Creating ical file... Done. Uploading file in background."))

  (defvar org-icalendar-combined-agenda-file)

  (defun xtr-upload-ical ()
    "Upload ical file to WebDAV."
    (start-process "Upload .ics to webDAV" nil "curl" "--user"
                   (format "%s:%s"
                           (auth-source-pass-get "user"
                                                 "webdav.fastmail.fm")
                           (auth-source-pass-get 'secret
                                                 "webdav.fastmail.fm"))
                   "-T"
                   (expand-file-name org-icalendar-combined-agenda-file)
                   (format "%s/share/"
                           (auth-source-pass-get "url"
                                                 "webdav.fastmail.fm"))))

  (when (eq system-type 'darwin)
    (advice-add #'org-agenda-quit :after #'xtr-create-and-upload-ical))
#+end_src

#+begin_src emacs-lisp
  (csetq org-icalendar-use-scheduled '(event-if-not-todo))
  (csetq org-icalendar-use-deadline '(event-if-not-todo todo-due))
  (csetq org-icalendar-include-todo nil)
  (csetq org-icalendar-include-sexps t)
  (csetq org-icalendar-store-UID t)
  (csetq org-icalendar-exclude-tags '("habit" "noexport" "weather"))
#+end_src

** BBDB
:PROPERTIES:
:CREATED:  [2022-07-11 Mon 12:57]
:END:

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'bbdb)
  (add-to-list 'package-selected-packages 'bbdb-vcard)
#+end_src

#+begin_src emacs-lisp
  (customize-set-variable 'bbdb-image-path
                          (expand-file-name "data/bbdb-vcard/"
                                            org-directory))
  (customize-set-variable 'bbdb-image 'fl-name)
  (customize-set-variable 'org-icalendar-include-bbdb-anniversaries t)
  (customize-set-variable 'bbdb-file (expand-file-name "data/bbdb.el" org-directory))
#+end_src

** Secure upload details                                             :crypt:
:PROPERTIES:
:CREATED:  [2022-06-30 Thu 15:42]
:ID:       2022-June-30-1552-17494218
:END:

-----BEGIN PGP MESSAGE-----

hQIMA5qpMGzNkOQvAQ//dEyg5pWyw97wwusE6i6/enhi5J+UXkYix5ZQqNHkXZDp
aDssc6mO7ySBGaTsvi7elhhboOujewViWPJqvuHRVDhyBupvhDfxBB9gFEiub5zx
MrBP89G3KTdBgAph2bNn5/IUaSQL4Spi0Ej4s0erEUimA7V9F/oOLxBMY5T+dFdw
CEuOi0oQ/hwqWltCAuFYCzmG2dQbVVEs57r/rlknMehLa09/PLuZGFolDrPEMB4a
1pt9nMDunZFRIdHlRCaZ7B3sDS5t4YA4gGvu6y6t64YSzzCmR3Nz/v9W92WTCTh2
SIdcd9ftiUvStxNROWmhmaTHoQjLgoeRWX1SUsCTzDFDdzmEH1NC/Ihl/netjH4x
mxCDWZIG8nVfuZL9m5tpTsbpDscDTmUIezJvLlwBONRd7ExSBDFpoIbjR1FIppfp
I9bH+UoXVs9atYj48puMvYdSGYnwoIjl5bqXPobuQfWLYhe/g1FQr9+ZOg++qrpO
Zq+R/XlSTQZG5lL48mKcsqvK9QJoNanjW80lfJpmfj2gQYHpne5TrMaB8GR6NWZA
55eUlq2FHwYgxRaFyVYS2hq6oGyk4gwaN6egepJsPxTeuwQq3sjziRbKwZeLR3Rq
BPhpA2ryH1NaOp4y0vo3grkBabibSM2I8VjQxlYfXI7my0quqzNDCs/sgJv1BUXS
wBoBd4c0ZfMK6c3ZOoxURvfKg8j6gImM60ePJpC0D8Ar6+0hTueI0wmpBCGLZESJ
ggyTP4zxlgQCuerUprBxyUiJWAkwlWvQwOprZpdgDCYgxswHlsYJR4kojlkMqrmh
0DBXD7FTEHgaLucU6ccT4ovDrmuciOFrKPs6uepXKj4LJerJL6CUdzuBJYl6MhrG
fsep9QhQeVgdrQ7kE4MmPLCs5RGcPVJDdAIW3vBmFPdKVRl6C+p/cuZbYJlo76TW
2DMu4YhJAG9xyJ6jffDa6nrBb7ssJ6IBed1OKQ==
=8P82
-----END PGP MESSAGE-----

** Calendar

#+begin_src emacs-lisp
  (defun actuator-set-location (location)
    "Set the current LOCATION for Emacs."
    (cond ((string-equal (downcase location) "calgary")
           (csetq calendar-latitude [51 02 north])
           (csetq calendar-longitude [114 03 west])
           (csetq calendar-location-name "Calgary"))
          ((string-equal (downcase location) "st. john's")
           (csetq calendar-latitude [47 28 north])
           (csetq calendar-longitude [52 47 west])
           (csetq calendar-location-name "St. John's"))
          (t
           (error "Bad location set"))))

  (actuator-set-location "Calgary")
#+end_src

#+begin_src emacs-lisp
  (defun actuator-calendar-mode-line-entry (command echo &optional key string)
    "Return a propertized string for `calendar-mode-line-format'.
  COMMAND is a command to run, ECHO is the help-echo text, KEY
  is COMMAND's keybinding, STRING describes the binding.

  This version of this function does not display the keybinding for
  the COMMAND, which was unneeded and hard to theme correctly."
    (propertize (or key
                    (capitalize (format "%s" string)))
                'help-echo (format "mouse-1: %s" echo)
                'mouse-face 'mode-line-highlight
                'keymap (make-mode-line-mouse-map 'mouse-1 command)))

  (advice-add 'calendar-mode-line-entry :override #'actuator-calendar-mode-line-entry)
#+end_src

#+begin_src emacs-lisp
  (csetq calendar-date-style 'iso)
  (csetq calendar-offset -1)
#+end_src

** Org
#+begin_src emacs-lisp
  ;; (defvar org-directory (when (file-exists-p
  ;;                              (expand-file-name "~/org"))
  ;;                         (expand-file-name "~/org")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (declare-function org-save-all-org-buffers "org" nil)

  (add-function :after after-focus-change-function
                #'actuator-org-save-all-org-buffers)

  (defun actuator-org-save-all-org-buffers ()
    "Wrapper to check for function before running it."

    (when (fboundp 'org-save-all-org-buffers)
      (org-save-all-org-buffers)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-id))
  (csetq org-id-locations-file (expand-file-name "org-id-locations.el" user-emacs-directory))
  (csetq org-id-track-globally t)
#+end_src

#+begin_src emacs-lisp
  (defvar org-mode-map)
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c d") #'org-decrypt-entry))
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function org-clock-out "org-clock"
                      (&optional
                       switch-to-state fail-quietly at-time)))
  (global-set-key (kbd "C-c C-x C-o") #'org-clock-out)
#+end_src

The first item "+TODO=\"PROJECT\"" tells Org to look for a TODO keyword called "PROJECT" to match projects. The escaped quotes are needed.

#+begin_src emacs-lisp :tangle no
    (csetq org-stuck-projects
           '("+TODO=\"PROJECT\"" ("TODO") nil ""))
#+end_src

#+begin_src emacs-lisp
    (csetq org-stuck-projects
           '("+project/-SOMEDAY-DONE" ("TODO") nil ""))
#+end_src

#+begin_src emacs-lisp
  ;;(csetq org-archive-save-context-info '(time file olpath todo))
#+end_src

#+begin_src emacs-lisp
  (csetq org-publish-timestamp-directory (expand-file-name "org-timestamps/" user-emacs-directory))
#+end_src

#+begin_src emacs-lisp
  (defvar org-agenda-custom-commands)

  (eval-when-compile
    (declare-function org-agenda-skip-entry-if "org-agenda"
                      (&rest conditions)))

  (with-eval-after-load 'org-agenda
    (add-to-list 'org-agenda-custom-commands
                 '("u" "Unscheduled TODOs"
                   ((todo ""
                          ((org-agenda-overriding-header
                            "\nUnscheduled TODOs")
                           (org-agenda-skip-function
                            '(org-agenda-skip-entry-if
                              'timestamp 'todo '("WAITING" "SOMEDAY" "PROJECT" "DONE" "CANCELLED")))
                           (org-agenda-sorting-strategy '((todo tsia-up alpha-up))))))))

    (add-to-list 'org-agenda-custom-commands
                 '("b" "Purchase List" tags "+buy"
                   ((org-overriding-columns-format "%20ITEM %PRICE")
                    (org-agenda-view-columns-initially t))))

    (add-to-list 'org-agenda-custom-commands
                 '("v" . "Recurring Views"))

    (add-to-list 'org-agenda-custom-commands
                 '("vd" "Daily View"
                   ((agenda "")
                    (todo ""
                          ((org-agenda-skip-function #'xtr-org-agenda-priority-a)
                           (org-agenda-overriding-header "Today's Priority #A
              tasks: "))))
                   ((org-agenda-span 'day))))

    (defun xtr-org-agenda-priority-a ()
      "Show Priority A items."
      (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]"))

    (add-to-list 'org-agenda-custom-commands
                 '("vw" "Weekly View"
                   ((agenda "")
                    (todo "WAITING")
                    (todo "PROJECT")
                    (org-agenda-list-stuck-projects))
                   ((org-agenda-span 7)
                    (org-agenda-start-day "+0d")
                    (org-agenda-start-on-weekday nil)
                    (org-agenda-start-with-log-mode nil)
                    (org-agenda-start-with-clockreport-mode nil)
                    (org-agenda-use-time-grid nil)
                    (org-habit-show-habits nil))))

    (add-to-list 'org-agenda-custom-commands
                 '("vm" "Monthly View"
                   ((todo "SOMEDAY"))))

    (add-to-list 'org-agenda-custom-commands
                 '("A" "Candidate trees for archiving" tags "-NOARCHIVE"
                   ((org-agenda-overriding-header "Candidate tasks for archiving")
                    (org-agenda-skip-function 'actuator-skip-non-archivable-tasks))))

    ;;(setq org-agenda-custom-commands nil)
    (add-to-list 'org-agenda-custom-commands
                 '("vc" "Weekly Calendar"
                   ((agenda ""))
                   ((org-agenda-use-time-grid nil)
                    (org-agenda-start-day "sun")
                    (org-agenda-start-on-weekday 1)
                    (org-habit-show-habits nil)
                    (org-agenda-remove-tags t)
                    (org-agenda-files '("~/org/diary.org"))
                    (org-agenda-skip-function '(org-agenda-skip-entry-if
                                                'scheduled 'deadline 'todo '("TODO ""WAITING" "SOMEDAY" "PROJECT" "DONE" "CANCELLED")))
                    (org-agenda-span 7))))


    ;; (add-to-list 'org-agenda-custom-commands
    ;;              '("p" "Daily Personal Mail"
    ;;                ((agenda "")
    ;;                 (todo "TODO"))
    ;;                ((org-agenda-span 'day)
    ;;                 (org-agenda-remove-tags t)
    ;;                 (org-habit-preceding-days 7)
    ;;                 (org-habit-following-days 3)
    ;;                 (org-agenda-block-separator nil)
    ;;                 (org-agenda-show-current-time-in-grid nil)
    ;;                 (org-agenda-start-with-log-mode nil)
    ;;                 (org-agenda-start-with-clockreport-mode nil))
    ;;                ("~/agenda.html")))
    )
#+end_src

  #+begin_src emacs-lisp
    (with-eval-after-load 'org-agenda
        (add-to-list 'org-agenda-custom-commands
                     '("w" "Work"
                       ((agenda ""
                                ((org-agenda-start-on-weekday 1)
                                 (org-agenda-span 'week)
                                 (org-agenda-overriding-header "Agenda")
                                 ))
                        (todo "TODO"
                              ((org-agenda-overriding-header
                                "Next tasks")))
                        (tags "+ongoing"
                              ((org-agenda-overriding-header
                                "Ongoing tasks")))
                        (todo "WAITING"
                              ((org-agenda-overriding-header
                                "Waiting tasks"))))
                       ((org-agenda-files '("work-journal.org"))
                        (org-agenda-use-time-grid nil)))))
  #+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (add-to-list 'org-agenda-custom-commands
                 '("p" "Performance Review"
                   ((tags "-review+TODO=\"DONE\"+CLOSED>=\"<-6m>\""
                          ((org-agenda-overriding-header "Tasks finished in last six months")))
                    (tags "+review"
                          ((org-agenda-overriding-header "Performance review"))))
                   ((org-agenda-files '("work-journal.org"))
                    (org-agenda-use-time-grid nil)))))
#+end_src

#+begin_src emacs-lisp
  (csetq org-fold-catch-invisible-edits 'smart)
  (csetq org-agenda-files (expand-file-name "agenda" org-directory))
  (csetq org-use-fast-todo-selection 'expert)
  (csetq org-todo-keywords
         '((sequence "TODO(t)" "WAITING(w@)" "SOMEDAY(s!)" "PROJECT(p)" "|" "DONE(d!)" "CANCELLED(c@)")))
  (csetq org-agenda-window-setup 'current-window)
  (csetq org-agenda-restore-windows-after-quit t)
  (csetq org-agenda-span 7)
  (csetq org-agenda-todo-list-sublevels t)
  ;;(csetq org-agenda-sticky t)
  (csetq org-agenda-dim-blocked-tasks t)
  (csetq org-list-indent-offset 1)
  (defvar org-outline-regexp)
  (csetq org-use-speed-commands
         (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**" 5))))
  (csetq org-footnote-auto-adjust t)
  (csetq org-footnote-define-inline t)
  (csetq org-footnote-auto-label t)
  (csetq org-confirm-babel-evaluate nil)
  (csetq org-babel-results-keyword "results")
  (csetq org-edit-src-persistent-message nil)
  (csetq org-src-tab-acts-natively t)
  (csetq org-src-window-setup 'current-window)
  (csetq org-src-ask-before-returning-to-edit-buffer nil)
  (csetq org-src-fontify-natively t)
  (csetq org-tags-exclude-from-inheritance '("crypt"))
  (csetq org-crypt-key "geoff@mac.into.sh")
  (csetq org-agenda-window-setup 'current-window)
  (csetq org-habit-show-habits-only-for-today t)
  (csetq org-capture-bookmark t)
  (csetq org-hide-macro-markers t)
  (csetq org-reverse-note-order t)
  (csetq org-agenda-insert-diary-extract-time t)
  (csetq org-agenda-start-with-follow-mode nil)
  (csetq org-agenda-follow-indirect t)
  (csetq org-agenda-skip-scheduled-if-done t)
  (csetq org-agenda-skip-deadline-if-done t)
  (csetq org-agenda-skip-additional-timestamps-same-entry t)
  (csetq org-agenda-skip-timestamp-if-done nil)
  (csetq org-agenda-time-leading-zero t)
  (csetq org-agenda-current-time-string
         "Now - - - - - - -")
  (csetq org-agenda-time-grid
         '((daily today remove-match)
           (0600 0700 0800 0900 1000 1100
                 1200 1300 1400 1500 1600
                 1700 1800 1900 2000 2100)
           " ....." "-----------------"))
  (csetq org-agenda-diary-file (expand-file-name "diary.org" org-directory))
#+end_src

https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/

#+begin_src emacs-lisp
    (defun actuator-opened-buffer-files ()
      "Return the list of files currently opened in Emacs."
      (delq nil
            (mapcar (lambda (x)
                      (if (and (buffer-file-name x)
                               (string-match "\\.org$"
                                             (buffer-file-name x)))
                          (buffer-file-name x)))
                    (buffer-list))))

  (defun actuator-org-refile-candidates ()
    "Collect all the `org-mode' files in the `actuator-directory'.

  Currently it only collects files that start with a lowercase
  letter, which is probably the wrong way to go about it, but I
  don't have any files that start with uppercase or numbers (this
  is on purpose) and that eliminates adding any autosave, backup or
  other weird files that might temporarily get caught by the
  refiler that I don't want. This would be an easy fix, but I'm not
  doing it."
     (when (ignore-errors (file-exists-p actuator-directory))
         (directory-files actuator-directory t "^[a-z].*\\.org$")))

  (csetq org-refile-targets '((org-agenda-files               :maxlevel . 9)
                              ;;(actuator-opened-buffer-files   :maxlevel . 9)
                              (actuator-org-refile-candidates :maxlevel . 9)))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-after-refile-insert-hook #'save-buffer)
  (csetq org-refile-use-cache nil) ;; Change back if slow?
  (csetq org-refile-allow-creating-parent-nodes 'confirm)
  (csetq org-outline-path-complete-in-steps nil)
  (csetq org-refile-use-outline-path 'file)
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-start-with-log-mode nil) ;;'(closed clock)
  (csetq org-agenda-start-with-clockreport-mode nil)
  (csetq org-agenda-columns-add-appointments-to-effort-sum t)
#+end_src

#+begin_src emacs-lisp
  (when (locate-library "org-contrib")
    (require 'org-checklist)
    (eval-when-compile
      (declare-function ox-extras-activate "ext:ox-extra"))
    (with-eval-after-load 'ox
      (require 'ox-extra)
      (ox-extras-activate '(ignore-headlines))))
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function org-agenda-earlier "org-agenda" (ARG))
    (declare-function org-agenda-later   "org-agenda" (ARG)))
  (with-eval-after-load 'org-agenda
    (defvar org-agenda-mode-map)
    (define-key org-agenda-mode-map (kbd "<mouse-8>") #'org-agenda-earlier)
    (define-key org-agenda-mode-map (kbd "<mouse-9>") #'org-agenda-later))
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-todo-ignore-scheduled 'future)
  (csetq org-agenda-todo-ignore-deadlines 'far)
  (csetq org-agenda-todo-ignore-timestamp 'future)
  (csetq org-agenda-todo-ignore-with-date nil)
  (csetq org-agenda-tags-todo-honor-ignore-options t)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-src-line-wrap-setup ()
    "Set truncate-lines-mode in org-source-editing buffers."
    (setq-local truncate-lines t))
  (add-hook 'org-src-mode-hook #'actuator-org-src-line-wrap-setup)
#+end_src

#+begin_src emacs-lisp
  (defvar org-default-properties)
  (defvar org-global-properties)
  (eval-when-compile
    (declare-function org-indent-mode "org-indent"))

  (with-eval-after-load 'org
    (add-to-list 'org-default-properties "DIR")
    (add-to-list 'org-default-properties "header-args")
    (add-to-list 'org-global-properties
               '("Effort_ALL". "0 0:10 0:30 0:45 1:00 2:00 3:00 4:00"))
    (require 'org-habit)
    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (org-indent-mode +1)
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (calc      . t)
                                   (sqlite    . t)
                                   (shell     . t))))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'org)
    (add-to-list 'package-selected-packages 'org-contrib))
  (csetq org-babel-default-header-args '((:mkdirp   . "yes")
                                         (:comments . "link")
                                         (:session  . "none")
                                         (:results  . "replace")
                                         (:exports  . "code")
                                         (:cache    . "no")
                                         (:noweb    . "no")
                                         (:hlines   . "no")
                                         (:tangle   . "no")))

  (defun actuator-update-all-dynamic-blocks ()
    "Update all dynamic blocks in an Org-mode document.

    Should only be called when in Org-mode, but also it shouldn't
    cause an error if not."

    (require 'org)
    (require 'org-table)
    (eval-when-compile
      (declare-function org-dblock-update "org")
      (declare-function org-table-map-tables "org-table"))
    (org-table-map-tables 'org-table-align 'quietly)
    (org-dblock-update 'arg))

  (defun actuator-org-mode-setup ()
    "Set basic defaults in Org-mode that aren't variables."

    (electric-indent-local-mode -1)
    (visual-line-mode)
    (add-hook 'before-save-hook
              #'actuator-update-all-dynamic-blocks nil
              'local))

  (add-hook 'org-mode-hook #'actuator-org-mode-setup)

  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (eval-when-compile
    (declare-function org-store-link "ol"))
  (global-set-key (kbd "C-c l") #'org-store-link)

  (csetq org-startup-folded 'content)
  (csetq org-ellipsis " →")
  (csetq org-startup-align-all-tables t)
  (csetq org-startup-shrink-all-tables t)
  (csetq org-startup-with-inline-images t)
  (csetq org-startup-indented t)
  (csetq org-hide-leading-stars t)
  (csetq org-pretty-entities-include-sub-superscripts t)
  (csetq org-hide-emphasis-markers t)
  (csetq org-image-actual-width 300)
  (csetq org-fontify-done-headline t)
  (csetq org-structure-template-alist
         '(("e" . "src emacs-lisp")
           ("s" . "src shell")
           ("c" . "src conf")
           ("C" . "comment")
           ("h" . "export html")
           ("q" . "quote")
           ("v" . "verse")))
  (csetq org-log-done 'time)
  (csetq org-log-into-drawer t)
  (csetq org-log-reschedule 'time)
  (csetq org-log-refile nil)
  (csetq org-log-redeadline 'time)
  (csetq org-closed-keep-when-no-todo t)
  (csetq org-enforce-todo-dependencies t)
  (csetq org-enforce-todo-checkbox-dependencies nil)
  (csetq org-complete-tags-always-offer-all-agenda-tags t)
  (csetq org-clone-delete-id t)
  ;;(csetq org-tags-column -60)
  (csetq org-catch-invisible-edits 'show-and-error)
  (csetq org-insert-heading-respect-content nil)
  (csetq org-ctrl-k-protect-subtree t)
  (csetq org-M-RET-may-split-line '((default . nil)))
  (csetq org-special-ctrl-k t)
  (csetq org-special-ctrl-a/e t)
  (csetq org-blank-before-new-entry '((heading         . t)
                                      (plain-list-item . nil)))
  (customize-set-variable 'org-use-property-inheritance t)

  (defvar org-modules)

  (with-eval-after-load 'org
    (delete 'ol-doi org-modules)
    (delete 'ol-w3m org-modules)
    (delete 'ol-bibtex org-modules)
    (delete 'ol-irc org-modules)
    (delete 'ol-mhe org-modules)
    (delete 'ol-rmail org-modules)
    (delete 'ol-gnus org-modules))
#+end_src

#+begin_src emacs-lisp
  (csetq org-tag-persistent-alist '(("noexport")
                                    ("ignore")
                                    ("crypt")))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-capture-turn-off-header-line ()
    "Disable the header-line in a local mode.

  This is used to disable the help line in `org-capture' buffers as
  there's no variable that will do it."

    (setq-local header-line-format nil))
  (add-hook 'org-capture-mode-hook #'actuator-org-capture-turn-off-header-line)
#+end_src

** Holidays
:PROPERTIES:
:CATEGORY: Holiday
:END:
#+begin_src emacs-lisp
  (csetq calendar-chinese-all-holidays-flag nil)
  (csetq calendar-hebrew-all-holidays-flag nil)
  (csetq calendar-christian-all-holidays-flag nil)
  (csetq calendar-islamic-all-holidays-flag t)
  (csetq calendar-bahai-all-holidays-flag nil)
  (csetq holiday-bahai-holidays nil)
#+end_src

#+begin_src emacs-lisp
  (defvar holiday-american-holidays
    '((holiday-float 1 1 3  "Martin Luther King Day (USA)")
      (holiday-float 2 1 3  "President's Day (USA)")
      (holiday-float 5 1 -1 "Memorial Day (USA)")
      (holiday-fixed 6 14   "Flag Day (USA)")
      (holiday-fixed 7 4    "Independence Day (USA)")
      (holiday-float 10 1 2 "Columbus Day (USA)")
      (holiday-fixed 11 11  "Veteran's Day (USA)")
      (holiday-float 11 4 4 "Thanksgiving (USA)"))
    "General holidays for the United States.
  See the documentation for `calendar-holidays' for details.")

  (csetq holiday-general-holidays
         '((holiday-fixed 1 1   "New Year's Day")
           (holiday-fixed 2 2   "Groundhog Day")
           (holiday-fixed 2 14  "Valentine's Day")
           (holiday-fixed 3 17  "St. Patrick's Day")
           (holiday-fixed 4 1   "April Fools' Day")
           (holiday-float 5 0 2 "Mother's Day")
           (holiday-float 6 0 3 "Father's Day")
           (holiday-fixed 10 31 "Halloween")))

  (defvar holiday-canadian-holidays
    '((holiday-fixed 7 1       "Canada Day")
      (holiday-float 9 1 1     "Labour Day")
      (holiday-float 5 1 -1    "Victoria Day" 24)
      (holiday-float 6 1 0     "August Civic Holiday")
      (holiday-fixed 9 30      "Orange Shirt Day")
      (holiday-float 10 1 2    "Thanksgiving")
      (holiday-fixed 11 11     "Remembrance Day")
      (holiday-fixed 12 26     "Boxing Day")
      (holiday-float 2 1 3     "Family Day"))
    "General holidays for Canada.
  See the documentation for `calendar-holidays' for details.")

  (csetq holiday-other-holidays (append holiday-canadian-holidays
                                        holiday-american-holidays))
#+end_src
** Attach
:PROPERTIES:
:ID:       7542A761-77AB-4B42-B25E-33BFE7A45FE9
:END:

#+begin_src emacs-lisp
  (csetq org-attach-store-link-p t)
  (csetq org-attach-expert nil)
  (csetq org-attach-dir-relative t)
  (csetq org-attach-preferred-new-method 'ask)
  (csetq org-attach-method 'mv)
  (csetq org-attach-auto-tag "attach")
  (csetq org-attach-archive-delete 'query)
#+end_src

** Clocking

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-clock-persistence-insinuate))
  ;;(csetq org-clock-into-drawer "CLOCKING")
  (csetq org-clock-persist t)
  (csetq org-clock-out-remove-zero-time-clocks t)
  (csetq org-clock-mode-line-total 'auto)
  (customize-set-variable 'org-clock-rounding-minutes 5)
#+end_src

#+begin_src emacs-lisp
  (customize-set-variable 'org-clock-history-length 35)

  (declare-function org-clock-in "org-clock" (&arg))

  (defun xtr-org-clock-list ()
    "Bring up `org-clock-in' menu."
    (interactive)
    (require 'org-clock)
    (funcall #'org-clock-in '(4)))

  (global-set-key (kbd "C-c b") #'xtr-org-clock-list)
#+end_src

** World Time
#+begin_src emacs-lisp
  (csetq world-clock-list '(("America/New_York" "New York")
                            ("Europe/London"    "London")
                            ("Australia/Sydney" "Sydney")
                            ("America/Edmonton" "Calgary")
                            ("America/St_Johns" "St. John's")))
#+end_src

** Org Randomnote
#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'package
   (add-to-list 'package-selected-packages 'org-randomnote))
#+end_src

** org-open-at-point-global
:PROPERTIES:
:CREATED:  [2022-05-05 Thu 11:02]
:END:
:LOGBOOK:
- Refiled on [2022-05-11 Wed 20:18]
:END:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c o") #'org-open-at-point-global)
#+end_src

** HTMLize
#+begin_src emacs-lisp
  (with-eval-after-load 'package
   (add-to-list 'package-selected-packages 'htmlize))
#+end_src

** Cliplink

#+begin_src emacs-lisp
  (defvar org-capture-templates)
  (with-eval-after-load 'package
   (add-to-list 'package-selected-packages 'org-cliplink))
  (eval-when-compile
    (declare-function org-cliplink "org-cliplink"))
  (global-set-key (kbd "C-x p i") #'org-cliplink)
  (with-eval-after-load 'org-capture

    (when (locate-library "org-cliplink")
      (add-to-list 'org-capture-templates
                   '("sb" "Bookmark" entry
                     (file "bookmark.org")
                     "* %(org-cliplink-capture) %^g\n%?"
                     :prepend
                     :empty-lines 1
                     :kill-buffer))))
#+end_src

** Org download

#+begin_src emacs-lisp
  (with-eval-after-load 'package
   (add-to-list 'package-selected-packages 'org-download))

  (when (locate-library "org-download")
    (with-eval-after-load 'org
      (require 'org-download)))

  (csetq org-download-method 'attach)
  (csetq org-download-annotate-function nil)
  (csetq org-download-timestamp "")
#+end_src

** Org-msg
[2021-07-29 Thu 13:03]

#+begin_src emacs-lisp
  (with-eval-after-load 'package
   (add-to-list 'package-selected-packages 'org-msg))

  (csetq org-msg-default-alternatives '((new           . (text html))
                                        (reply-to-html . (text html))
                                        (reply-to-text . (text))))
  (csetq org-msg-posting-style nil)
  (csetq org-msg-greeting-fmt "\n%s,\n\n")
  (csetq org-msg-greeting-name-limit 3)
  (csetq org-msg-convert-citation t)
  (csetq mail-user-agent 'mu4e-user-agent)
  (csetq org-msg-signature "#+begin_signature\n-- \nGeoff MacIntosh.\n#+end_signature")

  (eval-when-compile
    (declare-function org-msg-mode "ext:org-msg" (&optional arg)))

  (when (locate-library "org-msg")
    (with-eval-after-load 'mu4e
      (org-msg-mode)))
#+end_src
** Org publish org

#+begin_src emacs-lisp
  (defvar org-export-filter-timestamp-functions)

  (defun actuator-filter-timestamp (string backend _comm)
    "Remove <> around time-stamps.
  I actually don't know what STRING is. BACKEND can be some version
  of html or latex."
    (pcase backend
      ((or `jekyll `html `md)
       (replace-regexp-in-string "&[lg]t;" "" string))
      (`latex
       (replace-regexp-in-string "[<>]" "" string))))

  (with-eval-after-load 'ox
    (require 'ox-icalendar)
    (add-to-list 'org-export-filter-timestamp-functions
                 #'actuator-filter-timestamp))
#+end_src

#+begin_src emacs-lisp
    (defvar actuator-org-html-head
      "<link rel='stylesheet' href='css/site.css' type='text/css'/>")

    (defvar actuator-org-html-preamble
      "<ul>
    <li><a href='/'>Home</a></li>
    </ul>")

    (defvar actuator-org-html-postamble
      "Last updated %C. Built with %c. (%v HTML).")
#+end_src

#+begin_src emacs-lisp
(defvar org-publish-project-alist)
  (with-eval-after-load
   'ox-publish
   (add-to-list
    'org-publish-project-alist
    `("org-content"
      :base-directory ,org-directory
      :base-extension "org"
      ;;:html-link-home "/"
      ;;:html-link-up nil
      :publishing-directory "~/.cache/org-publish/"
      :publishing-function org-html-publish-to-html
      :with-author t
      :with-creator nil
      :with-date t
      :with-title t
      :section-numbers nil
      :with-drawers t
      :with-sub-superscript t
      :html-viewport nil
      :recursive nil
      :with-toc nil
      :with-broken-links mark
      :html-doctype "html5"
      :html-html5-fancy t
      :html-head-extra nil
      :html-head-include-default-style nil
      :html-head-include-scripts nil
      :html-head ,actuator-org-html-head
      :html-preamble ,actuator-org-html-preamble
      :html-postamble ,actuator-org-html-postamble
      :sitemap-title "Sitemap"
      :sitemap-style list
      :sitemap-filename "sitemap.org"
      ;;:sitemap-sort-files anti-chronologically
      :auto-sitemap t
      :makeindex t)))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load
      'ox-publish
    (add-to-list 'org-publish-project-alist
                 `("actuator-to-org"
                   :base-directory ,actuator-directory
                   :base-extension "org"
                   :publishing-directory "~/.cache/org-publish-actuator"
                   :publishing-function org-org-publish-to-org
                   :with-author nil
                   :with-creator nil
                   :with-date t
                   :with-title t
                   :section-numbers t
                   :with-drawers nil
                   :with-toc t
                   :exclude-tags "noexport"
                   :with-tasks nil
                   :with-todo-keywords nil
                   :with-properties nil
                   :with-planning nil
                   :with-inlinetasks nil
                   )))
#+end_src

#+begin_src emacs-lisp
  (defvar org-export-filter-link-functions)
  (defun actuator-filter-local-links (link backend _info)
    "Filter to convert all the forms of /index.html to /.

  Takes LINK and BACKEND as args."
    (require 'ox)
    (eval-when-compile
      (declare-function org-export-derived-backend-p "ox"))
    (if (org-export-derived-backend-p backend 'html)
        (replace-regexp-in-string "/index.html" "/" link)))
  (with-eval-after-load
      'ox

    (add-to-list 'org-export-filter-link-functions 'actuator-filter-local-links))
#+end_src

** Org agenda sunrise/set
[2021-06-11 Fri 20:18]

#+begin_src emacs-lisp
  (defun diary-sunrise ()
    "Display sunrise at the correct time in `org-agenda'."
    (eval-when-compile
      (declare-function diary-sunrise-sunset "solar"))
    (let ((dss (diary-sunrise-sunset)))
      (with-temp-buffer
        (insert dss)
        (goto-char (point-min))
        (while (re-search-forward " ([^)]*)" nil t)
          (replace-match "" nil nil))
        (goto-char (point-min))
        (search-forward ",")
        (buffer-substring (point-min) (match-beginning 0)))))

  (defun diary-sunset ()
    "Display sunset at the correct time in `org-agenda'."
    (let ((dss (diary-sunrise-sunset))
          start end)
      (with-temp-buffer
        (insert dss)
        (goto-char (point-min))
        (while (re-search-forward " ([^)]*)" nil t)
          (replace-match "" nil nil))
        (goto-char (point-min))
        (search-forward ", ")
        (setq start (match-end 0))
        (search-forward " at")
        (setq end (match-beginning 0))
        (goto-char start)
        (capitalize-word 1)
        (buffer-substring start end))))
#+end_src

#+begin_src emacs-lisp
  (defun diary-daylight ()
     "Insert the current amount of daylight for `org-agenda'."
       (with-temp-buffer
         (insert (diary-sunrise-sunset))
         (goto-char (point-min))
         (while (re-search-forward "^.*(" nil t)
           (replace-match "" nil nil))
         (goto-char (point-min))
         (while (re-search-forward " .*)$" nil t)
           (replace-match "" nil nil))
         (goto-char (point-min))
         (while (re-search-forward ":" nil t)
           (replace-match " hours "))
         (goto-char (point-min))
         (insert "Daylight lasts for ")
         (goto-char (point-max))
         (insert " minutes")
         (buffer-substring (point-min) (point-max))))
#+end_src

** Appt - Appointment Notifications
:PROPERTIES:
:CREATED:  [2022-01-06 Thu 15:15]
:END:

Appt can connect with org-mode to grab all the events for the day and issue alerts.

#+begin_src emacs-lisp
  (csetq appt-display-mode-line nil)
  (csetq appt-message-warning-time 15)
  (csetq appt-display-interval 5)
  (csetq appt-display-format 'window)
  (csetq appt-disp-window-function #'actuator-appt-notify)
#+end_src

I'm using a custom alert function so that I can use the system's notification system instead of only internal Emacs features. This way I can use it as either a wrapper or a complete replacement.

#+begin_src emacs-lisp
  (defun actuator-appt-notify (minutes-until _current-time message)
    "An alternative `appt-disp-window-function' to show an alert.

   This function accepts three arguments, MINUTES-UNTIL, which
   should be an integer number of minutes until the event occurs,
   the CURRENT-TIME which is discarded, and MESSAGE, which is the
   name of the TODO item that is upcoming."
    (actuator-notify (format "Appointment in %s minutes" minutes-until) message))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-agenda-to-appt-refresh ()
    "Run `org-agenda-to-appt' with refresh.

   This (I believe) collects the appointments scheduled for the
   current day, so it is wise to run this at least daily to update
   the list."
    (when (file-exists-p diary-file)
      (let ((inhibit-message t))
        (org-agenda-to-appt t))))

#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-agenda-to-appt-timer ()
    "Run `org-agenda-to-appt' whenever there is an idle period."
    (run-with-idle-timer 5 nil #'actuator-org-agenda-to-appt-refresh))

  (run-at-time t (* 30 60) #'actuator-org-agenda-to-appt-timer)
  (advice-add #'actuator-org-agenda-to-appt-refresh :after #'org-agenda-to-appt)
  (appt-activate +1)
  (require 'notifications)
#+end_src

** Org timer
[2021-08-11 Wed 14:58]

#+begin_src emacs-lisp
  (csetq org-clock-sound (expand-file-name "etc/DeusExSounds0437.wav" org-directory))
  (csetq org-timer-default-timer 25)
#+end_src

** Org archive
#+begin_src emacs-lisp
  (csetq org-archive-mark-done "ARCHIVED")
  ;;(csetq org-archive-location "archive/%s_archive::")
#+end_src

#+begin_src emacs-lisp
  (csetq org-agenda-text-search-extra-files
         (directory-files
          org-directory t "^[^.#].*\\.\\(org$\\|org_archive$\\)"))
#+end_src

** Automate org-mode backup

Git doesn't work super great for stuff like personal Org files. I want backups and historical records of all my screwups, but I don't want to work for it. This system uses Borg to back up my ELPA diretory every time I am about to upgrade or change packages and the Org directory every 15 minutes. I have to prune the backups to make things not get too absurd, but it's all good.

First thing is to set up some variables incase I need to change things. Not really sure if this means that the system will be portable to other backup systems, but it might be?

#+begin_src emacs-lisp
  (defvar actuator-org-backup-timestamp 0
    "Last time a backup was performed.")

  (defvar actuator-backup-command
    (concat "borg create "
            "--compression zstd,3 "
            "--exclude \"**.DS_Store\" "
            "--exclude \"**#*#\"")
    "The shell command used to create additional backups with flags.
  In my case, I want to have a little compression and exclude a
  few things.")

  (defvar actuator-backup-create-command "borg init -e=none"
    "The shell command used to create a new backup repo if needed.")

  (defvar actuator-backup-dir "~/Backup/"
    "Location for the backup directories to be stored.
  Must exist. Needs a trailing slash.")
#+end_src

Because ELPA doesn't really work on saving or files in the usual way, I'm using a wrapper function to make sure things get backed up before they're changed. Not really the best situation but oh well.

#+begin_src emacs-lisp
  (defun actuator-backup-elpa ()
    "Wrapper function to backup ELPA directory before making a change."
    (actuator-backup package-user-dir))


  (when (executable-find "borg")
    (add-hook 'package-menu-mode-hook #'actuator-backup-elpa))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-backup (path)
    "Backup PATH to `actuator-backup-dir' using `borg'.
  If the backup repo hasn't been created, this will initialize it
  first and then make a backup. Should be fast enough to not be an
  issue to run every save."
    (let* ((time-stamp (format-time-string "%FT%H%M%S%z"))
           (backup-name (string-trim path "^.*/" "/$"))
           (backup-path
            (expand-file-name backup-name actuator-backup-dir)))

      (unless (file-exists-p backup-path)
        (call-process-shell-command
         (concat actuator-backup-create-command " "
                 backup-path)
         nil nil nil)
        (message (format "Creating backup directory: %s"
                         backup-path)))

      (call-process-shell-command (concat
                                   actuator-backup-command " "
                                   backup-path "::"
                                   time-stamp " "
                                   path)
                                  nil nil nil)
      (message (format "Backing up: %s" path))))
#+end_src

#+begin_src emacs-lisp
  (defvar org-directory)
  (defun actuator-backup-org-dir-on-save ()
    "Backs up the org directory.
  Can be added to a global `after-save-hook' because it checks before
  backing up."
    (when (and (string-equal default-directory
                             (file-name-as-directory
                              (expand-file-name org-directory)))
               (time-less-p
                (time-add actuator-org-backup-timestamp (* 15 60)) nil))
      (actuator-backup org-directory)
      (setq actuator-org-backup-timestamp (current-time))))

  (when (executable-find "borg")
    (add-hook 'after-save-hook #'actuator-backup-org-dir-on-save))

  (add-to-list 'savehist-additional-variables
               'actuator-org-backup-timestamp)
#+end_src

** Org path-independent link
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 14:19]
:END:

This is legit cool, stolen completely from [[https://karl-voit.at/2022/02/10/lfile/][Karl Voit]]. I use "locate" as the link type because I like the way this looks. It works very well if you link to the exact file name. HTML export works no issue.

#+begin_src emacs-lisp
  (defun actuator-handle-locate-link (querystring)
    "Locate QUERYSTRING."
    (let ((queryresults
           (split-string
            (trim-space-around
             (shell-command-to-string
              (concat "locate \"" querystring "\" " )))
            "\n" t)))
      (cond
       ((= 0 (length queryresults))
        (message "No results found for query: %s" querystring))
       ((= 1 (length queryresults))
        (open-in-external-app (car queryresults)))
       (t
        (message "Multiple results found for query: %s" querystring)))))

  (defun trim-space-around (string)
    "Trim spaces at the beginning and end of a STRING."
    (let ((regex "\\`[ \n\t\r]*\\(\\(.\\|\n\\)*?\\)[ \n\t\r]*\\'"))
      (string-match regex string)
      (match-string 1 string)))

    (declare-function org-link-set-parameters "ol" (type &rest parameters))
    (with-eval-after-load 'org
      (org-link-set-parameters
       "locate"
       :follow (lambda (filename) (actuator-handle-locate-link filename))
       :help-echo "Opens the file located via \"locate\" with your default application"))
#+end_src

#+begin_src emacs-lisp
  (declare-function dired-get-marked-files "dired"
                     (&optional LOCALP ARG FILTER
                     DISTINGUISH-ONE-MARKED ERROR))
  (declare-function w32-shell-execute "w32fns.c" t t)

   (defun open-in-external-app (&optional file)
     "Open the current file or dired marked files in external app.

   The app is chosen from your OS's preference."
     (interactive)
     (let (do-it
            (file-list
             (cond
              ((string-equal major-mode "dired-mode") (dired-get-marked-files))
              ((not file) (list (buffer-file-name)))
              (file (list file)))))

       (setq do-it (if (<= (length file-list) 5)
                      t
                    (y-or-n-p "Open more than 5 files? ")))

       (when do-it
         (cond
          ((eq system-type 'windows-nt)
           (mapc (lambda (file-path)
                   (w32-shell-execute "open"
                                      (replace-regexp-in-string "/" "\\" file-path t t)))
                 file-list))
          ((eq system-type 'darwin)
           (mapc (lambda (file-path)
                   (shell-command (format "open \"%s\"" file-path)))
                 file-list))
          ((eq system-type 'gnu/linux)
           (mapc (lambda (file-path)
                   (let ((process-connection-type nil)) (start-process "" nil "xdg-open" file-path)))
                 file-list))))))
#+end_src

#+results:
: open-in-external-app

** Org-contacts
#+begin_src emacs-lisp
  (when (locate-library "org-contacts")
    (with-eval-after-load 'org
    (require 'org-contacts)))
  (csetq org-contacts-files '("contacts.org"))
#+end_src

** Org links
:PROPERTIES:
:CREATED: [2022-04-10 Sun 08:50]
:END:

#+begin_src emacs-lisp
  (defvar org-link-parameters)
  (with-eval-after-load 'org
    (setq org-link-parameters (delq (assoc "file+sys" org-link-parameters) org-link-parameters))
    (setq org-link-parameters (delq (assoc "file+emacs" org-link-parameters) org-link-parameters))
    (setq org-link-parameters (delq (assoc "rmail" org-link-parameters) org-link-parameters))
    (setq org-link-parameters (delq (assoc "news" org-link-parameters) org-link-parameters))
    ;;(setq org-link-parameters (delq (assoc "bbdb" org-link-parameters) org-link-parameters))
    (setq org-link-parameters (delq (assoc "w3m" org-link-parameters) org-link-parameters))
    (setq org-link-parameters (delq (assoc "mhe" org-link-parameters) org-link-parameters)))
#+end_src

** Add feed item
:PROPERTIES:
:CREATED:  [2022-05-16 Mon 14:11]
:END:
This requires the [[https://github.com/HKey/feed-discovery][feed discovery]] package.

#+begin_src emacs-lisp
  (add-to-list 'package-selected-packages 'feed-discovery)

  (with-eval-after-load 'org-capture
    (when (locate-library "feed-discovery")
    (add-to-list 'org-capture-templates
                 '("sf" "Feed" entry
                   (file+headlines "feed.org" "Feeds")
                   "* [[%(actuator-get-feed)][%^{Title}]] %^g
  (yank)\n%?"
                   :prepend
                   :empty-lines 1
                   :kill-buffer))))

  (declare-function feed-discovery-discover-feeds
                    "ext:feed-discovery" (url))

  (defun actuator-get-feed ()
    "Get RSS/Atom feed from url in clipboard."
    (car (feed-discovery-discover-feeds
     (with-temp-buffer
            (yank)
            (buffer-substring-no-properties (point-min) (point-max))))))
#+end_src
** Tags
:PROPERTIES:
:CREATED:  [2022-08-13 Sat 10:15]
:END:
#+begin_src emacs-lisp
  (customize-set-variable 'org-tags-sort-function 'org-string-collate-lessp)
#+end_src

** Org ID
:PROPERTIES:
:CREATED:  [2022-08-13 Sat 11:08]
:END:
#+begin_src emacs-lisp
  (customize-set-variable 'org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src

* Apps
:PROPERTIES:
:CREATED:  [2022-05-13 Fri 20:29]
:END:
** Email
:PROPERTIES:
:CREATED:  [2022-05-13 Fri 20:07]
:END:

*** Mu4e

[[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail + mu4e]]

#+begin_src emacs-lisp
  (when (executable-find "mu")
    (require 'mu4e nil t))
#+end_src

#+begin_src emacs-lisp
  (let ((fish (executable-find "fish")))
    (when fish
      (csetq shell-file-name fish)))
#+end_src

#+begin_src emacs-lisp
  (csetq mu4e-maildir-shortcuts
         '((:maildir "/Archive" :key ?a)
           (:maildir "/Inbox"   :key ?i)))
  (csetq mail-user-agent 'mu4e-user-agent)
  (csetq mu4e-hide-index-messages t)
  (csetq mu4e-update-interval (* 60 15))
  (csetq mu4e-index-update-in-background nil)
  (csetq mu4e-index-update-error-warning t)
  (csetq mu4e-refile-folder "/Archive")
  (csetq mu4e-sent-folder   "/Sent Items")
  (csetq mu4e-drafts-folder "/Drafts")
  (csetq mu4e-trash-folder  "/Trash")
  (csetq mu4e-attachment-dir "~/Downloads/")
  (csetq mu4e-view-show-images t)
  (csetq mu4e-view-show-addresses t)
  (csetq mu4e-change-filenames-when-moving t)
  (csetq mu4e-headers-skip-duplicates t)
  (csetq mu4e-compose-format-flowed t)
  (csetq mu4e-date-format "%y-%m-%d")
  (csetq mu4e-headers-date-format "%y-%m-%d")
  ;;(csetq mu4e-get-mail-command (concat (executable-find "mbsync") " --all"))
  (csetq mu4e-get-mail-command "mbsync --all")
  (csetq mu4e-mu-binary (executable-find "mu"))
  (add-hook 'message-mode-hook 'auto-fill-mode)
  (csetq message-cite-reply-position 'traditional)
#+end_src

#+begin_src emacs-lisp
  (csetq mu4e-icalendar-trash-after-reply t)
  (csetq mu4e-icalendar-diary-file (expand-file-name "inbox.org" org-directory))
  (with-eval-after-load 'mu4e
    (eval-when-compile
      (declare-function mu4e-icalendar-setup "ext:mu4e-icalendar-setup" nil))
    (require 'mu4e-icalendar)
    (mu4e-icalendar-setup))
#+end_src

*** Message

#+begin_src emacs-lisp
  (csetq send-mail-function 'smtpmail-send-it)
  (csetq message-send-mail-function 'smtpmail-send-it)
#+end_src

#+begin_src emacs-lisp
  (csetq user-full-name "Geoff MacIntosh")
  (csetq user-mail-address "geoff@mac.into.sh")
  (csetq smtpmail-smtp-server "smtp.fastmail.com")
  (csetq smtpmail-smtp-service "587")
  (csetq smtpmail-servers-requiring-authorization "fastmail")

  ;; (when (display-graphic-p)
  ;;   (csetq smtpmail-smtp-user (auth-source-pass-get "user" "smtp.fastmail.com")))
#+end_src

#+begin_src emacs-lisp
  (csetq mml-secure-openpgp-encrypt-to-self t)
  (csetq mml-secure-openpgp-sign-with-sender t)
  (csetq mml-secure-smime-encrypt-to-self t)
  (csetq mml-secure-smime-sign-with-sender t)
  (csetq mail-user-agent 'message-user-agent)
  (csetq compose-mail-user-agent-warnings nil)
  (csetq message-mail-user-agent nil)
  ;;(csetq message-citation-line-format "On %Y-%m-%d, %R %z, %f wrote:\n")
  (csetq message-confirm-send nil)
  (csetq message-kill-buffer-on-exit t)
  (csetq message-wide-reply-confirm-recipients t)
  (with-eval-after-load 'mm-bodies
    (defvar mm-body-charset-encoding-alist)
    (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . base64)))

  (with-eval-after-load 'message
    (eval-when-compile
      (declare-function message-sort-headers "message"))
    (add-hook 'message-setup-hook #'message-sort-headers))
#+end_src

#+begin_src emacs-lisp
  (csetq mm-sign-option nil)
  (csetq mm-verify-option 'known)
  (csetq gnus-buttonized-mime-types '("multipart/signed"))
  (csetq mm-decrypt-option 'known)

  (declare-function mml-secure-message-sign-pgpmime "mml-sec")

  (defun actuator-sign-message ()
    "Sign email message with GPG key."
    (require 'mml-sec)
    (message "Signing message.")
    (mml-secure-message-sign-pgpmime))

  (declare-function mml-secure-message-encrypt-pgpmime "mml-sec")

  (defun actuator-encrypt-message ()
    "Encrypt email message with GPG key."
    (require 'mml-sec)
    (message "Encrypting message.")
    (mml-secure-message-encrypt-pgpmime))

  (defun actuator-sign-or-encrypt-message ()
    "Ask to encrypt, sign or skip and send message.

  Should be added to `message-send-hook'."
    (let ((answer (read-answer "Encrypt or sign message?"
                               '(("encrypt" ?e "Encrypt message.")
                                 ("sign"    ?s "Sign message.")
                                 ("skip"    ?  "Skip and send.")))))
      (cond ((equal "encrypt" answer)
             (progn (actuator-encrypt-message) nil)))
      (cond
       ((equal "sign"    answer)
        (progn (actuator-sign-message) nil)))))

  ;;(add-hook 'message-send-hook #'actuator-sign-or-encrypt-message)
#+end_src

#+begin_src emacs-lisp
  (defun actuator-check-for-network-before-sending-message ()
    "Check if network is up before sending a message."
    (if
        (condition-case nil
            (delete-process
             (make-network-process
              :name "check-internet-before-email"
              :host "fastmail.com"
              :service 80))
          (error t))
        (csetq smtpmail-queue-mail t)
      (csetq smtpmail-queue-mail nil)))

  ;;(add-hook 'message-send-hook #'actuator-check-for-network-before-sending-message)
#+end_src

*** Mu4e Alert
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (when (executable-find "mu")
      (add-to-list 'package-selected-packages 'mu4e-alert))
    (with-eval-after-load 'mu4e
      (when (locate-library "mu4e-alert")
        (declare-function mu4e-alert-set-default-style "ext:mu4e-alert")
        (declare-function mu4e-alert-enable-notifications "ext:mu4e-alert")
        (declare-function mu4e-alert-enable-mode-line-display "ext:mu4e-alert")
        (cond ((eq system-type 'gnu/linux)
               (mu4e-alert-set-default-style 'libnotify))
              ((eq system-type 'darwin)
               (mu4e-alert-set-default-style 'osx-notifier)))
        (mu4e-alert-enable-notifications)
        (mu4e-alert-enable-mode-line-display))))
#+end_src
*** Alert

#+begin_src emacs-lisp
  (defvar alert-default-style)
  (with-eval-after-load 'package
    (unless (eq system-type 'windows-nt)
      (add-to-list 'package-selected-packages 'alert)))
  (cond ((eq system-type 'gnu/linux)
         (csetq alert-default-style 'libnotify))
        ((eq system-type 'darwin)
         (csetq alert-default-style 'osx-notifier)))
#+end_src

#+begin_src emacs-lisp
  (defvar org-show-notification-timeout)
  (eval-when-compile
    (declare-function notifications-notify "notifications"
                      (&rest params))
    (declare-function notifications-get-capabilities "notifications"
                      (&optional bus)))

  (defun actuator-notify (title message)
    "Send a system notification based on capabilities.
  Requires TITLE and MESSAGE strings."
    (cond ((notifications-get-capabilities)
           (notifications-notify
            :title title
            :body message
            :timeout (* org-show-notification-timeout 1000)
            :urgency 'low))
          ((fboundp 'ns-do-applescript)
           (ns-do-applescript
            (format "display notification \"%s\" with title \"%s\""
                    (replace-regexp-in-string
                     "[0-9][0-9]:[0-9][0-9] [[:upper:]]* " ""
                     (replace-regexp-in-string

                    "[[:space:]][[:space:]]+:[[:alpha:]]+:"
                      ""
                      (replace-regexp-in-string "\"" "#" message)))
                    (replace-regexp-in-string "\"" "#" title))))
          ((fboundp 'w32-notification-notify)
           (w32-notification-notify
            :title title
            :body message
            :level 'info))
          (t
           (error "No notification system available"))))
#+end_src
*** Attachment reminder
:PROPERTIES:
:CREATED:  [2022-05-27 Fri 15:14]
:END:
:LOGBOOK:
- Refiled on [2022-06-13 Mon 17:32]
- State "NEXT"       from "TODO"       [2022-06-13 Mon 17:02]
- State "NEXT"       from "TODO"       [2022-06-13 Mon 16:39]
- Refiled on [2022-06-08 Wed 21:08]
:END:
#+begin_src emacs-lisp
  ;; thunderbird attachment reminder
  ;; "attach\\|\Wfiles?\W\\|\Wphoto\\|\Where\s-+is\\|\Where\s-+are\\|\Where\s-+it\s-+is\\|enclose\\|\Wdraft\\|\Wversion"

  (defvar xtr-message-attachment-regexp "\\([Ww]e send\\|[Ii]
  send\\|attach\\)")

  (defun xtr-message-check-attachment ()
    "Check if there is an attachment in the message if I claim it."
    (eval-when-compile
      (declare-function message-goto-body "message" (&optional interactive))
      (declare-function message-y-or-n-p "message" t t))
    (save-excursion
      (message-goto-body)
      (when (search-forward-regexp xtr-message-attachment-regexp nil t nil)
        (message-goto-body)
        (unless (or (search-forward "<#part" nil t nil)
                    (message-y-or-n-p
                     "No attachment. Send the message ?" nil nil))
          (error "No message sent")))))

  (add-hook 'message-send-hook 'xtr-message-check-attachment)
#+end_src

#+results:
| xtr-message-check-attachment |

** Web
*** Set up browsing handlers
Customizing the browse-url handlers is remarkably powerful. I don't use Emacs as a web browser much, but I do use a lot of links in Org-mode documents. If something isn't set here, it opens the URL in the default manner, which in my case is Safari ([[https://developer.apple.com/safari/technology-preview/][Technology Preview]]).

#+begin_src emacs-lisp :tangle no
  (csetq browse-url-handlers '(("wikipedia"   . eww )
                               ("youtu\\.?be" . actuator-browse-video)
                               ("twitch"      . actuator-browse-video)))
#+end_src

#+begin_src emacs-lisp
  (csetq eww-history-limit 1000)
#+end_src

*** Handle video urls
I want video links to be opened in MPV. This helps my battery life as well as my personal life because I don't have to visit YouTube. This requires [[https://mpv.io][MPV]] to be installed, which is best installed via [[http://brew.sh][Brew]] on macOS. I've tried to use [[https://nixos.org/download.html][Nix]], but it doesn't work well.

#+begin_src emacs-lisp
  (defun actuator-browse-video (url &rest _args)
    "Browse URL with a dedicated video player.
  Avoids opening a browser window."
    (call-process "mpv" nil 0 nil url))
#+end_src

*** Simple HTML renderer
SHR is used to render all sorts of basic HTML in Emacs, including Elfeed posts and Nov.el books. Normally it wraps at the page width, but that can be adjusted.

#+begin_src emacs-lisp
  (csetq shr-width 75)
  (csetq shr-use-colors nil)
  (csetq shr-use-fonts nil)
  (csetq shr-image-animate nil)
  (csetq shr-cookie-policy nil)
#+end_src

*** Open links in background

#+begin_src emacs-lisp
  (csetq browse-url-secondary-browser-function 'eww)
#+end_src

#+begin_src emacs-lisp
  (when (executable-find "firefox")
    (csetq browse-url-browser-function 'browse-url-firefox))
#+end_src

#+begin_src emacs-lisp
  (when (executable-find "open")
    (csetq browse-url-browser-function 'browse-url-generic)
    (csetq browse-url-generic-program "open")
    (csetq browse-url-generic-args '("--background")))
#+end_src

** ERC
#+begin_src emacs-lisp
  (defun actuator-twitch-start-irc ()
    "Connect to Twitch IRC channel.

  I really want to use irc for something for some reason."

    (interactive)
    (erc-tls :server "irc.chat.twitch.tv"
             :port 6697
             :nick (auth-source-pass-get "user" "twitch.tv")
             :password (auth-source-pass-get "oauth" "twitch.tv")))
#+end_src

** Doc View

In order to open epub files, doc-view needs mutool:

#+begin_src emacs-lisp
  (when (executable-find "mutool")
    (csetq doc-view-pdfdraw-program "mutool"))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . doc-view-mode))

  (defvar actuator-doc-view-bookmark-push nil
    "Overwrite or add a new bookmark for doc-view files.

  When set to nil, the bookmark entry will be overwritten, so that
  only one bookmark per buffer will be written. Set to non-nil to
  push a new bookmark each time the buffer is killed. Only the
  latest bookmark will be used automatically to jump to the
  location. I guess you could use this to keep a record of how much
  you read each time, but honestly that seems absurd to me.")

  (defun actuator-doc-view-open-handler ()
    "Jump to bookmark location if available when opening a document."

    (require 'bookmark)
    (eval-when-compile
      (declare-function bookmark-maybe-load-default-file "bookmark"))
    (bookmark-maybe-load-default-file)
    (bookmark-jump (buffer-name)))

  (defun actuator-doc-view-save-handler ()
    "Create a bookmark when killing a doc-view buffer.

  See the variable `actuator-doc-view-bookmark-push' to customize
  the behaviour of this function."

    (when (eq major-mode 'doc-view-mode)
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (bookmark-set (buffer-name) actuator-doc-view-bookmark-push)))

  (add-hook 'doc-view-mode-hook #'actuator-doc-view-open-handler)
  (add-hook 'kill-buffer-hook #'actuator-doc-view-save-handler)

  (csetq doc-view-resolution 150)
#+end_src

https://gist.github.com/spacebat/5500966

** Eshell

#+begin_src emacs-lisp
  (defalias 'eshell/f  'find-file-other-window)
  (defalias 'eshell/ff 'find-file)
  (defalias 'eshell/v  'view-file-other-window)
  (defalias 'eshell/vv 'view-file)

  (csetq eshell-destroy-buffer-when-process-dies t)
  (csetq eshell-banner-message "")
  (csetq eshell-history-size 10000)
  (csetq eshell-hist-ignoredups t)
  (csetq eshell-cmpl-cycle-completions nil)
  (csetq eshell-cmpl-ignore-case t)
  (csetq eshell-where-to-jump 'begin)
  (csetq eshell-review-quick-commands nil)
  (csetq eshell-smart-space-goes-to-end t)
#+end_src

#+begin_src emacs-lisp
  (eval-when-compile
    (declare-function eshell-smart-initialize "em-smart"))
  (defvar eshell-modules-list)

  (with-eval-after-load 'eshell
    (require 'em-smart)
    (eshell-smart-initialize)
    (add-to-list 'eshell-modules-list 'eshell-elecslash))
#+end_src

- [[http://xenodium.com/imenu-on-emacs-eshell/][imenu on Emacs eshell]] [2020-05-12 Tue]

#+begin_src emacs-lisp :tangle no
  (defun actuator-eshell-imenu ()
    "Set up eshell-imenu integration"

    (setq-local imenu-generic-expression
                '(("Prompt" "^.*?[#❯]" 1))))
  (add-hook 'eshell-mode-hook #'actuator-eshell-imenu)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun actuator-pcomplete-std-complete ()
    (interactive)
    (pcomplete-std-complete))

(with-eval-after-load 'esh-mode
   (define-key eshell-mode-map (kbd "<tab>") #'actuator-pcomplete-std-complete))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'pcmpl-args)
  (with-eval-after-load 'eshell
    (require 'pcmpl-args nil t))
#+end_src

#+begin_src emacs-lisp :tangle no
  (when (executable-find "brew")
    (add-to-list 'package-selected-packages 'pcmpl-homebrew)
    (with-eval-after-load 'eshell
      (require 'pcmpl-homebrew nil t)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'fish-completion)

  (csetq fish-completion-fallback-on-bash-p t)

  (defun actuator-set-up-eshell-fish-completion ()
    "arst"
    (when (executable-find "fish")
      (require 'fish-completion nil t)
      (fish-completion-mode)))

  ;;(add-hook 'eshell-mode-hook #'actuator-set-up-eshell-fish-completion)
#+end_src

#+begin_src emacs-lisp :tangle no
  (add-hook 'eshell-expand-input-functions
            #'eshell-expand-history-references)
#+end_src

#+begin_src emacs-lisp
  (defun fish-path (path max-len)
    "Return a potentially trimmed-down version of the directory PATH.
  Replacing parent directories with their initial characters to try
  to get the character length of PATH (sans directory slashes) down
  to MAX-LEN."
    (require 'cl-seq)
    (declare-function cl-reduce "cl-seq")
    (let* ((components (split-string (abbreviate-file-name path) "/"))
           (len (+ (1- (length components))
                   (cl-reduce '+ components :key 'length)))
           (str ""))
      (while (and (> len max-len)
                  (cdr components))
        (setq str (concat str
                          (cond ((= 0 (length (car components))) "/")
                                ((= 1 (length (car components)))
                                 (concat (car components) "/"))
                                (t
                                 (if (string= "."
                                              (string (elt (car components) 0)))
                                     (concat (substring (car components) 0 2)
                                             "/")
                                   (string (elt (car components) 0) ?/)))))
              len (- len (1- (length (car components))))
              components (cdr components)))
      (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun actuator-eshell-prompt ()
    "Custom prompt for eshell.

  Designed to be as minimalist as possible, while being moderately useful."

    (require 'eshell)
    (require 'em-dirs)
    (eval-when-compile
      (declare-function eshell/pwd "em-dirs"))
    (concat
     ;;(user-login-name)
     ;;"@"
     ;;(system-name)
     ;;":"
     (fish-path (eshell/pwd) 20)
     " ❯ "))
  (csetq eshell-prompt-regexp "^.+@.+:.+❯ ")
  (csetq eshell-prompt-function #'actuator-eshell-prompt)
#+end_src

** Emms
:PROPERTIES:
:CREATED:  [2022-02-02 Wed 11:25]
:END:
:LOGBOOK:
- Refiled on [2022-02-04 Fri 10:52]
:END:
#+begin_src emacs-lisp
  (when (executable-find "mpd")
    (with-eval-after-load 'package
      (add-to-list 'package-selected-packages 'emms)
      (add-to-list 'package-selected-packages 'org-emms)))

  (csetq emms-player-list '(emms-player-mpd))
  (csetq emms-player-mpd-server-name "localhost")
  (csetq emms-player-mpd-server-port "6600")
  (csetq emms-player-mpd-music-directory (expand-file-name "~/Music/Music Files/"))

  (eval-when-compile
    (declare-function emms-player-mpd-update-all "ext:emms-player-mpd" nil)
    (declare-function emms-cache-set-from-mpd-all "ext:emms-player-mpd" nil)
    (declare-function emms-player-mpd-connect "ext:emms-player-mpd" nil)
    (declare-function emms-mode-line-mode "ext:emms-mode-line" (&optional arg))
    (declare-function emms-playing-time-display-mode "ext:emms-playing-time" (&optional arg))
    (declare-function emms-smart-browse "ext:emms-browser" nil)
    (declare-function emms-all "ext:emms-setup" nil))
  (defvar emms-info-functions)
  (defvar emms-player-list)

  (defun actuator-setup-emms ()
    "Wrapper because `emms' isn't always available."
    (interactive)
    (if (locate-library "emms")
        (progn
          (unless (featurep 'emms)
            (require 'emms-setup)
            (require 'emms-player-mpd)
            (emms-all)
            (add-to-list 'emms-info-functions 'emms-info-mpd)
            (add-to-list 'emms-player-list 'emms-player-mpd)
            (emms-player-mpd-connect)
            (emms-mode-line-mode -1)
            (emms-playing-time-display-mode -1)
            (emms-player-mpd-update-all))
          (emms-smart-browse))
      (message "EMMS is not installed.")))

  (global-set-key (kbd "C-c m") #'actuator-setup-emms)
#+end_src

* Afterword

#+begin_src emacs-lisp :comments no
  (provide 'init)
  ;;; init.el ends here
#+end_src

* Local variables
:PROPERTIES:
:CREATED:  [2022-05-15 Sun 20:45]
:END:
Local Variables:
eval: (add-hook 'org-babel-post-tangle-hook #'actuator-regen-init nil t)
eval: (add-hook 'org-babel-pre-tangle-hook #'widen nil t)
End:
