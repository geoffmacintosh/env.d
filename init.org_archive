#    -*- mode: org -*-


Archived entries from file /Users/g/env.d/actuator-emacs.org


* DONE Type break
:PROPERTIES:
:CREATED:  [2022-02-10 Thu 11:17]
:ARCHIVE_TIME: 2022-05-13 Fri 20:22
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_CATEGORY: actuator-emacs
:END:
  #+begin_src emacs-lisp
    (csetq type-break-query-mode t)
    (csetq type-break-mode-line-message-mode t)
    (csetq type-break-demo-boring-stats t)
    (csetq type-break-terse-messages t)
    ;;(type-break-mode +1)
  #+end_src

* DONE AES
:PROPERTIES:
:ARCHIVE_TIME: 2022-05-13 Fri 20:22
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_CATEGORY: actuator-emacs
:END:
#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-selected-packages 'aes)
  (declare-function aes-enable-auto-decryption "ext:aes" nil)
  (when (package-installed-p 'aes)
    (require 'aes)
    (aes-enable-auto-decryption))

  (csetq aes-enable-plaintext-password-storage t)
#+end_src

* DONE Git revision export macro
:PROPERTIES:
:CREATED:  [2022-02-23 Wed 11:05]
:ARCHIVE_TIME: 2022-05-16 Mon 09:45
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: PIM
:ARCHIVE_CATEGORY: actuator-emacs
:END:
:LOGBOOK:
- Refiled on [2022-03-06 Sun 17:04]
:END:

#+begin_src emacs-lisp
  (defvar org-export-global-macros)

    (with-eval-after-load 'ox
  (add-to-list 'org-export-global-macros '("revision" . "(eval (actuator-get-revision))")))
#+end_src

#+begin_src emacs-lisp
  (defun actuator-get-revision ()
    "Test"
    (if (string-equal (ignore-errors
                        (vc-responsible-backend (buffer-file-name) nil))
                      "Git")
        (string-trim (shell-command-to-string "git rev-list --count HEAD"))
      "none"))
#+end_src

Might be a good idea to make sure that it doesn't error out if there's no git dir

This is revision {{{revision}}}.

* DONE Sort on save
:PROPERTIES:
:CREATED:  [2022-06-04 Sat 10:54]
:ARCHIVE_TIME: 2022-06-16 Thu 19:27
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: Emacs
:ARCHIVE_CATEGORY: actuator-emacs
:END:
:LOGBOOK:
- Refiled on [2022-06-08 Wed 15:14]
:END:
#+begin_src emacs-lisp
  (defun xtr-org-sort-top-level-buffer ()
    "Do the thing correctly."
    (interactive)
    (when (eq major-mode 'org-mode))
      (goto-char (point-min))
      (org-sort-entries nil ?t))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'before-save-hook #'xtr-org-sort-top-level-buffer nil t)
#+end_src

* DONE Make Checklist
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-19 Sun 15:57
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: Emacs/Keyboard Macros
:ARCHIVE_CATEGORY: actuator-emacs
:END:
#+begin_src emacs-lisp
  (with-eval-after-load 'kmacro
  (fset 'actuator-make-checklist
        (kmacro [?\C-a ?- ?  ?\[ ?  ?\] ?  ?\C-n] 0 "%d")))
  ;;(global-set-key (kbd "C-x C-k 1") #'actuator-make-checklist)
#+end_src

* DONE Ivy
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-23 Thu 13:46
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: Modes
:ARCHIVE_CATEGORY: actuator-emacs
:END:

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'counsel)
    (add-to-list 'package-selected-packages 'ivy)
    (add-to-list 'package-selected-packages 'swiper))

  (csetq counsel-find-file-ignore-regexp "\\`\\.")

  (when (package-installed-p 'counsel)
    (eval-when-compile
      (declare-function counsel-buffer-or-recentf "counsel")
      (declare-function counsel-find-file "counsel")
      (declare-function counsel-M-x "counsel")
      (declare-function counsel-describe-function "counsel")
      (declare-function counsel-describe-variable "counsel")
      (declare-function counsel-search "counsel")
      (declare-function counsel-yank-pop "counsel"))
    (global-set-key (kbd "C-x C-r") #'counsel-buffer-or-recentf)
    (global-set-key (kbd "C-x C-f") #'counsel-find-file)
    (global-set-key (kbd "M-x")     #'counsel-M-x)
    (global-set-key (kbd "C-h f")   #'counsel-describe-function)
    (global-set-key (kbd "C-h v")   #'counsel-describe-variable)
    (global-set-key (kbd "C-c s")   #'counsel-search)
    (global-set-key (kbd "M-y")     #'counsel-yank-pop))
#+end_src

#+begin_src emacs-lisp :tangle no
      (defvar ivy-minibuffer-map)
  (when (package-installed-p 'ivy)
    (eval-when-compile
      (declare-function ivy-switch-buffer "ivy"))
    (global-set-key (kbd "C-x b") #'ivy-switch-buffer))

  (with-eval-after-load 'ivy
    (eval-when-compile

      (declare-function counsel-mode "counsel")
      (declare-function ivy-mode "ivy")
      (declare-function ivy-immediate-done "ivy")
      (declare-function ivy-alt-done "ivy")
      (declare-function ivy-next-line "ivy"))
    (counsel-mode +1)
    (ivy-mode +1)
    (define-key ivy-minibuffer-map (kbd "<C-return>") #'ivy-immediate-done)
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "M-y") #'ivy-next-line))

  (csetq ivy-use-ignore-default 'always)
  (csetq ivy-ignore-buffers '("*elfeed-log*"
                              "*straight-process*"
                              "*Completions*"
                              "*Compile-Log*"))
  (csetq ivy-use-virtual-buffers nil)
  (csetq ivy-count-format "(%d/%d) ")
  (csetq ivy-extra-directories nil)
#+end_src


#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'prescient)
    (add-to-list 'package-selected-packages 'ivy-prescient))

  (with-eval-after-load 'ivy
    (when (package-installed-p 'ivy-prescient)
      (eval-when-compile
        (declare-function ivy-prescient-mode "ivy-prescient")
        (declare-function prescient-persist-mode "prescient"))
      (ivy-prescient-mode +1)
      (prescient-persist-mode +1)))
  (csetq prescient-history-length 10000)
  (csetq prescient-aggressive-file-save t)
#+end_src

* DONE Org Link Minor Mode
:PROPERTIES:
:ARCHIVE_TIME: 2022-06-23 Thu 13:51
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: PIM
:ARCHIVE_CATEGORY: actuator-emacs
:END:

#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'package
   (add-to-list 'package-selected-packages 'org-link-minor-mode))
  (eval-when-compile
    (declare-function org-link-minor-mode ))
  (when (package-installed-p 'org-link-minor-mode)
    (add-hook 'emacs-lisp-mode-hook #'org-link-minor-mode))
#+end_src

* DONE Mastodon
:PROPERTIES:
:CREATED:  [2022-05-01 Sun 19:06]
:ARCHIVE_TIME: 2022-06-23 Thu 21:09
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: Apps
:ARCHIVE_CATEGORY: actuator-emacs
:END:

#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (add-to-list 'package-selected-packages 'mastodon))
  (csetq mastodon-active-user "mac_into_sh")
  (csetq mastodon-instance-url "https://mastodon.social")
#+end_src

* DONE Org ID
:PROPERTIES:
:ARCHIVE_TIME: 2022-08-13 Sat 11:07
:ARCHIVE_FILE: ~/env.d/actuator-emacs.org
:ARCHIVE_OLPATH: Org
:ARCHIVE_CATEGORY: actuator-emacs
:END:
https://helpdeskheadesk.net/2022-03-13/

#+begin_src emacs-lisp :tangle no
  (csetq org-id-method 'ts)
  (csetq org-attach-id-to-path-function-list
    '(actuator-org-attach-id-ts-folder-format
      org-attach-id-uuid-folder-format))
#+end_src

#+begin_src emacs-lisp
  (csetq org-id-ts-format "%Y-%B-%d-%H%M-%S%6N")
#+end_src

#+begin_src emacs-lisp
  (defun actuator-org-attach-id-ts-folder-format (id)
    "Translate an ID based on a timestamp to a folder-path.
  Useful way of translation if ID is generated based on ISO8601
  timestamp. Splits the attachment folder hierarchy into
  year-month, the rest."
    (format "%s/%s"
            (substring id 0 4)
            (substring id 5)))
#+end_src

* DONE Csetq
:PROPERTIES:
:ARCHIVE_TIME: 2022-08-27 Sat 16:01
:ARCHIVE_FILE: ~/env.d/init.org
:ARCHIVE_OLPATH: Init
:ARCHIVE_CATEGORY: init
:END:
The macro ~csetq~ probably has limited actual purpose. It provides the same interfaces as ~setq~ so if you don't use it it's a simple switch. It might make things better in some situations and should never make things worse. It's stolen from Lele Gaifax on the [[https://lists.gnu.org/archive/html/help-gnu-emacs/2015-12/msg00097.html][Emacs mailing list]].

#+begin_src emacs-lisp
  (defmacro csetq (variable value)
    "Macro to set the VALUE of VARIABLE, possibly a custom user option.

  Should be a drop-in replacement for `setq', switching between the
  two should only cause issues if the variable is supposed to be
  set with customize."
    `(funcall (or (get ',variable 'custom-set)
                  (and (plist-member (symbol-plist ',variable)
                                     'standard-value)
                       'set-default)
                  'set)
              ',variable ,value))
#+end_src
