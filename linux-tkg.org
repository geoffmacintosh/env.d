#+title: Linux TKG
#+index: Linux!Linux TKG
#+header-args: :tangle ~/.config/frogminer/linux-tkg.cfg

* Linux TKG
#+begin_src conf
  _distro="Arch"
  _EXT_CONFIG_PATH=~/.config/frogminer/linux-tkg.cfg
  _NUKR="true"
  CUSTOM_GCC_PATH=""
  CUSTOM_LLVM_PATH=""
#+end_src

* Profile
Set to the number corresponding to a predefined profile to use it. Current list of available profiles:

1. Custom (meaning nothing will be enforced and you get to configure everything)
2. Ryzen desktop (performance)
3. Generic Desktop (Performance)

#+begin_src conf
  _OPTIPROFILE="1"
  _force_all_threads="true"
#+end_src

* Ccache
 Set to true to prevent ccache from being used and set CONFIG_GCC_PLUGINS=y (which needs to be disabled for ccache to work properly).

#+begin_src conf
  _noccache="false"
#+end_src

* Modprobe
Set to true to use modprobed db to clean config from unneeded modules. Speeds up compilation considerably. Requires root - https://wiki.archlinux.org/index.php/Modprobed-db.

Make sure to have a well populated db - Leave empty to be asked about it at build time.

#+begin_src conf
  _modprobeddb="false"
#+end_src

#+begin_src conf
  _modprobeddb_db_path=~/.config/modprobed.db
#+end_src

* Menuconfig
Set to "1" to call make menuconfig, "2" to call make nconfig, "3" to call make xconfig, before building the kernel. Set to false to disable and skip the prompt.

#+begin_src conf
  _menunconfig="false"
#+end_src

* Config fragment
Set to true to generate a kernel config fragment from your changes in menuconfig/nconfig. Set to false to disable and skip the prompt.

#+begin_src conf
  _diffconfig="false"
#+end_src

Set to the file name where the generated config fragment should be written to. Only used if _diffconfig is active.

#+begin_src conf
  _diffconfig_name=""
#+end_src

* Config File
Name of the default config file to use for the kernel
- Default (empty):
   - Archlinux (PKGBUILD): "config.x86_64" from the linux-tkg-config/5.y folder.
   - install.sh: Picks the .config file from the currently running kernel. It is recommended to be running an official kernel before running this script, to pick off a correct .config file
- User provided:
   - Archlinux: use "config_hardened.x86_64" to get a hardened kernel. To get a complete hardened setup, you have to use "cfs" as _cpusched.
   - Any: custom user provided file, the given path should be relative to the PKGBUILD file. This enables for example to use a user stripped down .config file. If the .config file isn't up to date with the chosen kernel version, any extra CONFIG_XXXX is set to its default value.

The script copies the resulting .config file as "kernelconfig.new" next to the PKGBUILD as a convenience for an eventual re-use. It gets overwritten at each run. One can use "kernelconfig.new" here to always use the latest edited .config file. modprobed-db needs to be used only once for its changes to be picked up.

#+begin_src conf
  _configfile=""
#+end_src

* Debugging
Disable some non-module debugging - See PKGBUILD for the list

#+begin_src conf
  _debugdisable="false"
#+end_src

* CPU scheduler
LEAVE AN EMPTY VALUE TO BE PROMPTED ABOUT FOLLOWING OPTIONS AT BUILD TIME

CPU scheduler - Options are "upds" (TkG's Undead PDS), "pds", "bmq", "muqss" or "cfs". "upds" is the recommended option for gaming

#+begin_src conf
  _cpusched="upds"
#+end_src

* Compiler
Compiler to use - Options are "gcc" or "llvm".
For advanced users.

#+begin_src conf
  _compiler="gcc"
#+end_src

* Scheduler yield type
CPU sched_yield_type - Choose what sort of yield sched_yield will perform.

For PDS and MuQSS:
- 0: No yield. (Recommended option for gaming on PDS and MuQSS)
- 1: Yield only to better priority/deadline tasks. (Default - can be unstable with PDS on some platforms)
- 2: Expire timeslice and recalculate deadline. (Usually the slowest option for PDS and MuQSS, not recommended)

For BMQ:
- 0: No yield.
- 1: Deboost and requeue task. (Default)
- 2: Set rq skip task.

#+begin_src conf
  _sched_yield_type="0"
#+end_src

* Round robin
Round Robin interval is the longest duration two tasks with the same nice level will be delayed for. When CPU time is requested by a task, it receives a time slice equal to the rr_interval in addition to a virtual deadline. When using yield_type 2, a low value can help offset the disadvantages of rescheduling a process that has yielded.

 - MuQSS default: 6ms"
 - PDS default: 4ms"
 - BMQ default: 2ms"

 Set to "1" for 2ms, "2" for 4ms, "3" for 6ms, "4" for 8ms, or "default" to keep the chosen scheduler defaults.

#+begin_src conf
  _rr_interval="default"
#+end_src

* Tracer
  Set to "true" to disable FUNCTION_TRACER/GRAPH_TRACER, lowering overhead but limiting debugging and analyzing of kernel functions - Kernel default is "false"

#+begin_src conf
  _ftracedisable="true"
#+end_src

* NUMA
Set to "true" to disable NUMA, lowering overhead, but breaking CUDA/NvEnc on Nvidia equipped systems - Kernel default is "false"

#+begin_src conf
  _numadisable="true"
#+end_src

* Misc additions
  Set to "true" to enable misc additions - May contain temporary fixes pending upstream or changes that can break on non-Arch - Kernel default is "true"

#+begin_src conf
  _misc_adds="true"
#+end_src

* Tickless
- "1" to use CattaRappa mode (enabling full tickless)
- "2" for tickless idle only
- "0" for periodic ticks

Full tickless can give higher performances in various cases but, depending on hardware, lower consistency. Just tickless idle can perform better on some platforms (mostly AMD based).

#+begin_src conf
  _tickless="2"
#+end_src

* Voluntary preempt
 Setting this to to "true" can improve latency on PDS (at the cost of throughput) and improve throughput on other schedulers (at the cost of latency) - Can improve VMs performance - Kernel default is "false".

#+begin_src conf
  _voluntary_preempt="true"
#+end_src

* Device tree and open firmware
Set to "true" to enable Device Tree and Open Firmware support. If you don't know about it, you don't need it - Default is "false".

#+begin_src conf
  _OFenable="false"
#+end_src

* ACS override
  Set to "true" to use ACS override patch https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Bypassing_the_IOMMU_groups_.28ACS_override_patch.29 - Kernel default is "false".

#+begin_src conf
  _acs_override=""
#+end_src

* Bcache filesystem
Set to "true" to add Bcache filesystem support. You'll have to install bcachefs-tools-git from AUR for utilities - https://bcachefs.org/ - If in doubt, set to "false"

#+begin_src conf
  _bcachefs="false"
#+end_src

* ZFS symbols
Set to "true" to add back missing symbol for AES-NI/AVX support on ZFS - https://github.com/NixOS/nixpkgs/blob/master/pkgs/os-specific/linux/kernel/export_kernel_fpu_functions.patch - Kernel default is "false"

#+begin_src conf
  _zfsfix="false"
#+end_src

* Proton
Set to "true" to enable support for fsync, an experimental replacement for esync found in Valve Proton 4.11+ - https://steamcommunity.com/games/221410/announcements/detail/2957094910196249305

#+begin_src conf
  _fsync="true"
#+end_src

Set to "true" to enable support for futex2, an experimental interface that can be used by proton-tkg and proton 5.13 experimental through Fsync - Can be enabled alongside fsync to use it as a fallback.

https://gitlab.collabora.com/tonyk/linux/-/tree/futex2-dev
#+begin_src conf
  _futex2="true"
#+end_src

Set to "true" to enable support for winesync, an experimental replacement for esync - requires patched wine - https://repo.or.cz/linux/zf.git/shortlog/refs/heads/winesync

#+begin_src conf
  _winesync="false"
#+end_src

* Anbox
  Set to "true" to enable the Binder and Ashmem, the kernel modules required to use the android emulator Anbox.

#+begin_src conf
  _anbox="false"
#+end_src

* Zen
A selection of patches from Zen/Liquorix kernel and additional tweaks for a better gaming experience (ZENIFY) - Default is "true"

#+begin_src conf
  _zenify="true"
#+end_src

* Compiler optimization
Compiler optimization level

1. Optimize for performance (-O2)
2. Optimize harder (-O3)
3. Optimize for size (-Os)

- Kernel default is "1"

#+begin_src conf
  _compileroptlevel="1"
#+end_src

* CPU compiler optimizations
CPU compiler optimizations - Defaults to prompt at kernel config if left empty

AMD CPUs : "k8" "k8sse3" "k10" "barcelona" "bobcat" "jaguar" "bulldozer" "piledriver" "steamroller" "excavator" "zen" "zen2" "zen3" (zen3 opt support depends on GCC11)

Intel CPUs : "mpsc"(P4 & older Netburst based Xeon) "atom" "core2" "nehalem" "westmere" "silvermont" "sandybridge" "ivybridge" "haswell" "broadwell" "skylake" "skylakex" "cannonlake" "icelake" "goldmont" "goldmontplus" "cascadelake" "cooperlake" "tigerlake"

Other options :

- "native_amd" (use compiler autodetection - Selecting your arch manually in the list above is recommended instead of this option)
- "native_intel" (use compiler autodetection and will prompt for P6_NOPS - Selecting your arch manually in the list above is recommended instead of this option)
- "generic" (kernel's default - to share the package between machines with different CPU µarch as long as they are x86-64)

https://en.wikipedia.org/wiki/X86-64#Microarchitecture_Levels)

- "generic_v2" (depends on GCC11 - to share the package between machines with different CPU µarch supporting at least x86-64-v2
- "generic_v3" (depends on GCC11 - to share the package between machines with different CPU µarch supporting at least x86-64-v3
- "generic_v4" (depends on GCC11 - to share the package between machines with different CPU µarch supporting at least x86-64-v4

#+begin_src conf
  _processor_opt="native"
#+end_src

* IRQ Threading
MuQSS only - Make IRQ threading compulsory (FORCE_IRQ_THREADING) - Default is "false"

#+begin_src conf
  _irq_threading="false"
#+end_src

* SMT
MuQSS and PDS only - SMT (Hyperthreading) aware nice priority and policy support (SMT_NICE) - Kernel default is "true" - You can disable this on non-SMT/HT CPUs for lower overhead

#+begin_src conf
  _smt_nice=""
#+end_src


* Random
Trust the CPU manufacturer to initialize Linux's CRNG (RANDOM_TRUST_CPU) - Kernel default is "false"

#+begin_src conf
  _random_trust_cpu="false"
#+end_src

* CPU runqueue sharing
  MuQSS only - CPU scheduler runqueue sharing - No sharing (RQ_NONE), SMT (hyperthread) siblings (RQ_SMT), Multicore siblings (RQ_MC), Symmetric Multi-Processing (RQ_SMP), NUMA (RQ_ALL)

  Valid values are "none", "smt", "mc", "mc-llc"(for zen), "smp", "all" - Kernel default is "smt"

#+begin_src conf
  _runqueue_sharing=""
#+end_src

* Timer frequency
Timer frequency - "100" "500", "750" or "1000" - More options available in kernel config prompt when left empty depending on selected cpusched - Kernel default is "500" - For MuQSS, 100Hz is recommended.

#+begin_src conf
  _timer_freq="500"
#+end_src

* CPU governor
Default CPU governor - "performance", "ondemand", "schedutil" or leave empty for default (schedutil)

#+begin_src conf
  _default_cpu_gov="ondemand"
#+end_src

* Aggressive ondemand governor
Use an aggressive ondemand governor instead of default ondemand to improve performance on low loads/high core count CPUs while keeping some power efficiency from frequency scaling. It still requires you to either set ondemand as default governor or to select it some way.

#+begin_src conf
  _aggressive_ondemand="true"
#+end_src

* ACPI_CPUFREQ
On some platforms, an acpi_cpufreq bug affects performance negatively. Set to "true" to disable it as a workaround, but it will use more power.

https://github.com/Tk-Glitch/PKGBUILDS/issues/263

#+begin_src conf
  _disable_acpi_cpufreq=""
#+end_src

* Cusom command lines
You can pass a default set of kernel command line options here - example: "intel_pstate=passive nowatchdog amdgpu.ppfeaturemask=0xfffd7fff mitigations=off"

#+begin_src conf
  _custom_commandline="intel_pstate=passive"
#+end_src

* Custom package base
If you want to bypass the stock naming scheme and enforce something else (example : "linux") - Useful for some bootloaders requiring manual entry editing on each release.

It will also change pkgname - If you don't explicitely need this, don't use it !!!

#+begin_src conf
  _custom_pkgbase=""
#+end_src

* Kernel localversion
[non-Arch specific] Kernel localversion. Putting it to "Mario" will make for example the kernel version be 5.7.0-tkg-Mario (given by uname -r)

If left empty, it will use -tkg-"${_cpusched}" where "${_cpusched}" will be replaced by the user chosen scheduler

#+begin_src conf
  _kernel_localversion=""
#+end_src

* Community patches
community patches - add patches (separated by a space) of your choice by name from the community-patches dir

example: _community_patches="clear_nack_in_tend_isr.myrevert ffb_regression_fix.mypatch 0008-drm-amd-powerplay-force-the-trim-of-the-mclk-dpm-levels-if-OD-is-enabled.mypatch"

#+begin_src conf
  _community_patches=""
#+end_src

You can use your own patches by putting them in a subfolder called linux<version>-tkg-userpatches (e.g. linux510-tkg-userpatches) next to the PKGBUILD and giving them the .mypatch extension.

You can also revert patches by putting them in that same folder and giving them the .myrevert extension.

Also, userpatches variable below must be set to true for the above to work.

#+begin_src conf
  _user_patches="true"
#+end_src

Apply all user patches without confirmation - !!! NOT RECOMMENDED !!!

#+begin_src conf

  _user_patches_no_confirm="false"
#+end_src

You can use your own kernel config fragments by putting them in the same folder as the PKGBUILD and giving them the .myfrag extension.

Also, the config fragments variable below must be set to true for the above to work.

#+begin_src conf
  _config_fragments="true"
#+end_src

Apply all config fragments without confirmation.

#+begin_src conf
  _config_fragments_no_confirm="false"
#+end_src
